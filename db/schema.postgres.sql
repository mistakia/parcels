--
-- PostgreSQL database dump
--

-- Dumped from database version 15.7 (Ubuntu 15.7-1.pgdg24.04+1)
-- Dumped by pg_dump version 15.7 (Ubuntu 15.7-1.pgdg24.04+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

DROP PUBLICATION IF EXISTS parcels_production_publication;
ALTER TABLE IF EXISTS ONLY parcels_production.parcels_seismic_hazards_model DROP CONSTRAINT IF EXISTS parcels_seismic_hazards_model_ll_uuid_fkey;
DROP TRIGGER IF EXISTS update_parcels_zoning_description ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_zoning_change_date ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_zoning ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_yearbuilt ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_width ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_years ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_updated ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_min_perfect_days ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_min_indoor_days ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_min_hrs_below_5c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_min_hrs_below_10c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_min_hrs_below_0c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_min_fair_days ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_min_dinner_outside_days ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_min_daytime_hrs_below_5c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_min_daytime_hrs_below_10c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_min_daytime_hrs_below_0c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_min_daytime_hours ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_min_cloudy_hours_90pct ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_min_cloudy_hours_50pct ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_min_cloudy_hours_10pct ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_min_active_days ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_median_perfect_days ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_median_indoor_days ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_median_hrs_below_5c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_median_hrs_below_10c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_median_hrs_below_0c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_median_fair_days ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_median_dinner_outside_days ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_median_daytime_hrs_below_5c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_median_daytime_hrs_below_10c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_median_daytime_hrs_below_0c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_median_daytime_hours ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_median_cloudy_hours_90pct ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_median_cloudy_hours_50pct ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_median_cloudy_hours_10pct ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_median_active_days ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_max_perfect_days ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_max_indoor_days ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_max_hrs_below_5c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_max_hrs_below_10c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_max_hrs_below_0c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_max_fair_days ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_max_dinner_outside_days ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_max_daytime_hrs_below_5c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_max_daytime_hrs_below_10c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_max_daytime_hrs_below_0c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_max_daytime_hours ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_max_cloudy_hours_90pct ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_max_cloudy_hours_50pct ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_max_cloudy_hours_10pct ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_max_active_days ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_ll_uuid ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_avg_perfect_days ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_avg_indoor_days ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_avg_hrs_below_5c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_avg_hrs_below_10c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_avg_hrs_below_0c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_avg_fair_days ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_avg_dinner_outside_days ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_avg_daytime_hrs_below_5c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_avg_daytime_hrs_below_10c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_avg_daytime_hrs_below_0c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_avg_daytime_hours ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_avg_cloudy_hours_90pct ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_avg_cloudy_hours_50pct ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_avg_cloudy_hours_10pct ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_weather_summary_avg_active_days ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS update_parcels_viewshed_viewshed_w ON parcels_production.parcels_viewshed;
DROP TRIGGER IF EXISTS update_parcels_viewshed_viewshed_sw ON parcels_production.parcels_viewshed;
DROP TRIGGER IF EXISTS update_parcels_viewshed_viewshed_se ON parcels_production.parcels_viewshed;
DROP TRIGGER IF EXISTS update_parcels_viewshed_viewshed_s ON parcels_production.parcels_viewshed;
DROP TRIGGER IF EXISTS update_parcels_viewshed_viewshed_percentage ON parcels_production.parcels_viewshed;
DROP TRIGGER IF EXISTS update_parcels_viewshed_viewshed_nw ON parcels_production.parcels_viewshed;
DROP TRIGGER IF EXISTS update_parcels_viewshed_viewshed_ne ON parcels_production.parcels_viewshed;
DROP TRIGGER IF EXISTS update_parcels_viewshed_viewshed_n ON parcels_production.parcels_viewshed;
DROP TRIGGER IF EXISTS update_parcels_viewshed_viewshed_index_under_2km ON parcels_production.parcels_viewshed;
DROP TRIGGER IF EXISTS update_parcels_viewshed_viewshed_index_75km ON parcels_production.parcels_viewshed;
DROP TRIGGER IF EXISTS update_parcels_viewshed_viewshed_index_5km ON parcels_production.parcels_viewshed;
DROP TRIGGER IF EXISTS update_parcels_viewshed_viewshed_index_50km ON parcels_production.parcels_viewshed;
DROP TRIGGER IF EXISTS update_parcels_viewshed_viewshed_index_2km ON parcels_production.parcels_viewshed;
DROP TRIGGER IF EXISTS update_parcels_viewshed_viewshed_index_20km ON parcels_production.parcels_viewshed;
DROP TRIGGER IF EXISTS update_parcels_viewshed_viewshed_index_10km ON parcels_production.parcels_viewshed;
DROP TRIGGER IF EXISTS update_parcels_viewshed_viewshed_index ON parcels_production.parcels_viewshed;
DROP TRIGGER IF EXISTS update_parcels_viewshed_viewshed_e ON parcels_production.parcels_viewshed;
DROP TRIGGER IF EXISTS update_parcels_viewshed_longitude ON parcels_production.parcels_viewshed;
DROP TRIGGER IF EXISTS update_parcels_viewshed_ll_uuid ON parcels_production.parcels_viewshed;
DROP TRIGGER IF EXISTS update_parcels_viewshed_latitude ON parcels_production.parcels_viewshed;
DROP TRIGGER IF EXISTS update_parcels_usps_vacancy_date ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_usps_vacancy ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_usedesc ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_usecode ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_urbanization ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_transno1 ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_trailer ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_towncode ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_taxyear ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_taxamt ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_szip ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_sunit ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_subsurfown ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_subowntype ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_subdivision_code ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_subdivision ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_strustyl ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_strugrad ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_structstyle ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_structno ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_struct ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_strucnst ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_strubldg ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_state2 ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_sqft ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_special ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_sourceurl ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_sourceref ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_sourcedate ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_sourceagent ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_section ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_sdatwebadr ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_scity ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_saleprice ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_saledate ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_saddsttyp ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_saddstsuf ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_saddstr ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_saddpref ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_saddno ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_rzrealdat ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_road_road_km ON parcels_production.parcels_road;
DROP TRIGGER IF EXISTS update_parcels_road_paved_km ON parcels_production.parcels_road;
DROP TRIGGER IF EXISTS update_parcels_road_ll_uuid ON parcels_production.parcels_road;
DROP TRIGGER IF EXISTS update_parcels_road_highway_km ON parcels_production.parcels_road;
DROP TRIGGER IF EXISTS update_parcels_road_high_traffic_km ON parcels_production.parcels_road;
DROP TRIGGER IF EXISTS update_parcels_reviseddate ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_revisedate ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_resiuths ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_resityp ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_resident ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_resi2010 ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_resi2000 ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_resi1990 ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_recrdareatx ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_recrdareano ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_recind ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_rdi ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_rank_surrounding_coverage_density_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_spring_count_5km_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_spring_count_50km_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_spring_count_1km_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_spring_count_10km_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_spring_count_100km_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_perfect_days_in_2022_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_perfect_days_in_2021_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_perfect_days_in_2020_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_perfect_days_in_2019_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_perfect_days_in_2018_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_perfect_days_in_2017_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_perfect_days_in_2016_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_perfect_days_in_2015_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_nearby_max_upload_speed_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_nearby_max_download_speed_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_military_count_50km_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_military_count_25km_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_military_count_200km_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_max_upload_speed_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_max_download_speed_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_ll_uuid ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_indoor_days_in_2022_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_indoor_days_in_2021_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_indoor_days_in_2020_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_indoor_days_in_2019_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_indoor_days_in_2018_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_indoor_days_in_2017_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_indoor_days_in_2016_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_indoor_days_in_2015_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2022_ ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2021_ ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2020_ ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2019_ ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2018_ ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2017_ ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2016_ ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2015_ ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2022 ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2021 ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2020 ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2019 ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2018 ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2017 ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2016 ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2015 ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2022_ ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2021_ ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2020_ ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2019_ ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2018_ ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2017_ ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2016_ ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2015_ ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_hardiness_temp_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_fair_days_in_2022_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_fair_days_in_2021_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_fair_days_in_2020_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_fair_days_in_2019_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_fair_days_in_2018_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_fair_days_in_2017_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_fair_days_in_2016_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_fair_days_in_2015_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_dinner_outside_days_in_2022_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_dinner_outside_days_in_2021_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_dinner_outside_days_in_2020_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_dinner_outside_days_in_2019_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_dinner_outside_days_in_2018_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_dinner_outside_days_in_2017_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_dinner_outside_days_in_2016_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_dinner_outside_days_in_2015_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_daytime_hrs_below_5_c_apparent_temperature_ ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_daytime_hrs_below_10_c_apparent_temperature ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_daytime_hrs_below_0_c_apparent_temperature_ ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_daytime_hours_in_2022_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_daytime_hours_in_2021_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_daytime_hours_in_2020_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_daytime_hours_in_2019_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_daytime_hours_in_2018_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_daytime_hours_in_2017_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_daytime_hours_in_2016_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_daytime_hours_in_2015_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_daytime_hours_above_90_pct_cloud_cover_in_2 ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_daytime_hours_above_80_pct_cloud_cover_in_2 ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_daytime_hours_above_70_pct_cloud_cover_in_2 ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_daytime_hours_above_60_pct_cloud_cover_in_2 ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_daytime_hours_above_50_pct_cloud_cover_in_2 ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_daytime_hours_above_40_pct_cloud_cover_in_2 ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_daytime_hours_above_30_pct_cloud_cover_in_2 ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_daytime_hours_above_20_pct_cloud_cover_in_2 ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_daytime_hours_above_10_pct_cloud_cover_in_2 ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_closest_spring_distance_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_closest_provider_distance_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_closest_military_distance_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_avg_perfect_days_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_avg_indoor_days_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_avg_hrs_below_5c_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_avg_hrs_below_10c_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_avg_hrs_below_0c_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_avg_fair_days_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_avg_dinner_outside_days_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_avg_daytime_hrs_below_5c_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_avg_daytime_hrs_below_10c_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_avg_daytime_hrs_below_0c_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_avg_cloudy_hours_90pct_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_avg_cloudy_hours_50pct_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_avg_cloudy_hours_10pct_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_avg_active_days_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_active_days_in_2022_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_active_days_in_2021_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_active_days_in_2020_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_active_days_in_2019_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_active_days_in_2018_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_active_days_in_2017_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_active_days_in_2016_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_rank_active_days_in_2015_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS update_parcels_qoz_tract ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_qoz ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_ptype ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_polyid ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_plndevdat ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_plat ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_pfuw ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_pfus ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_pfsu ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_pfsp ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_pflw ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_pfih ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_pfic ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_permittyp ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_path ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_parvaltype ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_parval ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_parcelnumb ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_page ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_padus_public_access ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_owntype ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_ownlast ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_ownfrst ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_owner_index ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_owner4 ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_owner3 ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_owner2 ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_owner ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_other ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_original_address ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_ooi ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_ogc_fid ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_numunits ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_numstories ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_nprctstdat ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_nprcluom ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_nprcarea ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_neighborhood ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_nature_nature_updated ON parcels_production.parcels_nature;
DROP TRIGGER IF EXISTS update_parcels_nature_nature_score ON parcels_production.parcels_nature;
DROP TRIGGER IF EXISTS update_parcels_nature_ll_uuid ON parcels_production.parcels_nature;
DROP TRIGGER IF EXISTS update_parcels_nature_leaf_rating ON parcels_production.parcels_nature;
DROP TRIGGER IF EXISTS update_parcels_namekey ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_multistruct ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_mortgag1 ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_meta_tribal ON parcels_production.parcels_meta;
DROP TRIGGER IF EXISTS update_parcels_meta_public ON parcels_production.parcels_meta;
DROP TRIGGER IF EXISTS update_parcels_meta_ll_uuid ON parcels_production.parcels_meta;
DROP TRIGGER IF EXISTS update_parcels_map ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_mailadd ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_mail_zip ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_mail_urbanization ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_mail_unit ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_mail_state2 ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_mail_country ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_mail_city ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_mail_addsttyp ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_mail_addstsuf ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_mail_addstr ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_mail_address2 ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_mail_addpref ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_mail_addno ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_luom ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_lot ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_lon ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_location_name ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_ll_uuid ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_ll_updated_at ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_ll_stable_id ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_ll_gissqft ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_ll_gisacre ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_ll_bldg_footprint_sqft ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_ll_bldg_count ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_legaldesc ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_lbcs_structure_desc ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_lbcs_structure ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_lbcs_site_desc ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_lbcs_site ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_lbcs_ownership_desc ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_lbcs_ownership ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_lbcs_function_desc ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_lbcs_function ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_lbcs_activity_desc ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_lbcs_activity ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_lat ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_lastinsp ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_lastassd ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_landval ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_jurscode ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_internet_surrounding_providers ON parcels_production.parcels_internet;
DROP TRIGGER IF EXISTS update_parcels_internet_surrounding_coverage_density ON parcels_production.parcels_internet;
DROP TRIGGER IF EXISTS update_parcels_internet_nearby_max_upload_speed ON parcels_production.parcels_internet;
DROP TRIGGER IF EXISTS update_parcels_internet_nearby_max_download_speed ON parcels_production.parcels_internet;
DROP TRIGGER IF EXISTS update_parcels_internet_max_upload_speed ON parcels_production.parcels_internet;
DROP TRIGGER IF EXISTS update_parcels_internet_max_download_speed ON parcels_production.parcels_internet;
DROP TRIGGER IF EXISTS update_parcels_internet_low_latency ON parcels_production.parcels_internet;
DROP TRIGGER IF EXISTS update_parcels_internet_ll_uuid ON parcels_production.parcels_internet;
DROP TRIGGER IF EXISTS update_parcels_internet_closest_provider_h3_res8_id ON parcels_production.parcels_internet;
DROP TRIGGER IF EXISTS update_parcels_internet_closest_provider_distance ON parcels_production.parcels_internet;
DROP TRIGGER IF EXISTS update_parcels_internet_broadband_updated ON parcels_production.parcels_internet;
DROP TRIGGER IF EXISTS update_parcels_improvval ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_homqldat ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_homqlcod ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_homestead_exemption ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_grntnam1 ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_grid ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_gr1libr1 ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_gr1folo1 ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_gr1clrk1v ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_goz_tract ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_goz ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_gisacre ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_geometry_ll_uuid ON parcels_production.parcels_geometry;
DROP TRIGGER IF EXISTS update_parcels_geometry_coordinates ON parcels_production.parcels_geometry;
DROP TRIGGER IF EXISTS update_parcels_geoid ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_geogcode ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_fcmacode ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_exclass ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_entzndat ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_entznassm ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_elevation_p90 ON parcels_production.parcels_elevation;
DROP TRIGGER IF EXISTS update_parcels_elevation_p75 ON parcels_production.parcels_elevation;
DROP TRIGGER IF EXISTS update_parcels_elevation_p50 ON parcels_production.parcels_elevation;
DROP TRIGGER IF EXISTS update_parcels_elevation_p25 ON parcels_production.parcels_elevation;
DROP TRIGGER IF EXISTS update_parcels_elevation_p10 ON parcels_production.parcels_elevation;
DROP TRIGGER IF EXISTS update_parcels_elevation_min ON parcels_production.parcels_elevation;
DROP TRIGGER IF EXISTS update_parcels_elevation_median ON parcels_production.parcels_elevation;
DROP TRIGGER IF EXISTS update_parcels_elevation_max ON parcels_production.parcels_elevation;
DROP TRIGGER IF EXISTS update_parcels_elevation_ll_uuid ON parcels_production.parcels_elevation;
DROP TRIGGER IF EXISTS update_parcels_dr1liber ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_dr1folio ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_dr1clerk ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_dpv_type ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_dpv_status ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_dpv_notes ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_dpv_codes ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_detailed_subdivision_code ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_desctown ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_descgrad ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_descexcl ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_desccnst ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_descciuse ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_descbldg ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_depth ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_density_water_updated ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_water_density_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_water_density_50km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_water_density_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_water_density_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_water_density_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_water_count_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_water_count_50km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_water_count_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_water_count_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_water_count_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_water_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_water_50km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_water_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_water_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_water_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_spring_updated ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_spring_count_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_spring_count_50km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_spring_count_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_spring_count_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_spring_count_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_spring_count_100km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_spring_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_spring_50km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_spring_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_spring_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_spring_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_spring_100km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_religious_updated ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_religion_density_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_religion_density_50km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_religion_density_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_religion_density_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_religion_density_150km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_religion_density_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_religion_density_100km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_religion_count_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_religion_count_50km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_religion_count_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_religion_count_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_religion_count_150km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_religion_count_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_religion_count_100km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_religion_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_religion_50km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_religion_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_religion_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_religion_150km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_religion_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_religion_100km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_public_land_updated ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_public_land_density_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_public_land_density_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_public_land_density_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_public_land_density_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_public_land_count_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_public_land_count_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_public_land_count_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_public_land_count_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_public_land_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_public_land_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_public_land_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_public_land_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_pollution_updated ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_pollution_density_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_pollution_density_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_pollution_density_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_pollution_density_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_pollution_count_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_pollution_count_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_pollution_count_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_pollution_count_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_pollution_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_pollution_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_pollution_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_pollution_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_parcels_updated ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_parcels_density_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_parcels_density_50km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_parcels_density_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_parcels_density_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_parcels_density_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_parcels_count_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_parcels_count_50km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_parcels_count_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_parcels_count_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_parcels_count_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_natural_updated ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_natural_density_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_natural_density_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_natural_density_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_natural_density_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_natural_count_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_natural_count_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_natural_count_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_natural_count_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_natural_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_natural_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_natural_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_natural_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_military_updated ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_military_count_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_military_count_50km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_military_count_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_military_count_200km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_military_count_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_military_count_150km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_military_count_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_military_count_100km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_military_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_military_50km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_military_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_military_200km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_military_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_military_150km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_military_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_military_100km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_ll_uuid ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_library_updated ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_library_count_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_library_count_50km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_library_count_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_library_count_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_library_count_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_library_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_library_50km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_library_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_library_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_library_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_healthcare_updated ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_healthcare_count_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_healthcare_count_50km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_healthcare_count_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_healthcare_count_200km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_healthcare_count_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_healthcare_count_150km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_healthcare_count_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_healthcare_count_100km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_healthcare_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_healthcare_50km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_healthcare_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_healthcare_200km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_healthcare_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_healthcare_150km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_healthcare_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_healthcare_100km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_geological_features_updated ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_geological_features_count_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_geological_features_count_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_geological_features_count_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_geological_features_count_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_geological_features_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_geological_features_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_geological_features_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_geological_features_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_closest_water_tags ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_closest_water_name ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_closest_water_items ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_closest_water_distance ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_closest_spring_tags ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_closest_spring_name ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_closest_spring_items ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_closest_spring_distance ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_closest_religious_tags ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_closest_religious_name ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_closest_religious_items ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_closest_religious_distance ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_closest_public_land_tags ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_closest_public_land_name ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_closest_public_land_items ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_closest_public_land_distance ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_closest_pollution_tags ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_closest_pollution_name ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_closest_pollution_items ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_closest_pollution_distance ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_closest_natural_tags ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_closest_natural_name ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_closest_natural_items ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_closest_natural_distance ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_closest_military_tags ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_closest_military_name ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_closest_military_items ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_closest_military_distance ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_closest_library_tags ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_closest_library_name ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_closest_library_items ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_closest_library_distance ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_closest_healthcare_tags ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_closest_healthcare_name ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_closest_healthcare_items ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_closest_healthcare_distance ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_closest_geological_features_tags ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_closest_geological_features_name ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_closest_geological_features_items ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_density_closest_geological_features_distance ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS update_parcels_crtarcod ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_county ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_convey1 ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_coastline_ll_uuid ON parcels_production.parcels_coastline;
DROP TRIGGER IF EXISTS update_parcels_coastline_distance_km ON parcels_production.parcels_coastline;
DROP TRIGGER IF EXISTS update_parcels_ciuse ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_city ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_census_tract ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_census_blockgroup ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_census_block ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_cdl_raw ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_cdl_majority_percent ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_cdl_majority_category ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_cdl_date ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_cass_errorno ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_careof ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_book ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_block ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_assessor ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_aprtment ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_airport_ll_uuid ON parcels_production.parcels_airport;
DROP TRIGGER IF EXISTS update_parcels_airport_distance_km ON parcels_production.parcels_airport;
DROP TRIGGER IF EXISTS update_parcels_airport_abbrev ON parcels_production.parcels_airport;
DROP TRIGGER IF EXISTS update_parcels_agval ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_agriculture_plant_hardiness_updated ON parcels_production.parcels_agriculture;
DROP TRIGGER IF EXISTS update_parcels_agriculture_ll_uuid ON parcels_production.parcels_agriculture;
DROP TRIGGER IF EXISTS update_parcels_agriculture_hardiness_zone ON parcels_production.parcels_agriculture;
DROP TRIGGER IF EXISTS update_parcels_agriculture_hardiness_temp ON parcels_production.parcels_agriculture;
DROP TRIGGER IF EXISTS update_parcels_agfndluom ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_agfndarea ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_addrtyp ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_address_source ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_address2 ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_address ON parcels_production.parcels;
DROP TRIGGER IF EXISTS update_parcels_acctid_county_stripped ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_zoning_description ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_zoning_change_date ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_zoning ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_yearbuilt ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_width ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_years ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_updated ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_min_perfect_days ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_min_indoor_days ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_min_hrs_below_5c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_min_hrs_below_10c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_min_hrs_below_0c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_min_fair_days ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_min_dinner_outside_days ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_min_daytime_hrs_below_5c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_min_daytime_hrs_below_10c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_min_daytime_hrs_below_0c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_min_daytime_hours ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_min_cloudy_hours_90pct ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_min_cloudy_hours_50pct ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_min_cloudy_hours_10pct ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_min_active_days ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_median_perfect_days ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_median_indoor_days ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_median_hrs_below_5c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_median_hrs_below_10c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_median_hrs_below_0c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_median_fair_days ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_median_dinner_outside_days ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_median_daytime_hrs_below_5c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_median_daytime_hrs_below_10c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_median_daytime_hrs_below_0c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_median_daytime_hours ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_median_cloudy_hours_90pct ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_median_cloudy_hours_50pct ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_median_cloudy_hours_10pct ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_median_active_days ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_max_perfect_days ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_max_indoor_days ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_max_hrs_below_5c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_max_hrs_below_10c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_max_hrs_below_0c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_max_fair_days ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_max_dinner_outside_days ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_max_daytime_hrs_below_5c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_max_daytime_hrs_below_10c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_max_daytime_hrs_below_0c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_max_daytime_hours ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_max_cloudy_hours_90pct ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_max_cloudy_hours_50pct ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_max_cloudy_hours_10pct ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_max_active_days ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_ll_uuid ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_avg_perfect_days ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_avg_indoor_days ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_avg_hrs_below_5c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_avg_hrs_below_10c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_avg_hrs_below_0c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_avg_fair_days ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_avg_dinner_outside_days ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_avg_daytime_hrs_below_5c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_avg_daytime_hrs_below_10c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_avg_daytime_hrs_below_0c ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_avg_daytime_hours ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_avg_cloudy_hours_90pct ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_avg_cloudy_hours_50pct ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_avg_cloudy_hours_10pct ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_weather_summary_avg_active_days ON parcels_production.parcels_weather_summary;
DROP TRIGGER IF EXISTS insert_parcels_viewshed_viewshed_w ON parcels_production.parcels_viewshed;
DROP TRIGGER IF EXISTS insert_parcels_viewshed_viewshed_sw ON parcels_production.parcels_viewshed;
DROP TRIGGER IF EXISTS insert_parcels_viewshed_viewshed_se ON parcels_production.parcels_viewshed;
DROP TRIGGER IF EXISTS insert_parcels_viewshed_viewshed_s ON parcels_production.parcels_viewshed;
DROP TRIGGER IF EXISTS insert_parcels_viewshed_viewshed_percentage ON parcels_production.parcels_viewshed;
DROP TRIGGER IF EXISTS insert_parcels_viewshed_viewshed_nw ON parcels_production.parcels_viewshed;
DROP TRIGGER IF EXISTS insert_parcels_viewshed_viewshed_ne ON parcels_production.parcels_viewshed;
DROP TRIGGER IF EXISTS insert_parcels_viewshed_viewshed_n ON parcels_production.parcels_viewshed;
DROP TRIGGER IF EXISTS insert_parcels_viewshed_viewshed_index_under_2km ON parcels_production.parcels_viewshed;
DROP TRIGGER IF EXISTS insert_parcels_viewshed_viewshed_index_75km ON parcels_production.parcels_viewshed;
DROP TRIGGER IF EXISTS insert_parcels_viewshed_viewshed_index_5km ON parcels_production.parcels_viewshed;
DROP TRIGGER IF EXISTS insert_parcels_viewshed_viewshed_index_50km ON parcels_production.parcels_viewshed;
DROP TRIGGER IF EXISTS insert_parcels_viewshed_viewshed_index_2km ON parcels_production.parcels_viewshed;
DROP TRIGGER IF EXISTS insert_parcels_viewshed_viewshed_index_20km ON parcels_production.parcels_viewshed;
DROP TRIGGER IF EXISTS insert_parcels_viewshed_viewshed_index_10km ON parcels_production.parcels_viewshed;
DROP TRIGGER IF EXISTS insert_parcels_viewshed_viewshed_index ON parcels_production.parcels_viewshed;
DROP TRIGGER IF EXISTS insert_parcels_viewshed_viewshed_e ON parcels_production.parcels_viewshed;
DROP TRIGGER IF EXISTS insert_parcels_viewshed_longitude ON parcels_production.parcels_viewshed;
DROP TRIGGER IF EXISTS insert_parcels_viewshed_ll_uuid ON parcels_production.parcels_viewshed;
DROP TRIGGER IF EXISTS insert_parcels_viewshed_latitude ON parcels_production.parcels_viewshed;
DROP TRIGGER IF EXISTS insert_parcels_usps_vacancy_date ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_usps_vacancy ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_usedesc ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_usecode ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_urbanization ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_transno1 ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_trailer ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_towncode ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_taxyear ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_taxamt ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_szip ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_sunit ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_subsurfown ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_subowntype ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_subdivision_code ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_subdivision ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_strustyl ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_strugrad ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_structstyle ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_structno ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_struct ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_strucnst ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_strubldg ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_state2 ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_sqft ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_special ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_sourceurl ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_sourceref ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_sourcedate ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_sourceagent ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_section ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_sdatwebadr ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_scity ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_saleprice ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_saledate ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_saddsttyp ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_saddstsuf ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_saddstr ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_saddpref ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_saddno ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_rzrealdat ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_road_road_km ON parcels_production.parcels_road;
DROP TRIGGER IF EXISTS insert_parcels_road_paved_km ON parcels_production.parcels_road;
DROP TRIGGER IF EXISTS insert_parcels_road_ll_uuid ON parcels_production.parcels_road;
DROP TRIGGER IF EXISTS insert_parcels_road_highway_km ON parcels_production.parcels_road;
DROP TRIGGER IF EXISTS insert_parcels_road_high_traffic_km ON parcels_production.parcels_road;
DROP TRIGGER IF EXISTS insert_parcels_reviseddate ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_revisedate ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_resiuths ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_resityp ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_resident ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_resi2010 ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_resi2000 ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_resi1990 ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_recrdareatx ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_recrdareano ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_recind ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_rdi ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_rank_surrounding_coverage_density_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_spring_count_5km_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_spring_count_50km_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_spring_count_1km_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_spring_count_10km_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_spring_count_100km_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_perfect_days_in_2022_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_perfect_days_in_2021_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_perfect_days_in_2020_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_perfect_days_in_2019_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_perfect_days_in_2018_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_perfect_days_in_2017_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_perfect_days_in_2016_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_perfect_days_in_2015_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_nearby_max_upload_speed_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_nearby_max_download_speed_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_military_count_50km_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_military_count_25km_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_military_count_200km_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_max_upload_speed_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_max_download_speed_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_ll_uuid ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_indoor_days_in_2022_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_indoor_days_in_2021_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_indoor_days_in_2020_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_indoor_days_in_2019_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_indoor_days_in_2018_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_indoor_days_in_2017_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_indoor_days_in_2016_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_indoor_days_in_2015_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2022_ ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2021_ ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2020_ ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2019_ ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2018_ ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2017_ ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2016_ ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2015_ ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2022 ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2021 ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2020 ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2019 ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2018 ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2017 ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2016 ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2015 ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2022_ ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2021_ ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2020_ ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2019_ ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2018_ ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2017_ ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2016_ ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2015_ ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_hardiness_temp_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_fair_days_in_2022_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_fair_days_in_2021_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_fair_days_in_2020_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_fair_days_in_2019_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_fair_days_in_2018_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_fair_days_in_2017_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_fair_days_in_2016_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_fair_days_in_2015_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_dinner_outside_days_in_2022_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_dinner_outside_days_in_2021_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_dinner_outside_days_in_2020_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_dinner_outside_days_in_2019_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_dinner_outside_days_in_2018_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_dinner_outside_days_in_2017_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_dinner_outside_days_in_2016_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_dinner_outside_days_in_2015_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_daytime_hrs_below_5_c_apparent_temperature_ ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_daytime_hrs_below_10_c_apparent_temperature ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_daytime_hrs_below_0_c_apparent_temperature_ ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_daytime_hours_in_2022_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_daytime_hours_in_2021_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_daytime_hours_in_2020_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_daytime_hours_in_2019_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_daytime_hours_in_2018_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_daytime_hours_in_2017_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_daytime_hours_in_2016_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_daytime_hours_in_2015_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_daytime_hours_above_90_pct_cloud_cover_in_2 ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_daytime_hours_above_80_pct_cloud_cover_in_2 ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_daytime_hours_above_70_pct_cloud_cover_in_2 ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_daytime_hours_above_60_pct_cloud_cover_in_2 ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_daytime_hours_above_50_pct_cloud_cover_in_2 ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_daytime_hours_above_40_pct_cloud_cover_in_2 ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_daytime_hours_above_30_pct_cloud_cover_in_2 ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_daytime_hours_above_20_pct_cloud_cover_in_2 ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_daytime_hours_above_10_pct_cloud_cover_in_2 ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_closest_spring_distance_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_closest_provider_distance_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_closest_military_distance_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_avg_perfect_days_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_avg_indoor_days_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_avg_hrs_below_5c_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_avg_hrs_below_10c_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_avg_hrs_below_0c_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_avg_fair_days_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_avg_dinner_outside_days_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_avg_daytime_hrs_below_5c_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_avg_daytime_hrs_below_10c_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_avg_daytime_hrs_below_0c_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_avg_cloudy_hours_90pct_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_avg_cloudy_hours_50pct_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_avg_cloudy_hours_10pct_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_avg_active_days_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_active_days_in_2022_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_active_days_in_2021_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_active_days_in_2020_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_active_days_in_2019_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_active_days_in_2018_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_active_days_in_2017_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_active_days_in_2016_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_rank_active_days_in_2015_rank ON parcels_production.parcels_rank;
DROP TRIGGER IF EXISTS insert_parcels_qoz_tract ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_qoz ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_ptype ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_polyid ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_plndevdat ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_plat ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_pfuw ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_pfus ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_pfsu ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_pfsp ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_pflw ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_pfih ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_pfic ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_permittyp ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_path ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_parvaltype ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_parval ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_parcelnumb ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_page ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_padus_public_access ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_owntype ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_ownlast ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_ownfrst ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_owner_index ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_owner4 ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_owner3 ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_owner2 ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_owner ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_other ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_original_address ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_ooi ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_ogc_fid ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_numunits ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_numstories ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_nprctstdat ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_nprcluom ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_nprcarea ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_neighborhood ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_nature_nature_updated ON parcels_production.parcels_nature;
DROP TRIGGER IF EXISTS insert_parcels_nature_nature_score ON parcels_production.parcels_nature;
DROP TRIGGER IF EXISTS insert_parcels_nature_ll_uuid ON parcels_production.parcels_nature;
DROP TRIGGER IF EXISTS insert_parcels_nature_leaf_rating ON parcels_production.parcels_nature;
DROP TRIGGER IF EXISTS insert_parcels_namekey ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_multistruct ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_mortgag1 ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_meta_tribal ON parcels_production.parcels_meta;
DROP TRIGGER IF EXISTS insert_parcels_meta_public ON parcels_production.parcels_meta;
DROP TRIGGER IF EXISTS insert_parcels_meta_ll_uuid ON parcels_production.parcels_meta;
DROP TRIGGER IF EXISTS insert_parcels_map ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_mailadd ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_mail_zip ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_mail_urbanization ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_mail_unit ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_mail_state2 ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_mail_country ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_mail_city ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_mail_addsttyp ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_mail_addstsuf ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_mail_addstr ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_mail_address2 ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_mail_addpref ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_mail_addno ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_luom ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_lot ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_lon ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_location_name ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_ll_uuid ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_ll_updated_at ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_ll_stable_id ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_ll_gissqft ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_ll_gisacre ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_ll_bldg_footprint_sqft ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_ll_bldg_count ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_legaldesc ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_lbcs_structure_desc ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_lbcs_structure ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_lbcs_site_desc ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_lbcs_site ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_lbcs_ownership_desc ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_lbcs_ownership ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_lbcs_function_desc ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_lbcs_function ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_lbcs_activity_desc ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_lbcs_activity ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_lat ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_lastinsp ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_lastassd ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_landval ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_jurscode ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_internet_surrounding_providers ON parcels_production.parcels_internet;
DROP TRIGGER IF EXISTS insert_parcels_internet_surrounding_coverage_density ON parcels_production.parcels_internet;
DROP TRIGGER IF EXISTS insert_parcels_internet_nearby_max_upload_speed ON parcels_production.parcels_internet;
DROP TRIGGER IF EXISTS insert_parcels_internet_nearby_max_download_speed ON parcels_production.parcels_internet;
DROP TRIGGER IF EXISTS insert_parcels_internet_max_upload_speed ON parcels_production.parcels_internet;
DROP TRIGGER IF EXISTS insert_parcels_internet_max_download_speed ON parcels_production.parcels_internet;
DROP TRIGGER IF EXISTS insert_parcels_internet_low_latency ON parcels_production.parcels_internet;
DROP TRIGGER IF EXISTS insert_parcels_internet_ll_uuid ON parcels_production.parcels_internet;
DROP TRIGGER IF EXISTS insert_parcels_internet_closest_provider_h3_res8_id ON parcels_production.parcels_internet;
DROP TRIGGER IF EXISTS insert_parcels_internet_closest_provider_distance ON parcels_production.parcels_internet;
DROP TRIGGER IF EXISTS insert_parcels_internet_broadband_updated ON parcels_production.parcels_internet;
DROP TRIGGER IF EXISTS insert_parcels_improvval ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_homqldat ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_homqlcod ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_homestead_exemption ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_grntnam1 ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_grid ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_gr1libr1 ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_gr1folo1 ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_gr1clrk1v ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_goz_tract ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_goz ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_gisacre ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_geometry_ll_uuid ON parcels_production.parcels_geometry;
DROP TRIGGER IF EXISTS insert_parcels_geometry_coordinates ON parcels_production.parcels_geometry;
DROP TRIGGER IF EXISTS insert_parcels_geoid ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_geogcode ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_fcmacode ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_exclass ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_entzndat ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_entznassm ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_elevation_p90 ON parcels_production.parcels_elevation;
DROP TRIGGER IF EXISTS insert_parcels_elevation_p75 ON parcels_production.parcels_elevation;
DROP TRIGGER IF EXISTS insert_parcels_elevation_p50 ON parcels_production.parcels_elevation;
DROP TRIGGER IF EXISTS insert_parcels_elevation_p25 ON parcels_production.parcels_elevation;
DROP TRIGGER IF EXISTS insert_parcels_elevation_p10 ON parcels_production.parcels_elevation;
DROP TRIGGER IF EXISTS insert_parcels_elevation_min ON parcels_production.parcels_elevation;
DROP TRIGGER IF EXISTS insert_parcels_elevation_median ON parcels_production.parcels_elevation;
DROP TRIGGER IF EXISTS insert_parcels_elevation_max ON parcels_production.parcels_elevation;
DROP TRIGGER IF EXISTS insert_parcels_elevation_ll_uuid ON parcels_production.parcels_elevation;
DROP TRIGGER IF EXISTS insert_parcels_dr1liber ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_dr1folio ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_dr1clerk ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_dpv_type ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_dpv_status ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_dpv_notes ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_dpv_codes ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_detailed_subdivision_code ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_desctown ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_descgrad ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_descexcl ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_desccnst ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_descciuse ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_descbldg ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_depth ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_density_water_updated ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_water_density_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_water_density_50km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_water_density_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_water_density_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_water_density_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_water_count_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_water_count_50km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_water_count_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_water_count_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_water_count_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_water_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_water_50km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_water_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_water_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_water_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_spring_updated ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_spring_count_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_spring_count_50km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_spring_count_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_spring_count_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_spring_count_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_spring_count_100km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_spring_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_spring_50km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_spring_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_spring_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_spring_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_spring_100km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_religious_updated ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_religion_density_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_religion_density_50km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_religion_density_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_religion_density_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_religion_density_150km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_religion_density_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_religion_density_100km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_religion_count_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_religion_count_50km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_religion_count_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_religion_count_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_religion_count_150km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_religion_count_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_religion_count_100km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_religion_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_religion_50km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_religion_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_religion_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_religion_150km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_religion_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_religion_100km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_public_land_updated ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_public_land_density_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_public_land_density_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_public_land_density_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_public_land_density_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_public_land_count_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_public_land_count_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_public_land_count_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_public_land_count_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_public_land_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_public_land_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_public_land_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_public_land_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_pollution_updated ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_pollution_density_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_pollution_density_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_pollution_density_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_pollution_density_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_pollution_count_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_pollution_count_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_pollution_count_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_pollution_count_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_pollution_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_pollution_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_pollution_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_pollution_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_parcels_updated ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_parcels_density_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_parcels_density_50km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_parcels_density_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_parcels_density_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_parcels_density_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_parcels_count_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_parcels_count_50km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_parcels_count_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_parcels_count_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_parcels_count_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_natural_updated ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_natural_density_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_natural_density_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_natural_density_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_natural_density_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_natural_count_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_natural_count_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_natural_count_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_natural_count_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_natural_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_natural_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_natural_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_natural_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_military_updated ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_military_count_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_military_count_50km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_military_count_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_military_count_200km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_military_count_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_military_count_150km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_military_count_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_military_count_100km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_military_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_military_50km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_military_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_military_200km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_military_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_military_150km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_military_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_military_100km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_ll_uuid ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_library_updated ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_library_count_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_library_count_50km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_library_count_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_library_count_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_library_count_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_library_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_library_50km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_library_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_library_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_library_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_healthcare_updated ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_healthcare_count_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_healthcare_count_50km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_healthcare_count_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_healthcare_count_200km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_healthcare_count_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_healthcare_count_150km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_healthcare_count_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_healthcare_count_100km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_healthcare_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_healthcare_50km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_healthcare_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_healthcare_200km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_healthcare_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_healthcare_150km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_healthcare_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_healthcare_100km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_geological_features_updated ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_geological_features_count_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_geological_features_count_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_geological_features_count_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_geological_features_count_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_geological_features_5km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_geological_features_25km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_geological_features_1km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_geological_features_10km ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_closest_water_tags ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_closest_water_name ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_closest_water_items ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_closest_water_distance ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_closest_spring_tags ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_closest_spring_name ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_closest_spring_items ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_closest_spring_distance ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_closest_religious_tags ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_closest_religious_name ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_closest_religious_items ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_closest_religious_distance ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_closest_public_land_tags ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_closest_public_land_name ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_closest_public_land_items ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_closest_public_land_distance ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_closest_pollution_tags ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_closest_pollution_name ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_closest_pollution_items ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_closest_pollution_distance ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_closest_natural_tags ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_closest_natural_name ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_closest_natural_items ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_closest_natural_distance ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_closest_military_tags ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_closest_military_name ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_closest_military_items ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_closest_military_distance ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_closest_library_tags ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_closest_library_name ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_closest_library_items ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_closest_library_distance ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_closest_healthcare_tags ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_closest_healthcare_name ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_closest_healthcare_items ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_closest_healthcare_distance ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_closest_geological_features_tags ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_closest_geological_features_name ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_closest_geological_features_items ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_density_closest_geological_features_distance ON parcels_production.parcels_density;
DROP TRIGGER IF EXISTS insert_parcels_crtarcod ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_county ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_convey1 ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_coastline_ll_uuid ON parcels_production.parcels_coastline;
DROP TRIGGER IF EXISTS insert_parcels_coastline_distance_km ON parcels_production.parcels_coastline;
DROP TRIGGER IF EXISTS insert_parcels_ciuse ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_city ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_census_tract ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_census_blockgroup ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_census_block ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_cdl_raw ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_cdl_majority_percent ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_cdl_majority_category ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_cdl_date ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_cass_errorno ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_careof ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_book ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_block ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_assessor ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_aprtment ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_airport_ll_uuid ON parcels_production.parcels_airport;
DROP TRIGGER IF EXISTS insert_parcels_airport_distance_km ON parcels_production.parcels_airport;
DROP TRIGGER IF EXISTS insert_parcels_airport_abbrev ON parcels_production.parcels_airport;
DROP TRIGGER IF EXISTS insert_parcels_agval ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_agriculture_plant_hardiness_updated ON parcels_production.parcels_agriculture;
DROP TRIGGER IF EXISTS insert_parcels_agriculture_ll_uuid ON parcels_production.parcels_agriculture;
DROP TRIGGER IF EXISTS insert_parcels_agriculture_hardiness_zone ON parcels_production.parcels_agriculture;
DROP TRIGGER IF EXISTS insert_parcels_agriculture_hardiness_temp ON parcels_production.parcels_agriculture;
DROP TRIGGER IF EXISTS insert_parcels_agfndluom ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_agfndarea ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_addrtyp ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_address_source ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_address2 ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_address ON parcels_production.parcels;
DROP TRIGGER IF EXISTS insert_parcels_acctid_county_stripped ON parcels_production.parcels;
DROP INDEX IF EXISTS parcels_production.idx_650192_z;
DROP INDEX IF EXISTS parcels_production.idx_650187_type;
DROP INDEX IF EXISTS parcels_production.idx_650184_path;
DROP INDEX IF EXISTS parcels_production.idx_650176_latitude;
DROP INDEX IF EXISTS parcels_production.idx_650173_ll_uuid;
DROP INDEX IF EXISTS parcels_production.idx_650173_highway_km;
DROP INDEX IF EXISTS parcels_production.idx_650170_ll_uuid;
DROP INDEX IF EXISTS parcels_production.idx_650167_ll_uuid;
DROP INDEX IF EXISTS parcels_production.idx_650164_ll_uuid;
DROP INDEX IF EXISTS parcels_production.idx_650159_ll_uuid;
DROP INDEX IF EXISTS parcels_production.idx_650153_path;
DROP INDEX IF EXISTS parcels_production.idx_650147_ll_uuid;
DROP INDEX IF EXISTS parcels_production.idx_650144_ll_uuid;
DROP INDEX IF EXISTS parcels_production.idx_650139_ll_uuid;
DROP INDEX IF EXISTS parcels_production.idx_650136_ll_uuid;
DROP INDEX IF EXISTS parcels_production.idx_650133_ll_uuid;
DROP INDEX IF EXISTS parcels_production.idx_650130_ll_uuid;
DROP INDEX IF EXISTS parcels_production.idx_650125_path;
DROP INDEX IF EXISTS parcels_production.idx_650125_ll_uuid;
DROP INDEX IF EXISTS parcels_production.idx_650125_ll_gisacre;
DROP INDEX IF EXISTS parcels_production.idx_650125_gisacre;
DROP INDEX IF EXISTS parcels_production.idx_650120_name;
DROP INDEX IF EXISTS parcels_production.idx_650117_column_name;
DROP INDEX IF EXISTS parcels_production.idx_650112_lat;
DROP INDEX IF EXISTS parcels_production.idx_650109_provider_id;
DROP INDEX IF EXISTS parcels_production.idx_650104_abbrev;
DROP INDEX IF EXISTS parcels_production.election_results_geometry_idx;
ALTER TABLE IF EXISTS ONLY parcels_production.properties DROP CONSTRAINT IF EXISTS properties_pkey;
ALTER TABLE IF EXISTS ONLY parcels_production.parcels_weather_summary DROP CONSTRAINT IF EXISTS parcels_weather_summary_pkey;
ALTER TABLE IF EXISTS ONLY parcels_production.parcels_weather DROP CONSTRAINT IF EXISTS parcels_weather_pkey;
ALTER TABLE IF EXISTS ONLY parcels_production.parcels_seismic_hazards_model DROP CONSTRAINT IF EXISTS parcels_seismic_hazards_model_pkey;
ALTER TABLE IF EXISTS ONLY parcels_production.parcels_election_results DROP CONSTRAINT IF EXISTS parcels_election_results_pkey;
ALTER TABLE IF EXISTS ONLY parcels_production.importers DROP CONSTRAINT IF EXISTS importers_pkey;
ALTER TABLE IF EXISTS ONLY parcels_production.heatmaps DROP CONSTRAINT IF EXISTS heatmaps_h3_res4_id_h3_res4_id1_key;
ALTER TABLE IF EXISTS ONLY parcels_production.election_results DROP CONSTRAINT IF EXISTS election_results_pkey;
ALTER TABLE IF EXISTS ONLY parcels_production.database_table_views DROP CONSTRAINT IF EXISTS database_table_views_view_name_table_name_user_public_key_key;
ALTER TABLE IF EXISTS ONLY parcels_production.database_table_views DROP CONSTRAINT IF EXISTS database_table_views_pkey;
ALTER TABLE IF EXISTS ONLY parcels_production.coverage DROP CONSTRAINT IF EXISTS coverage_pkey;
ALTER TABLE IF EXISTS parcels_production.parcels_geometry_extra ALTER COLUMN ogc_fid DROP DEFAULT;
DROP TABLE IF EXISTS parcels_production.usgs_seismic_hazards_model;
DROP TABLE IF EXISTS parcels_production.tiles;
DROP TABLE IF EXISTS parcels_production.roads;
DROP TABLE IF EXISTS parcels_production.properties;
DROP TABLE IF EXISTS parcels_production.plant_hardiness_zones;
DROP TABLE IF EXISTS parcels_production.parcels_weather_summary;
DROP TABLE IF EXISTS parcels_production.parcels_weather;
DROP TABLE IF EXISTS parcels_production.parcels_viewshed;
DROP TABLE IF EXISTS parcels_production.parcels_seismic_hazards_model;
DROP TABLE IF EXISTS parcels_production.parcels_road;
DROP TABLE IF EXISTS parcels_production.parcels_rank;
DROP TABLE IF EXISTS parcels_production.parcels_nature;
DROP TABLE IF EXISTS parcels_production.parcels_meta;
DROP TABLE IF EXISTS parcels_production.parcels_internet;
DROP SEQUENCE IF EXISTS parcels_production.parcels_geometry_extra_ogc_fid_seq;
DROP TABLE IF EXISTS parcels_production.parcels_geometry_extra;
DROP TABLE IF EXISTS parcels_production.parcels_geometry;
DROP TABLE IF EXISTS parcels_production.parcels_elevation;
DROP TABLE IF EXISTS parcels_production.parcels_election_results;
DROP TABLE IF EXISTS parcels_production.parcels_density;
DROP TABLE IF EXISTS parcels_production.parcels_coastline;
DROP TABLE IF EXISTS parcels_production.parcels_airport;
DROP TABLE IF EXISTS parcels_production.parcels_agriculture;
DROP TABLE IF EXISTS parcels_production.parcels;
DROP TABLE IF EXISTS parcels_production.importers;
DROP TABLE IF EXISTS parcels_production.heatmaps;
DROP TABLE IF EXISTS parcels_production.election_results;
DROP TABLE IF EXISTS parcels_production.database_table_views;
DROP TABLE IF EXISTS parcels_production.coverage;
DROP TABLE IF EXISTS parcels_production.coordinates;
DROP TABLE IF EXISTS parcels_production.broadband_availability;
DROP TABLE IF EXISTS parcels_production.airports;
DROP FUNCTION IF EXISTS public.update_parcels_zoning_fn();
DROP FUNCTION IF EXISTS public.update_parcels_zoning_description_fn();
DROP FUNCTION IF EXISTS public.update_parcels_zoning_change_date_fn();
DROP FUNCTION IF EXISTS public.update_parcels_yearbuilt_fn();
DROP FUNCTION IF EXISTS public.update_parcels_width_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_years_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_updated_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_min_perfect_days_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_min_indoor_days_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_min_hrs_below_5c_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_min_hrs_below_10c_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_min_hrs_below_0c_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_min_fair_days_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_min_dinner_outside_days_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_min_daytime_hrs_below_5c_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_min_daytime_hrs_below_10c_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_min_daytime_hrs_below_0c_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_min_daytime_hours_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_min_cloudy_hours_90pct_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_min_cloudy_hours_50pct_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_min_cloudy_hours_10pct_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_min_active_days_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_median_perfect_days_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_median_indoor_days_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_median_hrs_below_5c_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_median_hrs_below_10c_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_median_hrs_below_0c_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_median_fair_days_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_median_dinner_outside_days_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_median_daytime_hrs_below_5c_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_median_daytime_hrs_below_10c_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_median_daytime_hrs_below_0c_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_median_daytime_hours_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_median_cloudy_hours_90pct_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_median_cloudy_hours_50pct_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_median_cloudy_hours_10pct_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_median_active_days_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_max_perfect_days_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_max_indoor_days_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_max_hrs_below_5c_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_max_hrs_below_10c_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_max_hrs_below_0c_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_max_fair_days_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_max_dinner_outside_days_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_max_daytime_hrs_below_5c_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_max_daytime_hrs_below_10c_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_max_daytime_hrs_below_0c_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_max_daytime_hours_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_max_cloudy_hours_90pct_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_max_cloudy_hours_50pct_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_max_cloudy_hours_10pct_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_max_active_days_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_ll_uuid_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_avg_perfect_days_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_avg_indoor_days_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_avg_hrs_below_5c_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_avg_hrs_below_10c_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_avg_hrs_below_0c_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_avg_fair_days_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_avg_dinner_outside_days_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_avg_daytime_hrs_below_5c_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_avg_daytime_hrs_below_10c_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_avg_daytime_hrs_below_0c_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_avg_daytime_hours_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_avg_cloudy_hours_90pct_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_avg_cloudy_hours_50pct_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_avg_cloudy_hours_10pct_fn();
DROP FUNCTION IF EXISTS public.update_parcels_weather_summary_avg_active_days_fn();
DROP FUNCTION IF EXISTS public.update_parcels_viewshed_viewshed_w_fn();
DROP FUNCTION IF EXISTS public.update_parcels_viewshed_viewshed_sw_fn();
DROP FUNCTION IF EXISTS public.update_parcels_viewshed_viewshed_se_fn();
DROP FUNCTION IF EXISTS public.update_parcels_viewshed_viewshed_s_fn();
DROP FUNCTION IF EXISTS public.update_parcels_viewshed_viewshed_percentage_fn();
DROP FUNCTION IF EXISTS public.update_parcels_viewshed_viewshed_nw_fn();
DROP FUNCTION IF EXISTS public.update_parcels_viewshed_viewshed_ne_fn();
DROP FUNCTION IF EXISTS public.update_parcels_viewshed_viewshed_n_fn();
DROP FUNCTION IF EXISTS public.update_parcels_viewshed_viewshed_index_under_2km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_viewshed_viewshed_index_fn();
DROP FUNCTION IF EXISTS public.update_parcels_viewshed_viewshed_index_75km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_viewshed_viewshed_index_5km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_viewshed_viewshed_index_50km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_viewshed_viewshed_index_2km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_viewshed_viewshed_index_20km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_viewshed_viewshed_index_10km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_viewshed_viewshed_e_fn();
DROP FUNCTION IF EXISTS public.update_parcels_viewshed_longitude_fn();
DROP FUNCTION IF EXISTS public.update_parcels_viewshed_ll_uuid_fn();
DROP FUNCTION IF EXISTS public.update_parcels_viewshed_latitude_fn();
DROP FUNCTION IF EXISTS public.update_parcels_usps_vacancy_fn();
DROP FUNCTION IF EXISTS public.update_parcels_usps_vacancy_date_fn();
DROP FUNCTION IF EXISTS public.update_parcels_usedesc_fn();
DROP FUNCTION IF EXISTS public.update_parcels_usecode_fn();
DROP FUNCTION IF EXISTS public.update_parcels_urbanization_fn();
DROP FUNCTION IF EXISTS public.update_parcels_transno1_fn();
DROP FUNCTION IF EXISTS public.update_parcels_trailer_fn();
DROP FUNCTION IF EXISTS public.update_parcels_towncode_fn();
DROP FUNCTION IF EXISTS public.update_parcels_taxyear_fn();
DROP FUNCTION IF EXISTS public.update_parcels_taxamt_fn();
DROP FUNCTION IF EXISTS public.update_parcels_szip_fn();
DROP FUNCTION IF EXISTS public.update_parcels_sunit_fn();
DROP FUNCTION IF EXISTS public.update_parcels_subsurfown_fn();
DROP FUNCTION IF EXISTS public.update_parcels_subowntype_fn();
DROP FUNCTION IF EXISTS public.update_parcels_subdivision_fn();
DROP FUNCTION IF EXISTS public.update_parcels_subdivision_code_fn();
DROP FUNCTION IF EXISTS public.update_parcels_strustyl_fn();
DROP FUNCTION IF EXISTS public.update_parcels_strugrad_fn();
DROP FUNCTION IF EXISTS public.update_parcels_structstyle_fn();
DROP FUNCTION IF EXISTS public.update_parcels_structno_fn();
DROP FUNCTION IF EXISTS public.update_parcels_struct_fn();
DROP FUNCTION IF EXISTS public.update_parcels_strucnst_fn();
DROP FUNCTION IF EXISTS public.update_parcels_strubldg_fn();
DROP FUNCTION IF EXISTS public.update_parcels_state2_fn();
DROP FUNCTION IF EXISTS public.update_parcels_sqft_fn();
DROP FUNCTION IF EXISTS public.update_parcels_special_fn();
DROP FUNCTION IF EXISTS public.update_parcels_sourceurl_fn();
DROP FUNCTION IF EXISTS public.update_parcels_sourceref_fn();
DROP FUNCTION IF EXISTS public.update_parcels_sourcedate_fn();
DROP FUNCTION IF EXISTS public.update_parcels_sourceagent_fn();
DROP FUNCTION IF EXISTS public.update_parcels_section_fn();
DROP FUNCTION IF EXISTS public.update_parcels_sdatwebadr_fn();
DROP FUNCTION IF EXISTS public.update_parcels_scity_fn();
DROP FUNCTION IF EXISTS public.update_parcels_saleprice_fn();
DROP FUNCTION IF EXISTS public.update_parcels_saledate_fn();
DROP FUNCTION IF EXISTS public.update_parcels_saddsttyp_fn();
DROP FUNCTION IF EXISTS public.update_parcels_saddstsuf_fn();
DROP FUNCTION IF EXISTS public.update_parcels_saddstr_fn();
DROP FUNCTION IF EXISTS public.update_parcels_saddpref_fn();
DROP FUNCTION IF EXISTS public.update_parcels_saddno_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rzrealdat_fn();
DROP FUNCTION IF EXISTS public.update_parcels_road_road_km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_road_paved_km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_road_ll_uuid_fn();
DROP FUNCTION IF EXISTS public.update_parcels_road_highway_km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_road_high_traffic_km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_reviseddate_fn();
DROP FUNCTION IF EXISTS public.update_parcels_revisedate_fn();
DROP FUNCTION IF EXISTS public.update_parcels_resiuths_fn();
DROP FUNCTION IF EXISTS public.update_parcels_resityp_fn();
DROP FUNCTION IF EXISTS public.update_parcels_resident_fn();
DROP FUNCTION IF EXISTS public.update_parcels_resi2010_fn();
DROP FUNCTION IF EXISTS public.update_parcels_resi2000_fn();
DROP FUNCTION IF EXISTS public.update_parcels_resi1990_fn();
DROP FUNCTION IF EXISTS public.update_parcels_recrdareatx_fn();
DROP FUNCTION IF EXISTS public.update_parcels_recrdareano_fn();
DROP FUNCTION IF EXISTS public.update_parcels_recind_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rdi_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_surrounding_coverage_density_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_spring_count_5km_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_spring_count_50km_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_spring_count_1km_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_spring_count_10km_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_spring_count_100km_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_perfect_days_in_2022_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_perfect_days_in_2021_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_perfect_days_in_2020_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_perfect_days_in_2019_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_perfect_days_in_2018_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_perfect_days_in_2017_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_perfect_days_in_2016_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_perfect_days_in_2015_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_nearby_max_upload_speed_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_nearby_max_download_speed_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_military_count_50km_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_military_count_25km_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_military_count_200km_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_max_upload_speed_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_max_download_speed_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_ll_uuid_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_indoor_days_in_2022_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_indoor_days_in_2021_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_indoor_days_in_2020_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_indoor_days_in_2019_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_indoor_days_in_2018_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_indoor_days_in_2017_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_indoor_days_in_2016_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_indoor_days_in_2015_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2022_();
DROP FUNCTION IF EXISTS public.update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2021_();
DROP FUNCTION IF EXISTS public.update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2020_();
DROP FUNCTION IF EXISTS public.update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2019_();
DROP FUNCTION IF EXISTS public.update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2018_();
DROP FUNCTION IF EXISTS public.update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2017_();
DROP FUNCTION IF EXISTS public.update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2016_();
DROP FUNCTION IF EXISTS public.update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2015_();
DROP FUNCTION IF EXISTS public.update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2022();
DROP FUNCTION IF EXISTS public.update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2021();
DROP FUNCTION IF EXISTS public.update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2020();
DROP FUNCTION IF EXISTS public.update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2019();
DROP FUNCTION IF EXISTS public.update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2018();
DROP FUNCTION IF EXISTS public.update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2017();
DROP FUNCTION IF EXISTS public.update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2016();
DROP FUNCTION IF EXISTS public.update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2015();
DROP FUNCTION IF EXISTS public.update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2022_();
DROP FUNCTION IF EXISTS public.update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2021_();
DROP FUNCTION IF EXISTS public.update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2020_();
DROP FUNCTION IF EXISTS public.update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2019_();
DROP FUNCTION IF EXISTS public.update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2018_();
DROP FUNCTION IF EXISTS public.update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2017_();
DROP FUNCTION IF EXISTS public.update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2016_();
DROP FUNCTION IF EXISTS public.update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2015_();
DROP FUNCTION IF EXISTS public.update_parcels_rank_hardiness_temp_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_fair_days_in_2022_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_fair_days_in_2021_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_fair_days_in_2020_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_fair_days_in_2019_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_fair_days_in_2018_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_fair_days_in_2017_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_fair_days_in_2016_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_fair_days_in_2015_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_dinner_outside_days_in_2022_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_dinner_outside_days_in_2021_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_dinner_outside_days_in_2020_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_dinner_outside_days_in_2019_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_dinner_outside_days_in_2018_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_dinner_outside_days_in_2017_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_dinner_outside_days_in_2016_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_dinner_outside_days_in_2015_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_daytime_hrs_below_5_c_apparent_temperature_();
DROP FUNCTION IF EXISTS public.update_parcels_rank_daytime_hrs_below_10_c_apparent_temperature();
DROP FUNCTION IF EXISTS public.update_parcels_rank_daytime_hrs_below_0_c_apparent_temperature_();
DROP FUNCTION IF EXISTS public.update_parcels_rank_daytime_hours_in_2022_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_daytime_hours_in_2021_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_daytime_hours_in_2020_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_daytime_hours_in_2019_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_daytime_hours_in_2018_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_daytime_hours_in_2017_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_daytime_hours_in_2016_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_daytime_hours_in_2015_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_daytime_hours_above_90_pct_cloud_cover_in_2();
DROP FUNCTION IF EXISTS public.update_parcels_rank_daytime_hours_above_80_pct_cloud_cover_in_2();
DROP FUNCTION IF EXISTS public.update_parcels_rank_daytime_hours_above_70_pct_cloud_cover_in_2();
DROP FUNCTION IF EXISTS public.update_parcels_rank_daytime_hours_above_60_pct_cloud_cover_in_2();
DROP FUNCTION IF EXISTS public.update_parcels_rank_daytime_hours_above_50_pct_cloud_cover_in_2();
DROP FUNCTION IF EXISTS public.update_parcels_rank_daytime_hours_above_40_pct_cloud_cover_in_2();
DROP FUNCTION IF EXISTS public.update_parcels_rank_daytime_hours_above_30_pct_cloud_cover_in_2();
DROP FUNCTION IF EXISTS public.update_parcels_rank_daytime_hours_above_20_pct_cloud_cover_in_2();
DROP FUNCTION IF EXISTS public.update_parcels_rank_daytime_hours_above_10_pct_cloud_cover_in_2();
DROP FUNCTION IF EXISTS public.update_parcels_rank_closest_spring_distance_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_closest_provider_distance_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_closest_military_distance_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_avg_perfect_days_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_avg_indoor_days_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_avg_hrs_below_5c_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_avg_hrs_below_10c_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_avg_hrs_below_0c_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_avg_fair_days_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_avg_dinner_outside_days_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_avg_daytime_hrs_below_5c_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_avg_daytime_hrs_below_10c_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_avg_daytime_hrs_below_0c_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_avg_cloudy_hours_90pct_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_avg_cloudy_hours_50pct_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_avg_cloudy_hours_10pct_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_avg_active_days_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_active_days_in_2022_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_active_days_in_2021_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_active_days_in_2020_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_active_days_in_2019_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_active_days_in_2018_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_active_days_in_2017_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_active_days_in_2016_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_rank_active_days_in_2015_rank_fn();
DROP FUNCTION IF EXISTS public.update_parcels_qoz_tract_fn();
DROP FUNCTION IF EXISTS public.update_parcels_qoz_fn();
DROP FUNCTION IF EXISTS public.update_parcels_ptype_fn();
DROP FUNCTION IF EXISTS public.update_parcels_polyid_fn();
DROP FUNCTION IF EXISTS public.update_parcels_plndevdat_fn();
DROP FUNCTION IF EXISTS public.update_parcels_plat_fn();
DROP FUNCTION IF EXISTS public.update_parcels_pfuw_fn();
DROP FUNCTION IF EXISTS public.update_parcels_pfus_fn();
DROP FUNCTION IF EXISTS public.update_parcels_pfsu_fn();
DROP FUNCTION IF EXISTS public.update_parcels_pfsp_fn();
DROP FUNCTION IF EXISTS public.update_parcels_pflw_fn();
DROP FUNCTION IF EXISTS public.update_parcels_pfih_fn();
DROP FUNCTION IF EXISTS public.update_parcels_pfic_fn();
DROP FUNCTION IF EXISTS public.update_parcels_permittyp_fn();
DROP FUNCTION IF EXISTS public.update_parcels_path_fn();
DROP FUNCTION IF EXISTS public.update_parcels_parvaltype_fn();
DROP FUNCTION IF EXISTS public.update_parcels_parval_fn();
DROP FUNCTION IF EXISTS public.update_parcels_parcelnumb_fn();
DROP FUNCTION IF EXISTS public.update_parcels_page_fn();
DROP FUNCTION IF EXISTS public.update_parcels_padus_public_access_fn();
DROP FUNCTION IF EXISTS public.update_parcels_owntype_fn();
DROP FUNCTION IF EXISTS public.update_parcels_ownlast_fn();
DROP FUNCTION IF EXISTS public.update_parcels_ownfrst_fn();
DROP FUNCTION IF EXISTS public.update_parcels_owner_index_fn();
DROP FUNCTION IF EXISTS public.update_parcels_owner_fn();
DROP FUNCTION IF EXISTS public.update_parcels_owner4_fn();
DROP FUNCTION IF EXISTS public.update_parcels_owner3_fn();
DROP FUNCTION IF EXISTS public.update_parcels_owner2_fn();
DROP FUNCTION IF EXISTS public.update_parcels_other_fn();
DROP FUNCTION IF EXISTS public.update_parcels_original_address_fn();
DROP FUNCTION IF EXISTS public.update_parcels_ooi_fn();
DROP FUNCTION IF EXISTS public.update_parcels_ogc_fid_fn();
DROP FUNCTION IF EXISTS public.update_parcels_numunits_fn();
DROP FUNCTION IF EXISTS public.update_parcels_numstories_fn();
DROP FUNCTION IF EXISTS public.update_parcels_nprctstdat_fn();
DROP FUNCTION IF EXISTS public.update_parcels_nprcluom_fn();
DROP FUNCTION IF EXISTS public.update_parcels_nprcarea_fn();
DROP FUNCTION IF EXISTS public.update_parcels_neighborhood_fn();
DROP FUNCTION IF EXISTS public.update_parcels_nature_nature_updated_fn();
DROP FUNCTION IF EXISTS public.update_parcels_nature_nature_score_fn();
DROP FUNCTION IF EXISTS public.update_parcels_nature_ll_uuid_fn();
DROP FUNCTION IF EXISTS public.update_parcels_nature_leaf_rating_fn();
DROP FUNCTION IF EXISTS public.update_parcels_namekey_fn();
DROP FUNCTION IF EXISTS public.update_parcels_multistruct_fn();
DROP FUNCTION IF EXISTS public.update_parcels_mortgag1_fn();
DROP FUNCTION IF EXISTS public.update_parcels_meta_tribal_fn();
DROP FUNCTION IF EXISTS public.update_parcels_meta_public_fn();
DROP FUNCTION IF EXISTS public.update_parcels_meta_ll_uuid_fn();
DROP FUNCTION IF EXISTS public.update_parcels_map_fn();
DROP FUNCTION IF EXISTS public.update_parcels_mailadd_fn();
DROP FUNCTION IF EXISTS public.update_parcels_mail_zip_fn();
DROP FUNCTION IF EXISTS public.update_parcels_mail_urbanization_fn();
DROP FUNCTION IF EXISTS public.update_parcels_mail_unit_fn();
DROP FUNCTION IF EXISTS public.update_parcels_mail_state2_fn();
DROP FUNCTION IF EXISTS public.update_parcels_mail_country_fn();
DROP FUNCTION IF EXISTS public.update_parcels_mail_city_fn();
DROP FUNCTION IF EXISTS public.update_parcels_mail_addsttyp_fn();
DROP FUNCTION IF EXISTS public.update_parcels_mail_addstsuf_fn();
DROP FUNCTION IF EXISTS public.update_parcels_mail_addstr_fn();
DROP FUNCTION IF EXISTS public.update_parcels_mail_address2_fn();
DROP FUNCTION IF EXISTS public.update_parcels_mail_addpref_fn();
DROP FUNCTION IF EXISTS public.update_parcels_mail_addno_fn();
DROP FUNCTION IF EXISTS public.update_parcels_luom_fn();
DROP FUNCTION IF EXISTS public.update_parcels_lot_fn();
DROP FUNCTION IF EXISTS public.update_parcels_lon_fn();
DROP FUNCTION IF EXISTS public.update_parcels_location_name_fn();
DROP FUNCTION IF EXISTS public.update_parcels_ll_uuid_fn();
DROP FUNCTION IF EXISTS public.update_parcels_ll_updated_at_fn();
DROP FUNCTION IF EXISTS public.update_parcels_ll_stable_id_fn();
DROP FUNCTION IF EXISTS public.update_parcels_ll_gissqft_fn();
DROP FUNCTION IF EXISTS public.update_parcels_ll_gisacre_fn();
DROP FUNCTION IF EXISTS public.update_parcels_ll_bldg_footprint_sqft_fn();
DROP FUNCTION IF EXISTS public.update_parcels_ll_bldg_count_fn();
DROP FUNCTION IF EXISTS public.update_parcels_legaldesc_fn();
DROP FUNCTION IF EXISTS public.update_parcels_lbcs_structure_fn();
DROP FUNCTION IF EXISTS public.update_parcels_lbcs_structure_desc_fn();
DROP FUNCTION IF EXISTS public.update_parcels_lbcs_site_fn();
DROP FUNCTION IF EXISTS public.update_parcels_lbcs_site_desc_fn();
DROP FUNCTION IF EXISTS public.update_parcels_lbcs_ownership_fn();
DROP FUNCTION IF EXISTS public.update_parcels_lbcs_ownership_desc_fn();
DROP FUNCTION IF EXISTS public.update_parcels_lbcs_function_fn();
DROP FUNCTION IF EXISTS public.update_parcels_lbcs_function_desc_fn();
DROP FUNCTION IF EXISTS public.update_parcels_lbcs_activity_fn();
DROP FUNCTION IF EXISTS public.update_parcels_lbcs_activity_desc_fn();
DROP FUNCTION IF EXISTS public.update_parcels_lat_fn();
DROP FUNCTION IF EXISTS public.update_parcels_lastinsp_fn();
DROP FUNCTION IF EXISTS public.update_parcels_lastassd_fn();
DROP FUNCTION IF EXISTS public.update_parcels_landval_fn();
DROP FUNCTION IF EXISTS public.update_parcels_jurscode_fn();
DROP FUNCTION IF EXISTS public.update_parcels_internet_surrounding_providers_fn();
DROP FUNCTION IF EXISTS public.update_parcels_internet_surrounding_coverage_density_fn();
DROP FUNCTION IF EXISTS public.update_parcels_internet_nearby_max_upload_speed_fn();
DROP FUNCTION IF EXISTS public.update_parcels_internet_nearby_max_download_speed_fn();
DROP FUNCTION IF EXISTS public.update_parcels_internet_max_upload_speed_fn();
DROP FUNCTION IF EXISTS public.update_parcels_internet_max_download_speed_fn();
DROP FUNCTION IF EXISTS public.update_parcels_internet_low_latency_fn();
DROP FUNCTION IF EXISTS public.update_parcels_internet_ll_uuid_fn();
DROP FUNCTION IF EXISTS public.update_parcels_internet_closest_provider_h3_res8_id_fn();
DROP FUNCTION IF EXISTS public.update_parcels_internet_closest_provider_distance_fn();
DROP FUNCTION IF EXISTS public.update_parcels_internet_broadband_updated_fn();
DROP FUNCTION IF EXISTS public.update_parcels_improvval_fn();
DROP FUNCTION IF EXISTS public.update_parcels_homqldat_fn();
DROP FUNCTION IF EXISTS public.update_parcels_homqlcod_fn();
DROP FUNCTION IF EXISTS public.update_parcels_homestead_exemption_fn();
DROP FUNCTION IF EXISTS public.update_parcels_grntnam1_fn();
DROP FUNCTION IF EXISTS public.update_parcels_grid_fn();
DROP FUNCTION IF EXISTS public.update_parcels_gr1libr1_fn();
DROP FUNCTION IF EXISTS public.update_parcels_gr1folo1_fn();
DROP FUNCTION IF EXISTS public.update_parcels_gr1clrk1v_fn();
DROP FUNCTION IF EXISTS public.update_parcels_goz_tract_fn();
DROP FUNCTION IF EXISTS public.update_parcels_goz_fn();
DROP FUNCTION IF EXISTS public.update_parcels_gisacre_fn();
DROP FUNCTION IF EXISTS public.update_parcels_geometry_ll_uuid_fn();
DROP FUNCTION IF EXISTS public.update_parcels_geometry_coordinates_fn();
DROP FUNCTION IF EXISTS public.update_parcels_geoid_fn();
DROP FUNCTION IF EXISTS public.update_parcels_geogcode_fn();
DROP FUNCTION IF EXISTS public.update_parcels_fcmacode_fn();
DROP FUNCTION IF EXISTS public.update_parcels_exclass_fn();
DROP FUNCTION IF EXISTS public.update_parcels_entzndat_fn();
DROP FUNCTION IF EXISTS public.update_parcels_entznassm_fn();
DROP FUNCTION IF EXISTS public.update_parcels_elevation_p90_fn();
DROP FUNCTION IF EXISTS public.update_parcels_elevation_p75_fn();
DROP FUNCTION IF EXISTS public.update_parcels_elevation_p50_fn();
DROP FUNCTION IF EXISTS public.update_parcels_elevation_p25_fn();
DROP FUNCTION IF EXISTS public.update_parcels_elevation_p10_fn();
DROP FUNCTION IF EXISTS public.update_parcels_elevation_min_fn();
DROP FUNCTION IF EXISTS public.update_parcels_elevation_median_fn();
DROP FUNCTION IF EXISTS public.update_parcels_elevation_max_fn();
DROP FUNCTION IF EXISTS public.update_parcels_elevation_ll_uuid_fn();
DROP FUNCTION IF EXISTS public.update_parcels_dr1liber_fn();
DROP FUNCTION IF EXISTS public.update_parcels_dr1folio_fn();
DROP FUNCTION IF EXISTS public.update_parcels_dr1clerk_fn();
DROP FUNCTION IF EXISTS public.update_parcels_dpv_type_fn();
DROP FUNCTION IF EXISTS public.update_parcels_dpv_status_fn();
DROP FUNCTION IF EXISTS public.update_parcels_dpv_notes_fn();
DROP FUNCTION IF EXISTS public.update_parcels_dpv_codes_fn();
DROP FUNCTION IF EXISTS public.update_parcels_detailed_subdivision_code_fn();
DROP FUNCTION IF EXISTS public.update_parcels_desctown_fn();
DROP FUNCTION IF EXISTS public.update_parcels_descgrad_fn();
DROP FUNCTION IF EXISTS public.update_parcels_descexcl_fn();
DROP FUNCTION IF EXISTS public.update_parcels_desccnst_fn();
DROP FUNCTION IF EXISTS public.update_parcels_descciuse_fn();
DROP FUNCTION IF EXISTS public.update_parcels_descbldg_fn();
DROP FUNCTION IF EXISTS public.update_parcels_depth_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_water_updated_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_water_density_5km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_water_density_50km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_water_density_25km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_water_density_1km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_water_density_10km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_water_count_5km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_water_count_50km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_water_count_25km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_water_count_1km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_water_count_10km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_water_5km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_water_50km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_water_25km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_water_1km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_water_10km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_spring_updated_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_spring_count_5km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_spring_count_50km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_spring_count_25km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_spring_count_1km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_spring_count_10km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_spring_count_100km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_spring_5km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_spring_50km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_spring_25km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_spring_1km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_spring_10km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_spring_100km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_religious_updated_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_religion_density_5km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_religion_density_50km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_religion_density_25km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_religion_density_1km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_religion_density_150km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_religion_density_10km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_religion_density_100km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_religion_count_5km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_religion_count_50km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_religion_count_25km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_religion_count_1km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_religion_count_150km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_religion_count_10km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_religion_count_100km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_religion_5km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_religion_50km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_religion_25km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_religion_1km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_religion_150km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_religion_10km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_religion_100km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_public_land_updated_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_public_land_density_5km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_public_land_density_25km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_public_land_density_1km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_public_land_density_10km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_public_land_count_5km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_public_land_count_25km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_public_land_count_1km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_public_land_count_10km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_public_land_5km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_public_land_25km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_public_land_1km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_public_land_10km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_pollution_updated_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_pollution_density_5km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_pollution_density_25km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_pollution_density_1km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_pollution_density_10km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_pollution_count_5km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_pollution_count_25km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_pollution_count_1km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_pollution_count_10km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_pollution_5km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_pollution_25km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_pollution_1km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_pollution_10km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_parcels_updated_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_parcels_density_5km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_parcels_density_50km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_parcels_density_25km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_parcels_density_1km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_parcels_density_10km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_parcels_count_5km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_parcels_count_50km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_parcels_count_25km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_parcels_count_1km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_parcels_count_10km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_natural_updated_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_natural_density_5km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_natural_density_25km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_natural_density_1km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_natural_density_10km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_natural_count_5km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_natural_count_25km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_natural_count_1km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_natural_count_10km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_natural_5km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_natural_25km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_natural_1km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_natural_10km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_military_updated_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_military_count_5km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_military_count_50km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_military_count_25km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_military_count_200km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_military_count_1km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_military_count_150km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_military_count_10km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_military_count_100km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_military_5km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_military_50km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_military_25km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_military_200km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_military_1km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_military_150km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_military_10km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_military_100km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_ll_uuid_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_library_updated_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_library_count_5km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_library_count_50km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_library_count_25km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_library_count_1km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_library_count_10km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_library_5km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_library_50km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_library_25km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_library_1km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_library_10km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_healthcare_updated_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_healthcare_count_5km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_healthcare_count_50km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_healthcare_count_25km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_healthcare_count_200km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_healthcare_count_1km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_healthcare_count_150km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_healthcare_count_10km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_healthcare_count_100km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_healthcare_5km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_healthcare_50km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_healthcare_25km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_healthcare_200km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_healthcare_1km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_healthcare_150km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_healthcare_10km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_healthcare_100km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_geological_features_updated_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_geological_features_count_5km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_geological_features_count_25km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_geological_features_count_1km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_geological_features_count_10km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_geological_features_5km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_geological_features_25km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_geological_features_1km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_geological_features_10km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_closest_water_tags_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_closest_water_name_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_closest_water_items_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_closest_water_distance_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_closest_spring_tags_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_closest_spring_name_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_closest_spring_items_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_closest_spring_distance_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_closest_religious_tags_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_closest_religious_name_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_closest_religious_items_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_closest_religious_distance_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_closest_public_land_tags_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_closest_public_land_name_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_closest_public_land_items_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_closest_public_land_distance_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_closest_pollution_tags_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_closest_pollution_name_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_closest_pollution_items_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_closest_pollution_distance_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_closest_natural_tags_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_closest_natural_name_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_closest_natural_items_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_closest_natural_distance_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_closest_military_tags_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_closest_military_name_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_closest_military_items_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_closest_military_distance_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_closest_library_tags_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_closest_library_name_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_closest_library_items_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_closest_library_distance_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_closest_healthcare_tags_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_closest_healthcare_name_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_closest_healthcare_items_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_closest_healthcare_distance_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_closest_geological_features_tags_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_closest_geological_features_name_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_closest_geological_features_items_fn();
DROP FUNCTION IF EXISTS public.update_parcels_density_closest_geological_features_distance_fn();
DROP FUNCTION IF EXISTS public.update_parcels_crtarcod_fn();
DROP FUNCTION IF EXISTS public.update_parcels_county_fn();
DROP FUNCTION IF EXISTS public.update_parcels_convey1_fn();
DROP FUNCTION IF EXISTS public.update_parcels_coastline_ll_uuid_fn();
DROP FUNCTION IF EXISTS public.update_parcels_coastline_distance_km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_ciuse_fn();
DROP FUNCTION IF EXISTS public.update_parcels_city_fn();
DROP FUNCTION IF EXISTS public.update_parcels_census_tract_fn();
DROP FUNCTION IF EXISTS public.update_parcels_census_blockgroup_fn();
DROP FUNCTION IF EXISTS public.update_parcels_census_block_fn();
DROP FUNCTION IF EXISTS public.update_parcels_cdl_raw_fn();
DROP FUNCTION IF EXISTS public.update_parcels_cdl_majority_percent_fn();
DROP FUNCTION IF EXISTS public.update_parcels_cdl_majority_category_fn();
DROP FUNCTION IF EXISTS public.update_parcels_cdl_date_fn();
DROP FUNCTION IF EXISTS public.update_parcels_cass_errorno_fn();
DROP FUNCTION IF EXISTS public.update_parcels_careof_fn();
DROP FUNCTION IF EXISTS public.update_parcels_book_fn();
DROP FUNCTION IF EXISTS public.update_parcels_block_fn();
DROP FUNCTION IF EXISTS public.update_parcels_assessor_fn();
DROP FUNCTION IF EXISTS public.update_parcels_aprtment_fn();
DROP FUNCTION IF EXISTS public.update_parcels_airport_ll_uuid_fn();
DROP FUNCTION IF EXISTS public.update_parcels_airport_distance_km_fn();
DROP FUNCTION IF EXISTS public.update_parcels_airport_abbrev_fn();
DROP FUNCTION IF EXISTS public.update_parcels_agval_fn();
DROP FUNCTION IF EXISTS public.update_parcels_agriculture_plant_hardiness_updated_fn();
DROP FUNCTION IF EXISTS public.update_parcels_agriculture_ll_uuid_fn();
DROP FUNCTION IF EXISTS public.update_parcels_agriculture_hardiness_zone_fn();
DROP FUNCTION IF EXISTS public.update_parcels_agriculture_hardiness_temp_fn();
DROP FUNCTION IF EXISTS public.update_parcels_agfndluom_fn();
DROP FUNCTION IF EXISTS public.update_parcels_agfndarea_fn();
DROP FUNCTION IF EXISTS public.update_parcels_addrtyp_fn();
DROP FUNCTION IF EXISTS public.update_parcels_address_source_fn();
DROP FUNCTION IF EXISTS public.update_parcels_address_fn();
DROP FUNCTION IF EXISTS public.update_parcels_address2_fn();
DROP FUNCTION IF EXISTS public.update_parcels_acctid_county_stripped_fn();
DROP FUNCTION IF EXISTS public.tilebbox(z integer, x integer, y integer, srid integer);
DROP FUNCTION IF EXISTS public.insert_parcels_zoning_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_zoning_description_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_zoning_change_date_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_yearbuilt_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_width_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_years_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_updated_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_min_perfect_days_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_min_indoor_days_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_min_hrs_below_5c_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_min_hrs_below_10c_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_min_hrs_below_0c_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_min_fair_days_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_min_dinner_outside_days_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_min_daytime_hrs_below_5c_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_min_daytime_hrs_below_10c_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_min_daytime_hrs_below_0c_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_min_daytime_hours_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_min_cloudy_hours_90pct_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_min_cloudy_hours_50pct_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_min_cloudy_hours_10pct_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_min_active_days_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_median_perfect_days_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_median_indoor_days_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_median_hrs_below_5c_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_median_hrs_below_10c_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_median_hrs_below_0c_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_median_fair_days_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_median_dinner_outside_days_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_median_daytime_hrs_below_5c_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_median_daytime_hrs_below_10c_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_median_daytime_hrs_below_0c_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_median_daytime_hours_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_median_cloudy_hours_90pct_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_median_cloudy_hours_50pct_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_median_cloudy_hours_10pct_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_median_active_days_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_max_perfect_days_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_max_indoor_days_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_max_hrs_below_5c_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_max_hrs_below_10c_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_max_hrs_below_0c_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_max_fair_days_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_max_dinner_outside_days_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_max_daytime_hrs_below_5c_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_max_daytime_hrs_below_10c_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_max_daytime_hrs_below_0c_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_max_daytime_hours_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_max_cloudy_hours_90pct_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_max_cloudy_hours_50pct_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_max_cloudy_hours_10pct_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_max_active_days_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_ll_uuid_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_avg_perfect_days_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_avg_indoor_days_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_avg_hrs_below_5c_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_avg_hrs_below_10c_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_avg_hrs_below_0c_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_avg_fair_days_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_avg_dinner_outside_days_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_avg_daytime_hrs_below_5c_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_avg_daytime_hrs_below_10c_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_avg_daytime_hrs_below_0c_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_avg_daytime_hours_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_avg_cloudy_hours_90pct_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_avg_cloudy_hours_50pct_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_avg_cloudy_hours_10pct_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_weather_summary_avg_active_days_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_viewshed_viewshed_w_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_viewshed_viewshed_sw_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_viewshed_viewshed_se_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_viewshed_viewshed_s_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_viewshed_viewshed_percentage_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_viewshed_viewshed_nw_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_viewshed_viewshed_ne_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_viewshed_viewshed_n_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_viewshed_viewshed_index_under_2km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_viewshed_viewshed_index_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_viewshed_viewshed_index_75km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_viewshed_viewshed_index_5km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_viewshed_viewshed_index_50km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_viewshed_viewshed_index_2km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_viewshed_viewshed_index_20km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_viewshed_viewshed_index_10km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_viewshed_viewshed_e_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_viewshed_longitude_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_viewshed_ll_uuid_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_viewshed_latitude_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_usps_vacancy_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_usps_vacancy_date_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_usedesc_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_usecode_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_urbanization_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_transno1_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_trailer_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_towncode_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_taxyear_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_taxamt_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_szip_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_sunit_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_subsurfown_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_subowntype_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_subdivision_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_subdivision_code_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_strustyl_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_strugrad_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_structstyle_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_structno_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_struct_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_strucnst_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_strubldg_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_state2_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_sqft_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_special_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_sourceurl_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_sourceref_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_sourcedate_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_sourceagent_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_section_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_sdatwebadr_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_scity_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_saleprice_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_saledate_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_saddsttyp_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_saddstsuf_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_saddstr_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_saddpref_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_saddno_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rzrealdat_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_road_road_km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_road_paved_km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_road_ll_uuid_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_road_highway_km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_road_high_traffic_km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_reviseddate_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_revisedate_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_resiuths_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_resityp_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_resident_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_resi2010_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_resi2000_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_resi1990_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_recrdareatx_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_recrdareano_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_recind_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rdi_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_surrounding_coverage_density_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_spring_count_5km_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_spring_count_50km_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_spring_count_1km_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_spring_count_10km_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_spring_count_100km_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_perfect_days_in_2022_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_perfect_days_in_2021_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_perfect_days_in_2020_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_perfect_days_in_2019_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_perfect_days_in_2018_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_perfect_days_in_2017_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_perfect_days_in_2016_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_perfect_days_in_2015_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_nearby_max_upload_speed_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_nearby_max_download_speed_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_military_count_50km_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_military_count_25km_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_military_count_200km_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_max_upload_speed_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_max_download_speed_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_ll_uuid_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_indoor_days_in_2022_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_indoor_days_in_2021_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_indoor_days_in_2020_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_indoor_days_in_2019_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_indoor_days_in_2018_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_indoor_days_in_2017_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_indoor_days_in_2016_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_indoor_days_in_2015_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2022_();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2021_();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2020_();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2019_();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2018_();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2017_();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2016_();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2015_();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2022();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2021();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2020();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2019();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2018();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2017();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2016();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2015();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2022_();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2021_();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2020_();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2019_();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2018_();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2017_();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2016_();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2015_();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_hardiness_temp_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_fair_days_in_2022_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_fair_days_in_2021_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_fair_days_in_2020_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_fair_days_in_2019_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_fair_days_in_2018_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_fair_days_in_2017_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_fair_days_in_2016_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_fair_days_in_2015_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_dinner_outside_days_in_2022_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_dinner_outside_days_in_2021_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_dinner_outside_days_in_2020_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_dinner_outside_days_in_2019_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_dinner_outside_days_in_2018_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_dinner_outside_days_in_2017_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_dinner_outside_days_in_2016_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_dinner_outside_days_in_2015_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_daytime_hrs_below_5_c_apparent_temperature_();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_daytime_hrs_below_10_c_apparent_temperature();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_daytime_hrs_below_0_c_apparent_temperature_();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_daytime_hours_in_2022_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_daytime_hours_in_2021_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_daytime_hours_in_2020_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_daytime_hours_in_2019_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_daytime_hours_in_2018_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_daytime_hours_in_2017_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_daytime_hours_in_2016_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_daytime_hours_in_2015_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_daytime_hours_above_90_pct_cloud_cover_in_2();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_daytime_hours_above_80_pct_cloud_cover_in_2();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_daytime_hours_above_70_pct_cloud_cover_in_2();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_daytime_hours_above_60_pct_cloud_cover_in_2();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_daytime_hours_above_50_pct_cloud_cover_in_2();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_daytime_hours_above_40_pct_cloud_cover_in_2();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_daytime_hours_above_30_pct_cloud_cover_in_2();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_daytime_hours_above_20_pct_cloud_cover_in_2();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_daytime_hours_above_10_pct_cloud_cover_in_2();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_closest_spring_distance_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_closest_provider_distance_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_closest_military_distance_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_avg_perfect_days_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_avg_indoor_days_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_avg_hrs_below_5c_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_avg_hrs_below_10c_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_avg_hrs_below_0c_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_avg_fair_days_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_avg_dinner_outside_days_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_avg_daytime_hrs_below_5c_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_avg_daytime_hrs_below_10c_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_avg_daytime_hrs_below_0c_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_avg_cloudy_hours_90pct_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_avg_cloudy_hours_50pct_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_avg_cloudy_hours_10pct_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_avg_active_days_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_active_days_in_2022_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_active_days_in_2021_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_active_days_in_2020_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_active_days_in_2019_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_active_days_in_2018_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_active_days_in_2017_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_active_days_in_2016_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_rank_active_days_in_2015_rank_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_qoz_tract_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_qoz_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_ptype_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_polyid_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_plndevdat_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_plat_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_pfuw_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_pfus_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_pfsu_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_pfsp_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_pflw_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_pfih_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_pfic_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_permittyp_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_path_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_parvaltype_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_parval_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_parcelnumb_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_page_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_padus_public_access_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_owntype_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_ownlast_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_ownfrst_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_owner_index_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_owner_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_owner4_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_owner3_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_owner2_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_other_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_original_address_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_ooi_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_ogc_fid_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_numunits_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_numstories_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_nprctstdat_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_nprcluom_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_nprcarea_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_neighborhood_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_nature_nature_updated_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_nature_nature_score_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_nature_ll_uuid_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_nature_leaf_rating_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_namekey_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_multistruct_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_mortgag1_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_meta_tribal_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_meta_public_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_meta_ll_uuid_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_map_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_mailadd_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_mail_zip_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_mail_urbanization_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_mail_unit_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_mail_state2_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_mail_country_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_mail_city_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_mail_addsttyp_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_mail_addstsuf_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_mail_addstr_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_mail_address2_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_mail_addpref_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_mail_addno_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_luom_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_lot_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_lon_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_location_name_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_ll_uuid_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_ll_updated_at_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_ll_stable_id_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_ll_gissqft_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_ll_gisacre_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_ll_bldg_footprint_sqft_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_ll_bldg_count_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_legaldesc_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_lbcs_structure_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_lbcs_structure_desc_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_lbcs_site_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_lbcs_site_desc_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_lbcs_ownership_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_lbcs_ownership_desc_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_lbcs_function_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_lbcs_function_desc_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_lbcs_activity_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_lbcs_activity_desc_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_lat_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_lastinsp_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_lastassd_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_landval_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_jurscode_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_internet_surrounding_providers_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_internet_surrounding_coverage_density_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_internet_nearby_max_upload_speed_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_internet_nearby_max_download_speed_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_internet_max_upload_speed_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_internet_max_download_speed_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_internet_low_latency_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_internet_ll_uuid_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_internet_closest_provider_h3_res8_id_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_internet_closest_provider_distance_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_internet_broadband_updated_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_improvval_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_homqldat_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_homqlcod_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_homestead_exemption_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_grntnam1_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_grid_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_gr1libr1_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_gr1folo1_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_gr1clrk1v_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_goz_tract_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_goz_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_gisacre_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_geometry_ll_uuid_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_geometry_coordinates_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_geoid_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_geogcode_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_fcmacode_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_exclass_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_entzndat_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_entznassm_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_elevation_p90_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_elevation_p75_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_elevation_p50_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_elevation_p25_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_elevation_p10_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_elevation_min_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_elevation_median_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_elevation_max_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_elevation_ll_uuid_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_dr1liber_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_dr1folio_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_dr1clerk_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_dpv_type_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_dpv_status_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_dpv_notes_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_dpv_codes_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_detailed_subdivision_code_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_desctown_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_descgrad_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_descexcl_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_desccnst_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_descciuse_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_descbldg_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_depth_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_water_updated_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_water_density_5km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_water_density_50km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_water_density_25km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_water_density_1km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_water_density_10km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_water_count_5km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_water_count_50km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_water_count_25km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_water_count_1km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_water_count_10km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_water_5km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_water_50km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_water_25km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_water_1km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_water_10km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_spring_updated_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_spring_count_5km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_spring_count_50km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_spring_count_25km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_spring_count_1km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_spring_count_10km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_spring_count_100km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_spring_5km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_spring_50km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_spring_25km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_spring_1km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_spring_10km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_spring_100km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_religious_updated_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_religion_density_5km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_religion_density_50km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_religion_density_25km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_religion_density_1km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_religion_density_150km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_religion_density_10km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_religion_density_100km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_religion_count_5km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_religion_count_50km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_religion_count_25km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_religion_count_1km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_religion_count_150km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_religion_count_10km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_religion_count_100km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_religion_5km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_religion_50km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_religion_25km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_religion_1km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_religion_150km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_religion_10km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_religion_100km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_public_land_updated_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_public_land_density_5km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_public_land_density_25km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_public_land_density_1km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_public_land_density_10km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_public_land_count_5km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_public_land_count_25km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_public_land_count_1km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_public_land_count_10km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_public_land_5km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_public_land_25km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_public_land_1km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_public_land_10km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_pollution_updated_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_pollution_density_5km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_pollution_density_25km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_pollution_density_1km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_pollution_density_10km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_pollution_count_5km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_pollution_count_25km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_pollution_count_1km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_pollution_count_10km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_pollution_5km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_pollution_25km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_pollution_1km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_pollution_10km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_parcels_updated_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_parcels_density_5km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_parcels_density_50km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_parcels_density_25km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_parcels_density_1km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_parcels_density_10km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_parcels_count_5km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_parcels_count_50km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_parcels_count_25km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_parcels_count_1km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_parcels_count_10km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_natural_updated_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_natural_density_5km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_natural_density_25km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_natural_density_1km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_natural_density_10km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_natural_count_5km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_natural_count_25km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_natural_count_1km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_natural_count_10km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_natural_5km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_natural_25km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_natural_1km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_natural_10km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_military_updated_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_military_count_5km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_military_count_50km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_military_count_25km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_military_count_200km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_military_count_1km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_military_count_150km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_military_count_10km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_military_count_100km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_military_5km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_military_50km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_military_25km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_military_200km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_military_1km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_military_150km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_military_10km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_military_100km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_ll_uuid_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_library_updated_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_library_count_5km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_library_count_50km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_library_count_25km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_library_count_1km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_library_count_10km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_library_5km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_library_50km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_library_25km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_library_1km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_library_10km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_healthcare_updated_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_healthcare_count_5km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_healthcare_count_50km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_healthcare_count_25km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_healthcare_count_200km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_healthcare_count_1km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_healthcare_count_150km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_healthcare_count_10km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_healthcare_count_100km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_healthcare_5km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_healthcare_50km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_healthcare_25km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_healthcare_200km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_healthcare_1km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_healthcare_150km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_healthcare_10km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_healthcare_100km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_geological_features_updated_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_geological_features_count_5km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_geological_features_count_25km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_geological_features_count_1km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_geological_features_count_10km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_geological_features_5km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_geological_features_25km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_geological_features_1km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_geological_features_10km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_closest_water_tags_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_closest_water_name_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_closest_water_items_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_closest_water_distance_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_closest_spring_tags_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_closest_spring_name_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_closest_spring_items_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_closest_spring_distance_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_closest_religious_tags_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_closest_religious_name_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_closest_religious_items_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_closest_religious_distance_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_closest_public_land_tags_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_closest_public_land_name_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_closest_public_land_items_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_closest_public_land_distance_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_closest_pollution_tags_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_closest_pollution_name_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_closest_pollution_items_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_closest_pollution_distance_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_closest_natural_tags_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_closest_natural_name_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_closest_natural_items_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_closest_natural_distance_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_closest_military_tags_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_closest_military_name_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_closest_military_items_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_closest_military_distance_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_closest_library_tags_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_closest_library_name_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_closest_library_items_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_closest_library_distance_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_closest_healthcare_tags_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_closest_healthcare_name_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_closest_healthcare_items_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_closest_healthcare_distance_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_closest_geological_features_tags_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_closest_geological_features_name_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_closest_geological_features_items_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_density_closest_geological_features_distance_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_crtarcod_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_county_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_convey1_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_coastline_ll_uuid_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_coastline_distance_km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_ciuse_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_city_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_census_tract_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_census_blockgroup_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_census_block_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_cdl_raw_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_cdl_majority_percent_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_cdl_majority_category_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_cdl_date_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_cass_errorno_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_careof_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_book_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_block_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_assessor_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_aprtment_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_airport_ll_uuid_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_airport_distance_km_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_airport_abbrev_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_agval_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_agriculture_plant_hardiness_updated_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_agriculture_ll_uuid_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_agriculture_hardiness_zone_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_agriculture_hardiness_temp_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_agfndluom_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_agfndarea_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_addrtyp_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_address_source_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_address_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_address2_fn();
DROP FUNCTION IF EXISTS public.insert_parcels_acctid_county_stripped_fn();
DROP EXTENSION IF EXISTS "uuid-ossp";
DROP EXTENSION IF EXISTS h3_postgis;
DROP EXTENSION IF EXISTS postgis_raster;
DROP EXTENSION IF EXISTS postgis;
DROP EXTENSION IF EXISTS h3;
DROP SCHEMA IF EXISTS parcels_production;
--
-- Name: parcels_production; Type: SCHEMA; Schema: -; Owner: -
--

CREATE SCHEMA parcels_production;


--
-- Name: h3; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS h3 WITH SCHEMA public;


--
-- Name: EXTENSION h3; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON EXTENSION h3 IS 'H3 bindings for PostgreSQL';


--
-- Name: postgis; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS postgis WITH SCHEMA parcels_production;


--
-- Name: EXTENSION postgis; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON EXTENSION postgis IS 'PostGIS geometry and geography spatial types and functions';


--
-- Name: postgis_raster; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS postgis_raster WITH SCHEMA parcels_production;


--
-- Name: EXTENSION postgis_raster; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON EXTENSION postgis_raster IS 'PostGIS raster types and functions';


--
-- Name: h3_postgis; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS h3_postgis WITH SCHEMA public;


--
-- Name: EXTENSION h3_postgis; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON EXTENSION h3_postgis IS 'H3 PostGIS integration';


--
-- Name: uuid-ossp; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA public;


--
-- Name: EXTENSION "uuid-ossp"; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON EXTENSION "uuid-ossp" IS 'generate universally unique identifiers (UUIDs)';


--
-- Name: insert_parcels_acctid_county_stripped_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_acctid_county_stripped_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'acctid_county_stripped';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_address2_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_address2_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'address2';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_address_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_address_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'address';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_address_source_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_address_source_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'address_source';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_addrtyp_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_addrtyp_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'addrtyp';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_agfndarea_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_agfndarea_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'agfndarea';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_agfndluom_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_agfndluom_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'agfndluom';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_agriculture_hardiness_temp_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_agriculture_hardiness_temp_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hardiness_temp';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_agriculture_hardiness_zone_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_agriculture_hardiness_zone_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hardiness_zone';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_agriculture_ll_uuid_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_agriculture_ll_uuid_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'll_uuid';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_agriculture_plant_hardiness_updated_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_agriculture_plant_hardiness_updated_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'plant_hardiness_updated';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_agval_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_agval_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'agval';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_airport_abbrev_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_airport_abbrev_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'abbrev';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_airport_distance_km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_airport_distance_km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'distance_km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_airport_ll_uuid_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_airport_ll_uuid_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'll_uuid';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_aprtment_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_aprtment_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'aprtment';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_assessor_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_assessor_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'assessor';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_block_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_block_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'block';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_book_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_book_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'book';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_careof_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_careof_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'careof';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_cass_errorno_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_cass_errorno_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'cass_errorno';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_cdl_date_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_cdl_date_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'cdl_date';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_cdl_majority_category_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_cdl_majority_category_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'cdl_majority_category';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_cdl_majority_percent_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_cdl_majority_percent_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'cdl_majority_percent';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_cdl_raw_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_cdl_raw_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'cdl_raw';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_census_block_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_census_block_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'census_block';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_census_blockgroup_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_census_blockgroup_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'census_blockgroup';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_census_tract_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_census_tract_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'census_tract';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_city_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_city_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'city';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_ciuse_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_ciuse_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'ciuse';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_coastline_distance_km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_coastline_distance_km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'distance_km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_coastline_ll_uuid_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_coastline_ll_uuid_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'll_uuid';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_convey1_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_convey1_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'convey1';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_county_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_county_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'county';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_crtarcod_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_crtarcod_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'crtarcod';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_closest_geological_features_distance_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_closest_geological_features_distance_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_geological_features_distance';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_closest_geological_features_items_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_closest_geological_features_items_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_geological_features_items';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_closest_geological_features_name_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_closest_geological_features_name_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_geological_features_name';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_closest_geological_features_tags_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_closest_geological_features_tags_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_geological_features_tags';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_closest_healthcare_distance_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_closest_healthcare_distance_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_healthcare_distance';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_closest_healthcare_items_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_closest_healthcare_items_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_healthcare_items';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_closest_healthcare_name_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_closest_healthcare_name_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_healthcare_name';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_closest_healthcare_tags_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_closest_healthcare_tags_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_healthcare_tags';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_closest_library_distance_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_closest_library_distance_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_library_distance';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_closest_library_items_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_closest_library_items_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_library_items';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_closest_library_name_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_closest_library_name_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_library_name';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_closest_library_tags_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_closest_library_tags_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_library_tags';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_closest_military_distance_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_closest_military_distance_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_military_distance';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_closest_military_items_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_closest_military_items_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_military_items';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_closest_military_name_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_closest_military_name_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_military_name';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_closest_military_tags_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_closest_military_tags_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_military_tags';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_closest_natural_distance_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_closest_natural_distance_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_natural_distance';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_closest_natural_items_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_closest_natural_items_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_natural_items';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_closest_natural_name_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_closest_natural_name_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_natural_name';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_closest_natural_tags_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_closest_natural_tags_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_natural_tags';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_closest_pollution_distance_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_closest_pollution_distance_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_pollution_distance';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_closest_pollution_items_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_closest_pollution_items_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_pollution_items';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_closest_pollution_name_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_closest_pollution_name_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_pollution_name';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_closest_pollution_tags_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_closest_pollution_tags_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_pollution_tags';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_closest_public_land_distance_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_closest_public_land_distance_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_public_land_distance';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_closest_public_land_items_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_closest_public_land_items_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_public_land_items';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_closest_public_land_name_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_closest_public_land_name_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_public_land_name';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_closest_public_land_tags_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_closest_public_land_tags_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_public_land_tags';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_closest_religious_distance_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_closest_religious_distance_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_religious_distance';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_closest_religious_items_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_closest_religious_items_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_religious_items';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_closest_religious_name_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_closest_religious_name_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_religious_name';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_closest_religious_tags_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_closest_religious_tags_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_religious_tags';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_closest_spring_distance_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_closest_spring_distance_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_spring_distance';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_closest_spring_items_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_closest_spring_items_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_spring_items';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_closest_spring_name_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_closest_spring_name_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_spring_name';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_closest_spring_tags_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_closest_spring_tags_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_spring_tags';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_closest_water_distance_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_closest_water_distance_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_water_distance';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_closest_water_items_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_closest_water_items_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_water_items';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_closest_water_name_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_closest_water_name_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_water_name';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_closest_water_tags_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_closest_water_tags_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_water_tags';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_geological_features_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_geological_features_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'geological_features_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_geological_features_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_geological_features_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'geological_features_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_geological_features_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_geological_features_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'geological_features_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_geological_features_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_geological_features_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'geological_features_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_geological_features_count_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_geological_features_count_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'geological_features_count_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_geological_features_count_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_geological_features_count_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'geological_features_count_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_geological_features_count_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_geological_features_count_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'geological_features_count_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_geological_features_count_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_geological_features_count_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'geological_features_count_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_geological_features_updated_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_geological_features_updated_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'geological_features_updated';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_healthcare_100km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_healthcare_100km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'healthcare_100km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_healthcare_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_healthcare_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'healthcare_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_healthcare_150km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_healthcare_150km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'healthcare_150km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_healthcare_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_healthcare_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'healthcare_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_healthcare_200km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_healthcare_200km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'healthcare_200km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_healthcare_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_healthcare_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'healthcare_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_healthcare_50km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_healthcare_50km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'healthcare_50km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_healthcare_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_healthcare_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'healthcare_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_healthcare_count_100km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_healthcare_count_100km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'healthcare_count_100km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_healthcare_count_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_healthcare_count_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'healthcare_count_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_healthcare_count_150km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_healthcare_count_150km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'healthcare_count_150km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_healthcare_count_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_healthcare_count_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'healthcare_count_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_healthcare_count_200km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_healthcare_count_200km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'healthcare_count_200km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_healthcare_count_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_healthcare_count_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'healthcare_count_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_healthcare_count_50km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_healthcare_count_50km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'healthcare_count_50km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_healthcare_count_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_healthcare_count_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'healthcare_count_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_healthcare_updated_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_healthcare_updated_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'healthcare_updated';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_library_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_library_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'library_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_library_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_library_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'library_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_library_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_library_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'library_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_library_50km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_library_50km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'library_50km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_library_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_library_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'library_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_library_count_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_library_count_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'library_count_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_library_count_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_library_count_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'library_count_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_library_count_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_library_count_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'library_count_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_library_count_50km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_library_count_50km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'library_count_50km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_library_count_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_library_count_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'library_count_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_library_updated_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_library_updated_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'library_updated';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_ll_uuid_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_ll_uuid_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'll_uuid';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_military_100km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_military_100km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'military_100km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_military_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_military_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'military_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_military_150km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_military_150km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'military_150km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_military_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_military_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'military_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_military_200km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_military_200km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'military_200km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_military_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_military_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'military_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_military_50km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_military_50km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'military_50km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_military_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_military_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'military_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_military_count_100km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_military_count_100km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'military_count_100km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_military_count_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_military_count_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'military_count_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_military_count_150km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_military_count_150km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'military_count_150km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_military_count_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_military_count_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'military_count_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_military_count_200km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_military_count_200km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'military_count_200km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_military_count_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_military_count_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'military_count_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_military_count_50km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_military_count_50km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'military_count_50km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_military_count_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_military_count_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'military_count_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_military_updated_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_military_updated_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'military_updated';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_natural_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_natural_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'natural_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_natural_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_natural_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'natural_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_natural_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_natural_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'natural_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_natural_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_natural_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'natural_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_natural_count_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_natural_count_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'natural_count_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_natural_count_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_natural_count_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'natural_count_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_natural_count_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_natural_count_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'natural_count_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_natural_count_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_natural_count_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'natural_count_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_natural_density_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_natural_density_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'natural_density_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_natural_density_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_natural_density_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'natural_density_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_natural_density_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_natural_density_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'natural_density_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_natural_density_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_natural_density_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'natural_density_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_natural_updated_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_natural_updated_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'natural_updated';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_parcels_count_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_parcels_count_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'parcels_count_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_parcels_count_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_parcels_count_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'parcels_count_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_parcels_count_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_parcels_count_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'parcels_count_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_parcels_count_50km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_parcels_count_50km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'parcels_count_50km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_parcels_count_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_parcels_count_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'parcels_count_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_parcels_density_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_parcels_density_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'parcels_density_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_parcels_density_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_parcels_density_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'parcels_density_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_parcels_density_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_parcels_density_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'parcels_density_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_parcels_density_50km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_parcels_density_50km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'parcels_density_50km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_parcels_density_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_parcels_density_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'parcels_density_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_parcels_updated_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_parcels_updated_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'parcels_updated';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_pollution_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_pollution_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'pollution_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_pollution_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_pollution_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'pollution_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_pollution_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_pollution_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'pollution_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_pollution_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_pollution_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'pollution_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_pollution_count_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_pollution_count_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'pollution_count_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_pollution_count_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_pollution_count_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'pollution_count_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_pollution_count_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_pollution_count_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'pollution_count_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_pollution_count_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_pollution_count_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'pollution_count_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_pollution_density_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_pollution_density_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'pollution_density_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_pollution_density_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_pollution_density_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'pollution_density_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_pollution_density_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_pollution_density_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'pollution_density_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_pollution_density_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_pollution_density_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'pollution_density_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_pollution_updated_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_pollution_updated_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'pollution_updated';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_public_land_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_public_land_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'public_land_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_public_land_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_public_land_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'public_land_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_public_land_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_public_land_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'public_land_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_public_land_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_public_land_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'public_land_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_public_land_count_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_public_land_count_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'public_land_count_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_public_land_count_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_public_land_count_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'public_land_count_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_public_land_count_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_public_land_count_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'public_land_count_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_public_land_count_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_public_land_count_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'public_land_count_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_public_land_density_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_public_land_density_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'public_land_density_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_public_land_density_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_public_land_density_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'public_land_density_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_public_land_density_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_public_land_density_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'public_land_density_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_public_land_density_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_public_land_density_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'public_land_density_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_public_land_updated_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_public_land_updated_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'public_land_updated';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_religion_100km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_religion_100km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_100km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_religion_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_religion_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_religion_150km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_religion_150km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_150km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_religion_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_religion_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_religion_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_religion_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_religion_50km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_religion_50km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_50km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_religion_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_religion_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_religion_count_100km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_religion_count_100km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_count_100km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_religion_count_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_religion_count_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_count_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_religion_count_150km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_religion_count_150km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_count_150km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_religion_count_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_religion_count_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_count_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_religion_count_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_religion_count_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_count_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_religion_count_50km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_religion_count_50km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_count_50km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_religion_count_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_religion_count_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_count_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_religion_density_100km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_religion_density_100km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_density_100km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_religion_density_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_religion_density_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_density_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_religion_density_150km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_religion_density_150km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_density_150km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_religion_density_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_religion_density_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_density_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_religion_density_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_religion_density_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_density_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_religion_density_50km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_religion_density_50km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_density_50km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_religion_density_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_religion_density_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_density_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_religious_updated_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_religious_updated_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religious_updated';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_spring_100km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_spring_100km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'spring_100km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_spring_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_spring_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'spring_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_spring_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_spring_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'spring_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_spring_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_spring_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'spring_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_spring_50km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_spring_50km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'spring_50km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_spring_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_spring_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'spring_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_spring_count_100km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_spring_count_100km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'spring_count_100km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_spring_count_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_spring_count_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'spring_count_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_spring_count_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_spring_count_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'spring_count_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_spring_count_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_spring_count_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'spring_count_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_spring_count_50km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_spring_count_50km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'spring_count_50km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_spring_count_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_spring_count_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'spring_count_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_spring_updated_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_spring_updated_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'spring_updated';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_water_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_water_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'water_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_water_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_water_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'water_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_water_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_water_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'water_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_water_50km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_water_50km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'water_50km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_water_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_water_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'water_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_water_count_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_water_count_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'water_count_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_water_count_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_water_count_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'water_count_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_water_count_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_water_count_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'water_count_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_water_count_50km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_water_count_50km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'water_count_50km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_water_count_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_water_count_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'water_count_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_water_density_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_water_density_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'water_density_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_water_density_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_water_density_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'water_density_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_water_density_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_water_density_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'water_density_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_water_density_50km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_water_density_50km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'water_density_50km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_water_density_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_water_density_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'water_density_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_density_water_updated_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_density_water_updated_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'water_updated';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_depth_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_depth_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'depth';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_descbldg_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_descbldg_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'descbldg';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_descciuse_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_descciuse_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'descciuse';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_desccnst_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_desccnst_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'desccnst';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_descexcl_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_descexcl_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'descexcl';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_descgrad_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_descgrad_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'descgrad';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_desctown_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_desctown_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'desctown';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_detailed_subdivision_code_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_detailed_subdivision_code_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'detailed_subdivision_code';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_dpv_codes_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_dpv_codes_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'dpv_codes';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_dpv_notes_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_dpv_notes_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'dpv_notes';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_dpv_status_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_dpv_status_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'dpv_status';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_dpv_type_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_dpv_type_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'dpv_type';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_dr1clerk_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_dr1clerk_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'dr1clerk';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_dr1folio_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_dr1folio_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'dr1folio';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_dr1liber_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_dr1liber_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'dr1liber';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_elevation_ll_uuid_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_elevation_ll_uuid_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'll_uuid';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_elevation_max_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_elevation_max_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'max';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_elevation_median_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_elevation_median_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'median';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_elevation_min_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_elevation_min_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'min';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_elevation_p10_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_elevation_p10_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'p10';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_elevation_p25_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_elevation_p25_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'p25';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_elevation_p50_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_elevation_p50_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'p50';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_elevation_p75_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_elevation_p75_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'p75';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_elevation_p90_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_elevation_p90_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'p90';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_entznassm_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_entznassm_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'entznassm';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_entzndat_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_entzndat_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'entzndat';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_exclass_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_exclass_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'exclass';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_fcmacode_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_fcmacode_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'fcmacode';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_geogcode_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_geogcode_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'geogcode';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_geoid_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_geoid_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'geoid';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_geometry_coordinates_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_geometry_coordinates_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'coordinates';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_geometry_ll_uuid_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_geometry_ll_uuid_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'll_uuid';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_gisacre_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_gisacre_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'gisacre';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_goz_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_goz_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'goz';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_goz_tract_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_goz_tract_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'goz_tract';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_gr1clrk1v_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_gr1clrk1v_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'gr1clrk1v';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_gr1folo1_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_gr1folo1_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'gr1folo1';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_gr1libr1_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_gr1libr1_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'gr1libr1';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_grid_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_grid_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'grid';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_grntnam1_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_grntnam1_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'grntnam1';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_homestead_exemption_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_homestead_exemption_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'homestead_exemption';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_homqlcod_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_homqlcod_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'homqlcod';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_homqldat_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_homqldat_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'homqldat';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_improvval_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_improvval_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'improvval';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_internet_broadband_updated_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_internet_broadband_updated_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'broadband_updated';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_internet_closest_provider_distance_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_internet_closest_provider_distance_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_provider_distance';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_internet_closest_provider_h3_res8_id_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_internet_closest_provider_h3_res8_id_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_provider_h3_res8_id';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_internet_ll_uuid_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_internet_ll_uuid_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'll_uuid';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_internet_low_latency_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_internet_low_latency_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'low_latency';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_internet_max_download_speed_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_internet_max_download_speed_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'max_download_speed';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_internet_max_upload_speed_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_internet_max_upload_speed_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'max_upload_speed';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_internet_nearby_max_download_speed_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_internet_nearby_max_download_speed_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'nearby_max_download_speed';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_internet_nearby_max_upload_speed_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_internet_nearby_max_upload_speed_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'nearby_max_upload_speed';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_internet_surrounding_coverage_density_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_internet_surrounding_coverage_density_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'surrounding_coverage_density';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_internet_surrounding_providers_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_internet_surrounding_providers_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'surrounding_providers';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_jurscode_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_jurscode_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'jurscode';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_landval_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_landval_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'landval';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_lastassd_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_lastassd_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'lastassd';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_lastinsp_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_lastinsp_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'lastinsp';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_lat_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_lat_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'lat';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_lbcs_activity_desc_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_lbcs_activity_desc_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'lbcs_activity_desc';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_lbcs_activity_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_lbcs_activity_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'lbcs_activity';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_lbcs_function_desc_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_lbcs_function_desc_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'lbcs_function_desc';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_lbcs_function_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_lbcs_function_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'lbcs_function';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_lbcs_ownership_desc_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_lbcs_ownership_desc_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'lbcs_ownership_desc';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_lbcs_ownership_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_lbcs_ownership_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'lbcs_ownership';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_lbcs_site_desc_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_lbcs_site_desc_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'lbcs_site_desc';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_lbcs_site_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_lbcs_site_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'lbcs_site';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_lbcs_structure_desc_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_lbcs_structure_desc_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'lbcs_structure_desc';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_lbcs_structure_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_lbcs_structure_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'lbcs_structure';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_legaldesc_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_legaldesc_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'legaldesc';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_ll_bldg_count_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_ll_bldg_count_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'll_bldg_count';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_ll_bldg_footprint_sqft_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_ll_bldg_footprint_sqft_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'll_bldg_footprint_sqft';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_ll_gisacre_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_ll_gisacre_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'll_gisacre';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_ll_gissqft_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_ll_gissqft_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'll_gissqft';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_ll_stable_id_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_ll_stable_id_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'll_stable_id';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_ll_updated_at_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_ll_updated_at_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'll_updated_at';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_ll_uuid_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_ll_uuid_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'll_uuid';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_location_name_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_location_name_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'location_name';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_lon_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_lon_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'lon';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_lot_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_lot_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'lot';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_luom_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_luom_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'luom';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_mail_addno_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_mail_addno_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'mail_addno';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_mail_addpref_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_mail_addpref_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'mail_addpref';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_mail_address2_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_mail_address2_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'mail_address2';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_mail_addstr_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_mail_addstr_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'mail_addstr';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_mail_addstsuf_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_mail_addstsuf_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'mail_addstsuf';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_mail_addsttyp_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_mail_addsttyp_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'mail_addsttyp';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_mail_city_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_mail_city_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'mail_city';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_mail_country_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_mail_country_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'mail_country';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_mail_state2_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_mail_state2_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'mail_state2';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_mail_unit_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_mail_unit_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'mail_unit';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_mail_urbanization_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_mail_urbanization_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'mail_urbanization';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_mail_zip_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_mail_zip_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'mail_zip';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_mailadd_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_mailadd_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'mailadd';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_map_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_map_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'map';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_meta_ll_uuid_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_meta_ll_uuid_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'll_uuid';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_meta_public_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_meta_public_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'public';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_meta_tribal_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_meta_tribal_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'tribal';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_mortgag1_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_mortgag1_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'mortgag1';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_multistruct_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_multistruct_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'multistruct';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_namekey_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_namekey_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'namekey';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_nature_leaf_rating_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_nature_leaf_rating_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'leaf_rating';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_nature_ll_uuid_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_nature_ll_uuid_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'll_uuid';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_nature_nature_score_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_nature_nature_score_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'nature_score';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_nature_nature_updated_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_nature_nature_updated_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'nature_updated';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_neighborhood_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_neighborhood_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'neighborhood';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_nprcarea_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_nprcarea_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'nprcarea';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_nprcluom_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_nprcluom_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'nprcluom';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_nprctstdat_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_nprctstdat_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'nprctstdat';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_numstories_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_numstories_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'numstories';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_numunits_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_numunits_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'numunits';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_ogc_fid_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_ogc_fid_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'ogc_fid';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_ooi_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_ooi_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'ooi';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_original_address_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_original_address_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'original_address';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_other_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_other_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'other';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_owner2_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_owner2_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'owner2';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_owner3_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_owner3_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'owner3';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_owner4_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_owner4_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'owner4';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_owner_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_owner_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'owner';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_owner_index_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_owner_index_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'owner_index';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_ownfrst_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_ownfrst_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'ownfrst';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_ownlast_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_ownlast_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'ownlast';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_owntype_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_owntype_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'owntype';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_padus_public_access_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_padus_public_access_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'padus_public_access';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_page_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_page_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'page';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_parcelnumb_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_parcelnumb_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'parcelnumb';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_parval_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_parval_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'parval';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_parvaltype_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_parvaltype_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'parvaltype';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_path_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_path_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'path';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_permittyp_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_permittyp_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'permittyp';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_pfic_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_pfic_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'pfic';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_pfih_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_pfih_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'pfih';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_pflw_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_pflw_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'pflw';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_pfsp_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_pfsp_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'pfsp';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_pfsu_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_pfsu_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'pfsu';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_pfus_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_pfus_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'pfus';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_pfuw_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_pfuw_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'pfuw';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_plat_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_plat_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'plat';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_plndevdat_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_plndevdat_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'plndevdat';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_polyid_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_polyid_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'polyid';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_ptype_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_ptype_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'ptype';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_qoz_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_qoz_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'qoz';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_qoz_tract_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_qoz_tract_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'qoz_tract';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_active_days_in_2015_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_active_days_in_2015_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'active_days_in_2015_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_active_days_in_2016_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_active_days_in_2016_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'active_days_in_2016_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_active_days_in_2017_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_active_days_in_2017_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'active_days_in_2017_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_active_days_in_2018_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_active_days_in_2018_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'active_days_in_2018_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_active_days_in_2019_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_active_days_in_2019_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'active_days_in_2019_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_active_days_in_2020_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_active_days_in_2020_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'active_days_in_2020_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_active_days_in_2021_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_active_days_in_2021_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'active_days_in_2021_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_active_days_in_2022_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_active_days_in_2022_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'active_days_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_avg_active_days_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_avg_active_days_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_active_days_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_avg_cloudy_hours_10pct_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_avg_cloudy_hours_10pct_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_cloudy_hours_10pct_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_avg_cloudy_hours_50pct_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_avg_cloudy_hours_50pct_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_cloudy_hours_50pct_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_avg_cloudy_hours_90pct_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_avg_cloudy_hours_90pct_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_cloudy_hours_90pct_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_avg_daytime_hrs_below_0c_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_avg_daytime_hrs_below_0c_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_daytime_hrs_below_0c_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_avg_daytime_hrs_below_10c_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_avg_daytime_hrs_below_10c_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_daytime_hrs_below_10c_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_avg_daytime_hrs_below_5c_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_avg_daytime_hrs_below_5c_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_daytime_hrs_below_5c_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_avg_dinner_outside_days_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_avg_dinner_outside_days_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_dinner_outside_days_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_avg_fair_days_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_avg_fair_days_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_fair_days_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_avg_hrs_below_0c_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_avg_hrs_below_0c_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_hrs_below_0c_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_avg_hrs_below_10c_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_avg_hrs_below_10c_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_hrs_below_10c_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_avg_hrs_below_5c_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_avg_hrs_below_5c_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_hrs_below_5c_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_avg_indoor_days_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_avg_indoor_days_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_indoor_days_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_avg_perfect_days_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_avg_perfect_days_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_perfect_days_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_closest_military_distance_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_closest_military_distance_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_military_distance_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_closest_provider_distance_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_closest_provider_distance_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_provider_distance_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_closest_spring_distance_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_closest_spring_distance_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_spring_distance_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_daytime_hours_above_10_pct_cloud_cover_in_2(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_daytime_hours_above_10_pct_cloud_cover_in_2() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'daytime_hours_above_10_pct_cloud_cover_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_daytime_hours_above_20_pct_cloud_cover_in_2(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_daytime_hours_above_20_pct_cloud_cover_in_2() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'daytime_hours_above_20_pct_cloud_cover_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_daytime_hours_above_30_pct_cloud_cover_in_2(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_daytime_hours_above_30_pct_cloud_cover_in_2() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'daytime_hours_above_30_pct_cloud_cover_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_daytime_hours_above_40_pct_cloud_cover_in_2(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_daytime_hours_above_40_pct_cloud_cover_in_2() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'daytime_hours_above_40_pct_cloud_cover_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_daytime_hours_above_50_pct_cloud_cover_in_2(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_daytime_hours_above_50_pct_cloud_cover_in_2() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'daytime_hours_above_50_pct_cloud_cover_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_daytime_hours_above_60_pct_cloud_cover_in_2(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_daytime_hours_above_60_pct_cloud_cover_in_2() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'daytime_hours_above_60_pct_cloud_cover_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_daytime_hours_above_70_pct_cloud_cover_in_2(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_daytime_hours_above_70_pct_cloud_cover_in_2() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'daytime_hours_above_70_pct_cloud_cover_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_daytime_hours_above_80_pct_cloud_cover_in_2(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_daytime_hours_above_80_pct_cloud_cover_in_2() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'daytime_hours_above_80_pct_cloud_cover_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_daytime_hours_above_90_pct_cloud_cover_in_2(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_daytime_hours_above_90_pct_cloud_cover_in_2() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'daytime_hours_above_90_pct_cloud_cover_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_daytime_hours_in_2015_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_daytime_hours_in_2015_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'daytime_hours_in_2015_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_daytime_hours_in_2016_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_daytime_hours_in_2016_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'daytime_hours_in_2016_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_daytime_hours_in_2017_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_daytime_hours_in_2017_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'daytime_hours_in_2017_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_daytime_hours_in_2018_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_daytime_hours_in_2018_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'daytime_hours_in_2018_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_daytime_hours_in_2019_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_daytime_hours_in_2019_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'daytime_hours_in_2019_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_daytime_hours_in_2020_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_daytime_hours_in_2020_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'daytime_hours_in_2020_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_daytime_hours_in_2021_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_daytime_hours_in_2021_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'daytime_hours_in_2021_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_daytime_hours_in_2022_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_daytime_hours_in_2022_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'daytime_hours_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_daytime_hrs_below_0_c_apparent_temperature_(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_daytime_hrs_below_0_c_apparent_temperature_() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'daytime_hrs_below_0_c_apparent_temperature_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_daytime_hrs_below_10_c_apparent_temperature(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_daytime_hrs_below_10_c_apparent_temperature() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'daytime_hrs_below_10_c_apparent_temperature_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_daytime_hrs_below_5_c_apparent_temperature_(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_daytime_hrs_below_5_c_apparent_temperature_() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'daytime_hrs_below_5_c_apparent_temperature_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_dinner_outside_days_in_2015_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_dinner_outside_days_in_2015_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'dinner_outside_days_in_2015_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_dinner_outside_days_in_2016_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_dinner_outside_days_in_2016_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'dinner_outside_days_in_2016_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_dinner_outside_days_in_2017_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_dinner_outside_days_in_2017_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'dinner_outside_days_in_2017_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_dinner_outside_days_in_2018_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_dinner_outside_days_in_2018_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'dinner_outside_days_in_2018_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_dinner_outside_days_in_2019_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_dinner_outside_days_in_2019_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'dinner_outside_days_in_2019_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_dinner_outside_days_in_2020_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_dinner_outside_days_in_2020_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'dinner_outside_days_in_2020_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_dinner_outside_days_in_2021_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_dinner_outside_days_in_2021_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'dinner_outside_days_in_2021_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_dinner_outside_days_in_2022_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_dinner_outside_days_in_2022_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'dinner_outside_days_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_fair_days_in_2015_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_fair_days_in_2015_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'fair_days_in_2015_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_fair_days_in_2016_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_fair_days_in_2016_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'fair_days_in_2016_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_fair_days_in_2017_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_fair_days_in_2017_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'fair_days_in_2017_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_fair_days_in_2018_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_fair_days_in_2018_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'fair_days_in_2018_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_fair_days_in_2019_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_fair_days_in_2019_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'fair_days_in_2019_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_fair_days_in_2020_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_fair_days_in_2020_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'fair_days_in_2020_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_fair_days_in_2021_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_fair_days_in_2021_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'fair_days_in_2021_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_fair_days_in_2022_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_fair_days_in_2022_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'fair_days_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_hardiness_temp_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_hardiness_temp_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hardiness_temp_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2015_(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2015_() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_0_c_apparent_temperature_in_2015_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2016_(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2016_() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_0_c_apparent_temperature_in_2016_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2017_(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2017_() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_0_c_apparent_temperature_in_2017_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2018_(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2018_() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_0_c_apparent_temperature_in_2018_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2019_(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2019_() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_0_c_apparent_temperature_in_2019_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2020_(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2020_() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_0_c_apparent_temperature_in_2020_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2021_(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2021_() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_0_c_apparent_temperature_in_2021_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2022_(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2022_() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_0_c_apparent_temperature_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2015(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2015() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_10_c_apparent_temperature_in_2015_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2016(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2016() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_10_c_apparent_temperature_in_2016_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2017(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2017() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_10_c_apparent_temperature_in_2017_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2018(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2018() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_10_c_apparent_temperature_in_2018_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2019(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2019() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_10_c_apparent_temperature_in_2019_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2020(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2020() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_10_c_apparent_temperature_in_2020_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2021(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2021() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_10_c_apparent_temperature_in_2021_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2022(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2022() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_10_c_apparent_temperature_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2015_(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2015_() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_5_c_apparent_temperature_in_2015_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2016_(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2016_() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_5_c_apparent_temperature_in_2016_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2017_(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2017_() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_5_c_apparent_temperature_in_2017_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2018_(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2018_() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_5_c_apparent_temperature_in_2018_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2019_(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2019_() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_5_c_apparent_temperature_in_2019_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2020_(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2020_() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_5_c_apparent_temperature_in_2020_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2021_(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2021_() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_5_c_apparent_temperature_in_2021_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2022_(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2022_() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_5_c_apparent_temperature_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_indoor_days_in_2015_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_indoor_days_in_2015_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'indoor_days_in_2015_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_indoor_days_in_2016_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_indoor_days_in_2016_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'indoor_days_in_2016_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_indoor_days_in_2017_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_indoor_days_in_2017_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'indoor_days_in_2017_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_indoor_days_in_2018_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_indoor_days_in_2018_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'indoor_days_in_2018_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_indoor_days_in_2019_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_indoor_days_in_2019_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'indoor_days_in_2019_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_indoor_days_in_2020_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_indoor_days_in_2020_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'indoor_days_in_2020_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_indoor_days_in_2021_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_indoor_days_in_2021_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'indoor_days_in_2021_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_indoor_days_in_2022_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_indoor_days_in_2022_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'indoor_days_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_ll_uuid_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_ll_uuid_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'll_uuid';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_max_download_speed_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_max_download_speed_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'max_download_speed_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_max_upload_speed_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_max_upload_speed_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'max_upload_speed_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_military_count_200km_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_military_count_200km_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'military_count_200km_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_military_count_25km_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_military_count_25km_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'military_count_25km_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_military_count_50km_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_military_count_50km_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'military_count_50km_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_nearby_max_download_speed_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_nearby_max_download_speed_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'nearby_max_download_speed_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_nearby_max_upload_speed_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_nearby_max_upload_speed_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'nearby_max_upload_speed_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_perfect_days_in_2015_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_perfect_days_in_2015_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'perfect_days_in_2015_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_perfect_days_in_2016_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_perfect_days_in_2016_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'perfect_days_in_2016_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_perfect_days_in_2017_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_perfect_days_in_2017_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'perfect_days_in_2017_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_perfect_days_in_2018_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_perfect_days_in_2018_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'perfect_days_in_2018_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_perfect_days_in_2019_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_perfect_days_in_2019_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'perfect_days_in_2019_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_perfect_days_in_2020_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_perfect_days_in_2020_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'perfect_days_in_2020_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_perfect_days_in_2021_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_perfect_days_in_2021_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'perfect_days_in_2021_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_perfect_days_in_2022_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_perfect_days_in_2022_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'perfect_days_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_spring_count_100km_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_spring_count_100km_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'spring_count_100km_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_spring_count_10km_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_spring_count_10km_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'spring_count_10km_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_spring_count_1km_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_spring_count_1km_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'spring_count_1km_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_spring_count_50km_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_spring_count_50km_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'spring_count_50km_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_spring_count_5km_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_spring_count_5km_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'spring_count_5km_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rank_surrounding_coverage_density_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rank_surrounding_coverage_density_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'surrounding_coverage_density_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rdi_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rdi_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'rdi';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_recind_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_recind_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'recind';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_recrdareano_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_recrdareano_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'recrdareano';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_recrdareatx_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_recrdareatx_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'recrdareatx';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_resi1990_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_resi1990_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'resi1990';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_resi2000_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_resi2000_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'resi2000';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_resi2010_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_resi2010_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'resi2010';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_resident_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_resident_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'resident';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_resityp_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_resityp_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'resityp';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_resiuths_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_resiuths_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'resiuths';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_revisedate_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_revisedate_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'revisedate';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_reviseddate_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_reviseddate_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'reviseddate';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_road_high_traffic_km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_road_high_traffic_km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'high_traffic_km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_road_highway_km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_road_highway_km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'highway_km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_road_ll_uuid_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_road_ll_uuid_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'll_uuid';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_road_paved_km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_road_paved_km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'paved_km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_road_road_km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_road_road_km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'road_km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_rzrealdat_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_rzrealdat_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'rzrealdat';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_saddno_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_saddno_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'saddno';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_saddpref_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_saddpref_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'saddpref';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_saddstr_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_saddstr_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'saddstr';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_saddstsuf_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_saddstsuf_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'saddstsuf';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_saddsttyp_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_saddsttyp_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'saddsttyp';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_saledate_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_saledate_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'saledate';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_saleprice_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_saleprice_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'saleprice';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_scity_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_scity_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'scity';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_sdatwebadr_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_sdatwebadr_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'sdatwebadr';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_section_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_section_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'section';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_sourceagent_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_sourceagent_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'sourceagent';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_sourcedate_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_sourcedate_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'sourcedate';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_sourceref_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_sourceref_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'sourceref';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_sourceurl_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_sourceurl_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'sourceurl';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_special_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_special_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'special';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_sqft_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_sqft_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'sqft';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_state2_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_state2_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'state2';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_strubldg_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_strubldg_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'strubldg';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_strucnst_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_strucnst_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'strucnst';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_struct_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_struct_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'struct';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_structno_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_structno_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'structno';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_structstyle_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_structstyle_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'structstyle';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_strugrad_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_strugrad_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'strugrad';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_strustyl_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_strustyl_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'strustyl';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_subdivision_code_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_subdivision_code_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'subdivision_code';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_subdivision_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_subdivision_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'subdivision';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_subowntype_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_subowntype_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'subowntype';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_subsurfown_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_subsurfown_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'subsurfown';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_sunit_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_sunit_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'sunit';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_szip_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_szip_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'szip';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_taxamt_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_taxamt_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'taxamt';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_taxyear_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_taxyear_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'taxyear';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_towncode_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_towncode_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'towncode';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_trailer_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_trailer_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'trailer';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_transno1_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_transno1_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'transno1';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_urbanization_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_urbanization_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'urbanization';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_usecode_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_usecode_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'usecode';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_usedesc_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_usedesc_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'usedesc';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_usps_vacancy_date_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_usps_vacancy_date_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'usps_vacancy_date';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_usps_vacancy_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_usps_vacancy_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'usps_vacancy';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_viewshed_latitude_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_viewshed_latitude_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'latitude';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_viewshed_ll_uuid_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_viewshed_ll_uuid_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'll_uuid';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_viewshed_longitude_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_viewshed_longitude_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'longitude';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_viewshed_viewshed_e_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_viewshed_viewshed_e_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'viewshed_e';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_viewshed_viewshed_index_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_viewshed_viewshed_index_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'viewshed_index_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_viewshed_viewshed_index_20km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_viewshed_viewshed_index_20km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'viewshed_index_20km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_viewshed_viewshed_index_2km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_viewshed_viewshed_index_2km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'viewshed_index_2km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_viewshed_viewshed_index_50km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_viewshed_viewshed_index_50km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'viewshed_index_50km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_viewshed_viewshed_index_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_viewshed_viewshed_index_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'viewshed_index_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_viewshed_viewshed_index_75km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_viewshed_viewshed_index_75km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'viewshed_index_75km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_viewshed_viewshed_index_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_viewshed_viewshed_index_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'viewshed_index';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_viewshed_viewshed_index_under_2km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_viewshed_viewshed_index_under_2km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'viewshed_index_under_2km';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_viewshed_viewshed_n_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_viewshed_viewshed_n_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'viewshed_n';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_viewshed_viewshed_ne_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_viewshed_viewshed_ne_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'viewshed_ne';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_viewshed_viewshed_nw_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_viewshed_viewshed_nw_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'viewshed_nw';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_viewshed_viewshed_percentage_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_viewshed_viewshed_percentage_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'viewshed_percentage';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_viewshed_viewshed_s_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_viewshed_viewshed_s_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'viewshed_s';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_viewshed_viewshed_se_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_viewshed_viewshed_se_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'viewshed_se';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_viewshed_viewshed_sw_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_viewshed_viewshed_sw_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'viewshed_sw';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_viewshed_viewshed_w_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_viewshed_viewshed_w_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'viewshed_w';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_avg_active_days_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_avg_active_days_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_active_days';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_avg_cloudy_hours_10pct_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_avg_cloudy_hours_10pct_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_cloudy_hours_10pct';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_avg_cloudy_hours_50pct_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_avg_cloudy_hours_50pct_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_cloudy_hours_50pct';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_avg_cloudy_hours_90pct_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_avg_cloudy_hours_90pct_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_cloudy_hours_90pct';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_avg_daytime_hours_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_avg_daytime_hours_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_daytime_hours';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_avg_daytime_hrs_below_0c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_avg_daytime_hrs_below_0c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_daytime_hrs_below_0c';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_avg_daytime_hrs_below_10c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_avg_daytime_hrs_below_10c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_daytime_hrs_below_10c';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_avg_daytime_hrs_below_5c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_avg_daytime_hrs_below_5c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_daytime_hrs_below_5c';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_avg_dinner_outside_days_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_avg_dinner_outside_days_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_dinner_outside_days';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_avg_fair_days_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_avg_fair_days_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_fair_days';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_avg_hrs_below_0c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_avg_hrs_below_0c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_hrs_below_0c';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_avg_hrs_below_10c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_avg_hrs_below_10c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_hrs_below_10c';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_avg_hrs_below_5c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_avg_hrs_below_5c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_hrs_below_5c';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_avg_indoor_days_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_avg_indoor_days_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_indoor_days';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_avg_perfect_days_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_avg_perfect_days_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_perfect_days';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_ll_uuid_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_ll_uuid_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'll_uuid';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_max_active_days_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_max_active_days_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'max_active_days';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_max_cloudy_hours_10pct_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_max_cloudy_hours_10pct_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'max_cloudy_hours_10pct';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_max_cloudy_hours_50pct_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_max_cloudy_hours_50pct_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'max_cloudy_hours_50pct';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_max_cloudy_hours_90pct_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_max_cloudy_hours_90pct_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'max_cloudy_hours_90pct';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_max_daytime_hours_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_max_daytime_hours_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'max_daytime_hours';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_max_daytime_hrs_below_0c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_max_daytime_hrs_below_0c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'max_daytime_hrs_below_0c';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_max_daytime_hrs_below_10c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_max_daytime_hrs_below_10c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'max_daytime_hrs_below_10c';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_max_daytime_hrs_below_5c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_max_daytime_hrs_below_5c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'max_daytime_hrs_below_5c';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_max_dinner_outside_days_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_max_dinner_outside_days_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'max_dinner_outside_days';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_max_fair_days_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_max_fair_days_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'max_fair_days';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_max_hrs_below_0c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_max_hrs_below_0c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'max_hrs_below_0c';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_max_hrs_below_10c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_max_hrs_below_10c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'max_hrs_below_10c';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_max_hrs_below_5c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_max_hrs_below_5c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'max_hrs_below_5c';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_max_indoor_days_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_max_indoor_days_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'max_indoor_days';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_max_perfect_days_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_max_perfect_days_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'max_perfect_days';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_median_active_days_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_median_active_days_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'median_active_days';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_median_cloudy_hours_10pct_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_median_cloudy_hours_10pct_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'median_cloudy_hours_10pct';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_median_cloudy_hours_50pct_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_median_cloudy_hours_50pct_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'median_cloudy_hours_50pct';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_median_cloudy_hours_90pct_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_median_cloudy_hours_90pct_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'median_cloudy_hours_90pct';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_median_daytime_hours_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_median_daytime_hours_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'median_daytime_hours';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_median_daytime_hrs_below_0c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_median_daytime_hrs_below_0c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'median_daytime_hrs_below_0c';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_median_daytime_hrs_below_10c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_median_daytime_hrs_below_10c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'median_daytime_hrs_below_10c';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_median_daytime_hrs_below_5c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_median_daytime_hrs_below_5c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'median_daytime_hrs_below_5c';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_median_dinner_outside_days_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_median_dinner_outside_days_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'median_dinner_outside_days';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_median_fair_days_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_median_fair_days_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'median_fair_days';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_median_hrs_below_0c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_median_hrs_below_0c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'median_hrs_below_0c';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_median_hrs_below_10c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_median_hrs_below_10c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'median_hrs_below_10c';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_median_hrs_below_5c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_median_hrs_below_5c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'median_hrs_below_5c';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_median_indoor_days_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_median_indoor_days_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'median_indoor_days';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_median_perfect_days_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_median_perfect_days_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'median_perfect_days';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_min_active_days_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_min_active_days_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'min_active_days';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_min_cloudy_hours_10pct_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_min_cloudy_hours_10pct_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'min_cloudy_hours_10pct';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_min_cloudy_hours_50pct_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_min_cloudy_hours_50pct_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'min_cloudy_hours_50pct';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_min_cloudy_hours_90pct_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_min_cloudy_hours_90pct_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'min_cloudy_hours_90pct';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_min_daytime_hours_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_min_daytime_hours_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'min_daytime_hours';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_min_daytime_hrs_below_0c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_min_daytime_hrs_below_0c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'min_daytime_hrs_below_0c';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_min_daytime_hrs_below_10c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_min_daytime_hrs_below_10c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'min_daytime_hrs_below_10c';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_min_daytime_hrs_below_5c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_min_daytime_hrs_below_5c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'min_daytime_hrs_below_5c';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_min_dinner_outside_days_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_min_dinner_outside_days_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'min_dinner_outside_days';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_min_fair_days_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_min_fair_days_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'min_fair_days';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_min_hrs_below_0c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_min_hrs_below_0c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'min_hrs_below_0c';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_min_hrs_below_10c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_min_hrs_below_10c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'min_hrs_below_10c';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_min_hrs_below_5c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_min_hrs_below_5c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'min_hrs_below_5c';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_min_indoor_days_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_min_indoor_days_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'min_indoor_days';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_min_perfect_days_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_min_perfect_days_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'min_perfect_days';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_updated_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_updated_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'updated';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_weather_summary_years_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_weather_summary_years_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'years';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_width_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_width_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'width';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_yearbuilt_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_yearbuilt_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'yearbuilt';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_zoning_change_date_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_zoning_change_date_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'zoning_change_date';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_zoning_description_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_zoning_description_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'zoning_description';
      RETURN NEW;
    END;
    $$;


--
-- Name: insert_parcels_zoning_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_parcels_zoning_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'zoning';
      RETURN NEW;
    END;
    $$;


--
-- Name: tilebbox(integer, integer, integer, integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.tilebbox(z integer, x integer, y integer, srid integer) RETURNS parcels_production.geometry
    LANGUAGE sql IMMUTABLE
    AS $$
  SELECT ST_Transform(ST_TileEnvelope(z, x, y), srid)
$$;


--
-- Name: update_parcels_acctid_county_stripped_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_acctid_county_stripped_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'acctid_county_stripped';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_address2_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_address2_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'address2';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_address_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_address_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'address';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_address_source_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_address_source_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'address_source';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_addrtyp_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_addrtyp_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'addrtyp';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_agfndarea_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_agfndarea_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'agfndarea';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_agfndluom_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_agfndluom_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'agfndluom';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_agriculture_hardiness_temp_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_agriculture_hardiness_temp_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hardiness_temp';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_agriculture_hardiness_zone_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_agriculture_hardiness_zone_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hardiness_zone';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_agriculture_ll_uuid_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_agriculture_ll_uuid_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'll_uuid';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_agriculture_plant_hardiness_updated_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_agriculture_plant_hardiness_updated_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'plant_hardiness_updated';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_agval_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_agval_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'agval';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_airport_abbrev_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_airport_abbrev_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'abbrev';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_airport_distance_km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_airport_distance_km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'distance_km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_airport_ll_uuid_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_airport_ll_uuid_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'll_uuid';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_aprtment_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_aprtment_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'aprtment';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_assessor_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_assessor_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'assessor';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_block_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_block_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'block';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_book_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_book_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'book';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_careof_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_careof_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'careof';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_cass_errorno_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_cass_errorno_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'cass_errorno';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_cdl_date_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_cdl_date_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'cdl_date';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_cdl_majority_category_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_cdl_majority_category_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'cdl_majority_category';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_cdl_majority_percent_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_cdl_majority_percent_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'cdl_majority_percent';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_cdl_raw_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_cdl_raw_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'cdl_raw';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_census_block_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_census_block_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'census_block';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_census_blockgroup_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_census_blockgroup_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'census_blockgroup';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_census_tract_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_census_tract_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'census_tract';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_city_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_city_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'city';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_ciuse_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_ciuse_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'ciuse';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_coastline_distance_km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_coastline_distance_km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'distance_km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_coastline_ll_uuid_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_coastline_ll_uuid_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'll_uuid';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_convey1_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_convey1_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'convey1';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_county_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_county_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'county';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_crtarcod_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_crtarcod_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'crtarcod';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_closest_geological_features_distance_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_closest_geological_features_distance_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_geological_features_distance';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_closest_geological_features_items_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_closest_geological_features_items_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_geological_features_items';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_closest_geological_features_name_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_closest_geological_features_name_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_geological_features_name';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_closest_geological_features_tags_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_closest_geological_features_tags_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_geological_features_tags';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_closest_healthcare_distance_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_closest_healthcare_distance_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_healthcare_distance';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_closest_healthcare_items_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_closest_healthcare_items_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_healthcare_items';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_closest_healthcare_name_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_closest_healthcare_name_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_healthcare_name';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_closest_healthcare_tags_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_closest_healthcare_tags_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_healthcare_tags';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_closest_library_distance_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_closest_library_distance_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_library_distance';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_closest_library_items_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_closest_library_items_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_library_items';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_closest_library_name_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_closest_library_name_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_library_name';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_closest_library_tags_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_closest_library_tags_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_library_tags';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_closest_military_distance_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_closest_military_distance_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_military_distance';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_closest_military_items_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_closest_military_items_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_military_items';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_closest_military_name_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_closest_military_name_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_military_name';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_closest_military_tags_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_closest_military_tags_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_military_tags';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_closest_natural_distance_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_closest_natural_distance_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_natural_distance';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_closest_natural_items_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_closest_natural_items_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_natural_items';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_closest_natural_name_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_closest_natural_name_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_natural_name';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_closest_natural_tags_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_closest_natural_tags_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_natural_tags';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_closest_pollution_distance_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_closest_pollution_distance_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_pollution_distance';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_closest_pollution_items_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_closest_pollution_items_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_pollution_items';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_closest_pollution_name_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_closest_pollution_name_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_pollution_name';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_closest_pollution_tags_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_closest_pollution_tags_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_pollution_tags';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_closest_public_land_distance_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_closest_public_land_distance_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_public_land_distance';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_closest_public_land_items_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_closest_public_land_items_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_public_land_items';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_closest_public_land_name_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_closest_public_land_name_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_public_land_name';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_closest_public_land_tags_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_closest_public_land_tags_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_public_land_tags';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_closest_religious_distance_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_closest_religious_distance_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_religious_distance';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_closest_religious_items_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_closest_religious_items_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_religious_items';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_closest_religious_name_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_closest_religious_name_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_religious_name';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_closest_religious_tags_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_closest_religious_tags_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_religious_tags';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_closest_spring_distance_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_closest_spring_distance_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_spring_distance';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_closest_spring_items_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_closest_spring_items_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_spring_items';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_closest_spring_name_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_closest_spring_name_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_spring_name';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_closest_spring_tags_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_closest_spring_tags_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_spring_tags';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_closest_water_distance_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_closest_water_distance_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_water_distance';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_closest_water_items_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_closest_water_items_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_water_items';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_closest_water_name_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_closest_water_name_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_water_name';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_closest_water_tags_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_closest_water_tags_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_water_tags';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_geological_features_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_geological_features_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'geological_features_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_geological_features_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_geological_features_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'geological_features_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_geological_features_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_geological_features_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'geological_features_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_geological_features_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_geological_features_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'geological_features_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_geological_features_count_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_geological_features_count_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'geological_features_count_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_geological_features_count_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_geological_features_count_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'geological_features_count_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_geological_features_count_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_geological_features_count_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'geological_features_count_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_geological_features_count_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_geological_features_count_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'geological_features_count_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_geological_features_updated_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_geological_features_updated_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'geological_features_updated';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_healthcare_100km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_healthcare_100km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'healthcare_100km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_healthcare_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_healthcare_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'healthcare_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_healthcare_150km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_healthcare_150km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'healthcare_150km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_healthcare_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_healthcare_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'healthcare_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_healthcare_200km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_healthcare_200km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'healthcare_200km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_healthcare_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_healthcare_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'healthcare_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_healthcare_50km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_healthcare_50km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'healthcare_50km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_healthcare_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_healthcare_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'healthcare_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_healthcare_count_100km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_healthcare_count_100km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'healthcare_count_100km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_healthcare_count_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_healthcare_count_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'healthcare_count_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_healthcare_count_150km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_healthcare_count_150km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'healthcare_count_150km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_healthcare_count_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_healthcare_count_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'healthcare_count_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_healthcare_count_200km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_healthcare_count_200km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'healthcare_count_200km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_healthcare_count_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_healthcare_count_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'healthcare_count_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_healthcare_count_50km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_healthcare_count_50km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'healthcare_count_50km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_healthcare_count_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_healthcare_count_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'healthcare_count_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_healthcare_updated_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_healthcare_updated_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'healthcare_updated';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_library_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_library_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'library_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_library_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_library_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'library_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_library_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_library_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'library_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_library_50km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_library_50km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'library_50km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_library_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_library_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'library_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_library_count_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_library_count_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'library_count_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_library_count_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_library_count_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'library_count_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_library_count_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_library_count_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'library_count_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_library_count_50km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_library_count_50km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'library_count_50km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_library_count_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_library_count_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'library_count_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_library_updated_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_library_updated_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'library_updated';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_ll_uuid_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_ll_uuid_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'll_uuid';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_military_100km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_military_100km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'military_100km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_military_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_military_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'military_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_military_150km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_military_150km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'military_150km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_military_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_military_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'military_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_military_200km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_military_200km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'military_200km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_military_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_military_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'military_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_military_50km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_military_50km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'military_50km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_military_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_military_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'military_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_military_count_100km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_military_count_100km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'military_count_100km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_military_count_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_military_count_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'military_count_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_military_count_150km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_military_count_150km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'military_count_150km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_military_count_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_military_count_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'military_count_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_military_count_200km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_military_count_200km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'military_count_200km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_military_count_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_military_count_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'military_count_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_military_count_50km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_military_count_50km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'military_count_50km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_military_count_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_military_count_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'military_count_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_military_updated_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_military_updated_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'military_updated';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_natural_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_natural_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'natural_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_natural_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_natural_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'natural_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_natural_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_natural_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'natural_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_natural_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_natural_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'natural_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_natural_count_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_natural_count_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'natural_count_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_natural_count_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_natural_count_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'natural_count_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_natural_count_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_natural_count_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'natural_count_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_natural_count_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_natural_count_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'natural_count_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_natural_density_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_natural_density_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'natural_density_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_natural_density_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_natural_density_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'natural_density_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_natural_density_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_natural_density_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'natural_density_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_natural_density_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_natural_density_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'natural_density_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_natural_updated_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_natural_updated_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'natural_updated';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_parcels_count_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_parcels_count_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'parcels_count_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_parcels_count_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_parcels_count_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'parcels_count_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_parcels_count_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_parcels_count_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'parcels_count_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_parcels_count_50km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_parcels_count_50km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'parcels_count_50km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_parcels_count_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_parcels_count_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'parcels_count_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_parcels_density_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_parcels_density_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'parcels_density_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_parcels_density_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_parcels_density_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'parcels_density_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_parcels_density_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_parcels_density_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'parcels_density_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_parcels_density_50km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_parcels_density_50km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'parcels_density_50km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_parcels_density_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_parcels_density_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'parcels_density_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_parcels_updated_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_parcels_updated_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'parcels_updated';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_pollution_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_pollution_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'pollution_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_pollution_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_pollution_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'pollution_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_pollution_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_pollution_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'pollution_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_pollution_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_pollution_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'pollution_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_pollution_count_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_pollution_count_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'pollution_count_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_pollution_count_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_pollution_count_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'pollution_count_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_pollution_count_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_pollution_count_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'pollution_count_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_pollution_count_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_pollution_count_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'pollution_count_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_pollution_density_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_pollution_density_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'pollution_density_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_pollution_density_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_pollution_density_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'pollution_density_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_pollution_density_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_pollution_density_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'pollution_density_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_pollution_density_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_pollution_density_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'pollution_density_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_pollution_updated_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_pollution_updated_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'pollution_updated';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_public_land_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_public_land_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'public_land_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_public_land_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_public_land_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'public_land_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_public_land_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_public_land_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'public_land_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_public_land_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_public_land_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'public_land_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_public_land_count_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_public_land_count_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'public_land_count_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_public_land_count_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_public_land_count_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'public_land_count_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_public_land_count_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_public_land_count_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'public_land_count_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_public_land_count_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_public_land_count_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'public_land_count_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_public_land_density_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_public_land_density_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'public_land_density_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_public_land_density_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_public_land_density_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'public_land_density_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_public_land_density_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_public_land_density_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'public_land_density_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_public_land_density_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_public_land_density_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'public_land_density_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_public_land_updated_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_public_land_updated_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'public_land_updated';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_religion_100km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_religion_100km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_100km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_religion_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_religion_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_religion_150km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_religion_150km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_150km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_religion_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_religion_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_religion_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_religion_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_religion_50km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_religion_50km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_50km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_religion_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_religion_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_religion_count_100km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_religion_count_100km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_count_100km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_religion_count_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_religion_count_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_count_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_religion_count_150km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_religion_count_150km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_count_150km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_religion_count_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_religion_count_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_count_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_religion_count_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_religion_count_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_count_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_religion_count_50km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_religion_count_50km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_count_50km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_religion_count_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_religion_count_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_count_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_religion_density_100km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_religion_density_100km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_density_100km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_religion_density_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_religion_density_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_density_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_religion_density_150km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_religion_density_150km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_density_150km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_religion_density_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_religion_density_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_density_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_religion_density_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_religion_density_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_density_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_religion_density_50km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_religion_density_50km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_density_50km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_religion_density_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_religion_density_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religion_density_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_religious_updated_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_religious_updated_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'religious_updated';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_spring_100km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_spring_100km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'spring_100km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_spring_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_spring_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'spring_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_spring_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_spring_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'spring_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_spring_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_spring_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'spring_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_spring_50km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_spring_50km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'spring_50km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_spring_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_spring_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'spring_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_spring_count_100km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_spring_count_100km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'spring_count_100km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_spring_count_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_spring_count_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'spring_count_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_spring_count_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_spring_count_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'spring_count_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_spring_count_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_spring_count_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'spring_count_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_spring_count_50km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_spring_count_50km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'spring_count_50km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_spring_count_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_spring_count_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'spring_count_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_spring_updated_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_spring_updated_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'spring_updated';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_water_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_water_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'water_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_water_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_water_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'water_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_water_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_water_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'water_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_water_50km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_water_50km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'water_50km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_water_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_water_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'water_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_water_count_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_water_count_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'water_count_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_water_count_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_water_count_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'water_count_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_water_count_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_water_count_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'water_count_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_water_count_50km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_water_count_50km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'water_count_50km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_water_count_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_water_count_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'water_count_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_water_density_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_water_density_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'water_density_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_water_density_1km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_water_density_1km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'water_density_1km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_water_density_25km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_water_density_25km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'water_density_25km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_water_density_50km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_water_density_50km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'water_density_50km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_water_density_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_water_density_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'water_density_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_density_water_updated_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_density_water_updated_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'water_updated';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_depth_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_depth_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'depth';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_descbldg_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_descbldg_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'descbldg';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_descciuse_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_descciuse_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'descciuse';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_desccnst_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_desccnst_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'desccnst';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_descexcl_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_descexcl_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'descexcl';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_descgrad_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_descgrad_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'descgrad';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_desctown_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_desctown_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'desctown';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_detailed_subdivision_code_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_detailed_subdivision_code_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'detailed_subdivision_code';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_dpv_codes_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_dpv_codes_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'dpv_codes';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_dpv_notes_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_dpv_notes_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'dpv_notes';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_dpv_status_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_dpv_status_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'dpv_status';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_dpv_type_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_dpv_type_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'dpv_type';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_dr1clerk_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_dr1clerk_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'dr1clerk';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_dr1folio_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_dr1folio_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'dr1folio';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_dr1liber_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_dr1liber_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'dr1liber';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_elevation_ll_uuid_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_elevation_ll_uuid_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'll_uuid';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_elevation_max_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_elevation_max_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'max';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_elevation_median_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_elevation_median_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'median';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_elevation_min_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_elevation_min_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'min';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_elevation_p10_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_elevation_p10_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'p10';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_elevation_p25_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_elevation_p25_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'p25';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_elevation_p50_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_elevation_p50_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'p50';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_elevation_p75_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_elevation_p75_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'p75';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_elevation_p90_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_elevation_p90_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'p90';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_entznassm_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_entznassm_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'entznassm';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_entzndat_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_entzndat_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'entzndat';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_exclass_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_exclass_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'exclass';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_fcmacode_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_fcmacode_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'fcmacode';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_geogcode_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_geogcode_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'geogcode';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_geoid_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_geoid_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'geoid';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_geometry_coordinates_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_geometry_coordinates_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'coordinates';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_geometry_ll_uuid_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_geometry_ll_uuid_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'll_uuid';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_gisacre_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_gisacre_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'gisacre';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_goz_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_goz_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'goz';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_goz_tract_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_goz_tract_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'goz_tract';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_gr1clrk1v_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_gr1clrk1v_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'gr1clrk1v';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_gr1folo1_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_gr1folo1_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'gr1folo1';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_gr1libr1_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_gr1libr1_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'gr1libr1';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_grid_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_grid_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'grid';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_grntnam1_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_grntnam1_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'grntnam1';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_homestead_exemption_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_homestead_exemption_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'homestead_exemption';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_homqlcod_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_homqlcod_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'homqlcod';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_homqldat_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_homqldat_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'homqldat';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_improvval_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_improvval_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'improvval';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_internet_broadband_updated_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_internet_broadband_updated_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'broadband_updated';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_internet_closest_provider_distance_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_internet_closest_provider_distance_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_provider_distance';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_internet_closest_provider_h3_res8_id_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_internet_closest_provider_h3_res8_id_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_provider_h3_res8_id';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_internet_ll_uuid_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_internet_ll_uuid_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'll_uuid';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_internet_low_latency_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_internet_low_latency_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'low_latency';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_internet_max_download_speed_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_internet_max_download_speed_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'max_download_speed';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_internet_max_upload_speed_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_internet_max_upload_speed_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'max_upload_speed';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_internet_nearby_max_download_speed_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_internet_nearby_max_download_speed_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'nearby_max_download_speed';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_internet_nearby_max_upload_speed_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_internet_nearby_max_upload_speed_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'nearby_max_upload_speed';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_internet_surrounding_coverage_density_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_internet_surrounding_coverage_density_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'surrounding_coverage_density';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_internet_surrounding_providers_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_internet_surrounding_providers_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'surrounding_providers';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_jurscode_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_jurscode_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'jurscode';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_landval_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_landval_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'landval';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_lastassd_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_lastassd_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'lastassd';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_lastinsp_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_lastinsp_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'lastinsp';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_lat_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_lat_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'lat';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_lbcs_activity_desc_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_lbcs_activity_desc_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'lbcs_activity_desc';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_lbcs_activity_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_lbcs_activity_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'lbcs_activity';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_lbcs_function_desc_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_lbcs_function_desc_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'lbcs_function_desc';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_lbcs_function_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_lbcs_function_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'lbcs_function';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_lbcs_ownership_desc_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_lbcs_ownership_desc_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'lbcs_ownership_desc';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_lbcs_ownership_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_lbcs_ownership_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'lbcs_ownership';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_lbcs_site_desc_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_lbcs_site_desc_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'lbcs_site_desc';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_lbcs_site_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_lbcs_site_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'lbcs_site';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_lbcs_structure_desc_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_lbcs_structure_desc_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'lbcs_structure_desc';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_lbcs_structure_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_lbcs_structure_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'lbcs_structure';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_legaldesc_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_legaldesc_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'legaldesc';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_ll_bldg_count_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_ll_bldg_count_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'll_bldg_count';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_ll_bldg_footprint_sqft_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_ll_bldg_footprint_sqft_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'll_bldg_footprint_sqft';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_ll_gisacre_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_ll_gisacre_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'll_gisacre';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_ll_gissqft_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_ll_gissqft_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'll_gissqft';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_ll_stable_id_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_ll_stable_id_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'll_stable_id';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_ll_updated_at_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_ll_updated_at_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'll_updated_at';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_ll_uuid_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_ll_uuid_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'll_uuid';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_location_name_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_location_name_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'location_name';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_lon_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_lon_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'lon';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_lot_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_lot_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'lot';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_luom_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_luom_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'luom';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_mail_addno_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_mail_addno_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'mail_addno';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_mail_addpref_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_mail_addpref_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'mail_addpref';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_mail_address2_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_mail_address2_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'mail_address2';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_mail_addstr_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_mail_addstr_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'mail_addstr';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_mail_addstsuf_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_mail_addstsuf_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'mail_addstsuf';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_mail_addsttyp_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_mail_addsttyp_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'mail_addsttyp';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_mail_city_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_mail_city_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'mail_city';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_mail_country_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_mail_country_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'mail_country';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_mail_state2_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_mail_state2_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'mail_state2';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_mail_unit_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_mail_unit_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'mail_unit';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_mail_urbanization_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_mail_urbanization_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'mail_urbanization';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_mail_zip_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_mail_zip_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'mail_zip';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_mailadd_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_mailadd_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'mailadd';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_map_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_map_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'map';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_meta_ll_uuid_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_meta_ll_uuid_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'll_uuid';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_meta_public_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_meta_public_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'public';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_meta_tribal_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_meta_tribal_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'tribal';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_mortgag1_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_mortgag1_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'mortgag1';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_multistruct_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_multistruct_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'multistruct';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_namekey_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_namekey_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'namekey';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_nature_leaf_rating_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_nature_leaf_rating_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'leaf_rating';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_nature_ll_uuid_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_nature_ll_uuid_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'll_uuid';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_nature_nature_score_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_nature_nature_score_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'nature_score';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_nature_nature_updated_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_nature_nature_updated_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'nature_updated';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_neighborhood_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_neighborhood_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'neighborhood';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_nprcarea_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_nprcarea_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'nprcarea';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_nprcluom_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_nprcluom_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'nprcluom';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_nprctstdat_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_nprctstdat_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'nprctstdat';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_numstories_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_numstories_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'numstories';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_numunits_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_numunits_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'numunits';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_ogc_fid_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_ogc_fid_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'ogc_fid';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_ooi_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_ooi_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'ooi';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_original_address_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_original_address_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'original_address';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_other_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_other_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'other';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_owner2_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_owner2_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'owner2';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_owner3_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_owner3_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'owner3';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_owner4_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_owner4_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'owner4';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_owner_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_owner_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'owner';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_owner_index_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_owner_index_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'owner_index';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_ownfrst_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_ownfrst_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'ownfrst';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_ownlast_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_ownlast_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'ownlast';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_owntype_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_owntype_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'owntype';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_padus_public_access_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_padus_public_access_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'padus_public_access';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_page_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_page_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'page';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_parcelnumb_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_parcelnumb_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'parcelnumb';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_parval_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_parval_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'parval';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_parvaltype_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_parvaltype_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'parvaltype';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_path_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_path_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'path';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_permittyp_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_permittyp_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'permittyp';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_pfic_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_pfic_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'pfic';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_pfih_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_pfih_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'pfih';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_pflw_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_pflw_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'pflw';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_pfsp_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_pfsp_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'pfsp';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_pfsu_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_pfsu_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'pfsu';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_pfus_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_pfus_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'pfus';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_pfuw_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_pfuw_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'pfuw';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_plat_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_plat_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'plat';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_plndevdat_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_plndevdat_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'plndevdat';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_polyid_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_polyid_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'polyid';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_ptype_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_ptype_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'ptype';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_qoz_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_qoz_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'qoz';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_qoz_tract_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_qoz_tract_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'qoz_tract';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_active_days_in_2015_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_active_days_in_2015_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'active_days_in_2015_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_active_days_in_2016_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_active_days_in_2016_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'active_days_in_2016_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_active_days_in_2017_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_active_days_in_2017_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'active_days_in_2017_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_active_days_in_2018_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_active_days_in_2018_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'active_days_in_2018_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_active_days_in_2019_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_active_days_in_2019_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'active_days_in_2019_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_active_days_in_2020_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_active_days_in_2020_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'active_days_in_2020_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_active_days_in_2021_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_active_days_in_2021_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'active_days_in_2021_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_active_days_in_2022_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_active_days_in_2022_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'active_days_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_avg_active_days_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_avg_active_days_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_active_days_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_avg_cloudy_hours_10pct_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_avg_cloudy_hours_10pct_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_cloudy_hours_10pct_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_avg_cloudy_hours_50pct_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_avg_cloudy_hours_50pct_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_cloudy_hours_50pct_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_avg_cloudy_hours_90pct_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_avg_cloudy_hours_90pct_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_cloudy_hours_90pct_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_avg_daytime_hrs_below_0c_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_avg_daytime_hrs_below_0c_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_daytime_hrs_below_0c_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_avg_daytime_hrs_below_10c_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_avg_daytime_hrs_below_10c_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_daytime_hrs_below_10c_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_avg_daytime_hrs_below_5c_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_avg_daytime_hrs_below_5c_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_daytime_hrs_below_5c_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_avg_dinner_outside_days_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_avg_dinner_outside_days_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_dinner_outside_days_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_avg_fair_days_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_avg_fair_days_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_fair_days_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_avg_hrs_below_0c_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_avg_hrs_below_0c_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_hrs_below_0c_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_avg_hrs_below_10c_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_avg_hrs_below_10c_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_hrs_below_10c_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_avg_hrs_below_5c_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_avg_hrs_below_5c_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_hrs_below_5c_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_avg_indoor_days_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_avg_indoor_days_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_indoor_days_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_avg_perfect_days_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_avg_perfect_days_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_perfect_days_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_closest_military_distance_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_closest_military_distance_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_military_distance_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_closest_provider_distance_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_closest_provider_distance_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_provider_distance_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_closest_spring_distance_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_closest_spring_distance_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'closest_spring_distance_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_daytime_hours_above_10_pct_cloud_cover_in_2(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_daytime_hours_above_10_pct_cloud_cover_in_2() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'daytime_hours_above_10_pct_cloud_cover_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_daytime_hours_above_20_pct_cloud_cover_in_2(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_daytime_hours_above_20_pct_cloud_cover_in_2() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'daytime_hours_above_20_pct_cloud_cover_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_daytime_hours_above_30_pct_cloud_cover_in_2(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_daytime_hours_above_30_pct_cloud_cover_in_2() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'daytime_hours_above_30_pct_cloud_cover_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_daytime_hours_above_40_pct_cloud_cover_in_2(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_daytime_hours_above_40_pct_cloud_cover_in_2() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'daytime_hours_above_40_pct_cloud_cover_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_daytime_hours_above_50_pct_cloud_cover_in_2(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_daytime_hours_above_50_pct_cloud_cover_in_2() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'daytime_hours_above_50_pct_cloud_cover_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_daytime_hours_above_60_pct_cloud_cover_in_2(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_daytime_hours_above_60_pct_cloud_cover_in_2() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'daytime_hours_above_60_pct_cloud_cover_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_daytime_hours_above_70_pct_cloud_cover_in_2(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_daytime_hours_above_70_pct_cloud_cover_in_2() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'daytime_hours_above_70_pct_cloud_cover_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_daytime_hours_above_80_pct_cloud_cover_in_2(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_daytime_hours_above_80_pct_cloud_cover_in_2() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'daytime_hours_above_80_pct_cloud_cover_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_daytime_hours_above_90_pct_cloud_cover_in_2(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_daytime_hours_above_90_pct_cloud_cover_in_2() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'daytime_hours_above_90_pct_cloud_cover_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_daytime_hours_in_2015_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_daytime_hours_in_2015_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'daytime_hours_in_2015_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_daytime_hours_in_2016_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_daytime_hours_in_2016_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'daytime_hours_in_2016_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_daytime_hours_in_2017_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_daytime_hours_in_2017_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'daytime_hours_in_2017_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_daytime_hours_in_2018_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_daytime_hours_in_2018_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'daytime_hours_in_2018_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_daytime_hours_in_2019_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_daytime_hours_in_2019_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'daytime_hours_in_2019_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_daytime_hours_in_2020_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_daytime_hours_in_2020_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'daytime_hours_in_2020_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_daytime_hours_in_2021_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_daytime_hours_in_2021_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'daytime_hours_in_2021_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_daytime_hours_in_2022_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_daytime_hours_in_2022_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'daytime_hours_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_daytime_hrs_below_0_c_apparent_temperature_(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_daytime_hrs_below_0_c_apparent_temperature_() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'daytime_hrs_below_0_c_apparent_temperature_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_daytime_hrs_below_10_c_apparent_temperature(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_daytime_hrs_below_10_c_apparent_temperature() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'daytime_hrs_below_10_c_apparent_temperature_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_daytime_hrs_below_5_c_apparent_temperature_(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_daytime_hrs_below_5_c_apparent_temperature_() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'daytime_hrs_below_5_c_apparent_temperature_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_dinner_outside_days_in_2015_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_dinner_outside_days_in_2015_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'dinner_outside_days_in_2015_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_dinner_outside_days_in_2016_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_dinner_outside_days_in_2016_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'dinner_outside_days_in_2016_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_dinner_outside_days_in_2017_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_dinner_outside_days_in_2017_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'dinner_outside_days_in_2017_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_dinner_outside_days_in_2018_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_dinner_outside_days_in_2018_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'dinner_outside_days_in_2018_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_dinner_outside_days_in_2019_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_dinner_outside_days_in_2019_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'dinner_outside_days_in_2019_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_dinner_outside_days_in_2020_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_dinner_outside_days_in_2020_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'dinner_outside_days_in_2020_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_dinner_outside_days_in_2021_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_dinner_outside_days_in_2021_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'dinner_outside_days_in_2021_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_dinner_outside_days_in_2022_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_dinner_outside_days_in_2022_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'dinner_outside_days_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_fair_days_in_2015_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_fair_days_in_2015_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'fair_days_in_2015_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_fair_days_in_2016_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_fair_days_in_2016_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'fair_days_in_2016_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_fair_days_in_2017_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_fair_days_in_2017_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'fair_days_in_2017_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_fair_days_in_2018_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_fair_days_in_2018_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'fair_days_in_2018_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_fair_days_in_2019_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_fair_days_in_2019_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'fair_days_in_2019_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_fair_days_in_2020_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_fair_days_in_2020_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'fair_days_in_2020_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_fair_days_in_2021_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_fair_days_in_2021_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'fair_days_in_2021_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_fair_days_in_2022_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_fair_days_in_2022_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'fair_days_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_hardiness_temp_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_hardiness_temp_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hardiness_temp_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2015_(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2015_() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_0_c_apparent_temperature_in_2015_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2016_(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2016_() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_0_c_apparent_temperature_in_2016_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2017_(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2017_() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_0_c_apparent_temperature_in_2017_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2018_(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2018_() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_0_c_apparent_temperature_in_2018_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2019_(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2019_() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_0_c_apparent_temperature_in_2019_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2020_(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2020_() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_0_c_apparent_temperature_in_2020_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2021_(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2021_() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_0_c_apparent_temperature_in_2021_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2022_(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2022_() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_0_c_apparent_temperature_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2015(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2015() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_10_c_apparent_temperature_in_2015_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2016(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2016() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_10_c_apparent_temperature_in_2016_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2017(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2017() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_10_c_apparent_temperature_in_2017_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2018(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2018() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_10_c_apparent_temperature_in_2018_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2019(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2019() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_10_c_apparent_temperature_in_2019_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2020(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2020() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_10_c_apparent_temperature_in_2020_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2021(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2021() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_10_c_apparent_temperature_in_2021_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2022(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2022() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_10_c_apparent_temperature_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2015_(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2015_() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_5_c_apparent_temperature_in_2015_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2016_(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2016_() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_5_c_apparent_temperature_in_2016_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2017_(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2017_() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_5_c_apparent_temperature_in_2017_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2018_(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2018_() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_5_c_apparent_temperature_in_2018_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2019_(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2019_() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_5_c_apparent_temperature_in_2019_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2020_(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2020_() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_5_c_apparent_temperature_in_2020_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2021_(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2021_() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_5_c_apparent_temperature_in_2021_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2022_(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2022_() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'hrs_below_5_c_apparent_temperature_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_indoor_days_in_2015_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_indoor_days_in_2015_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'indoor_days_in_2015_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_indoor_days_in_2016_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_indoor_days_in_2016_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'indoor_days_in_2016_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_indoor_days_in_2017_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_indoor_days_in_2017_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'indoor_days_in_2017_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_indoor_days_in_2018_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_indoor_days_in_2018_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'indoor_days_in_2018_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_indoor_days_in_2019_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_indoor_days_in_2019_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'indoor_days_in_2019_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_indoor_days_in_2020_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_indoor_days_in_2020_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'indoor_days_in_2020_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_indoor_days_in_2021_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_indoor_days_in_2021_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'indoor_days_in_2021_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_indoor_days_in_2022_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_indoor_days_in_2022_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'indoor_days_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_ll_uuid_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_ll_uuid_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'll_uuid';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_max_download_speed_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_max_download_speed_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'max_download_speed_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_max_upload_speed_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_max_upload_speed_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'max_upload_speed_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_military_count_200km_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_military_count_200km_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'military_count_200km_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_military_count_25km_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_military_count_25km_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'military_count_25km_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_military_count_50km_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_military_count_50km_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'military_count_50km_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_nearby_max_download_speed_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_nearby_max_download_speed_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'nearby_max_download_speed_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_nearby_max_upload_speed_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_nearby_max_upload_speed_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'nearby_max_upload_speed_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_perfect_days_in_2015_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_perfect_days_in_2015_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'perfect_days_in_2015_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_perfect_days_in_2016_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_perfect_days_in_2016_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'perfect_days_in_2016_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_perfect_days_in_2017_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_perfect_days_in_2017_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'perfect_days_in_2017_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_perfect_days_in_2018_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_perfect_days_in_2018_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'perfect_days_in_2018_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_perfect_days_in_2019_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_perfect_days_in_2019_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'perfect_days_in_2019_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_perfect_days_in_2020_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_perfect_days_in_2020_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'perfect_days_in_2020_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_perfect_days_in_2021_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_perfect_days_in_2021_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'perfect_days_in_2021_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_perfect_days_in_2022_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_perfect_days_in_2022_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'perfect_days_in_2022_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_spring_count_100km_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_spring_count_100km_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'spring_count_100km_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_spring_count_10km_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_spring_count_10km_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'spring_count_10km_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_spring_count_1km_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_spring_count_1km_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'spring_count_1km_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_spring_count_50km_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_spring_count_50km_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'spring_count_50km_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_spring_count_5km_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_spring_count_5km_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'spring_count_5km_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rank_surrounding_coverage_density_rank_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rank_surrounding_coverage_density_rank_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'surrounding_coverage_density_rank';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rdi_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rdi_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'rdi';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_recind_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_recind_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'recind';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_recrdareano_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_recrdareano_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'recrdareano';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_recrdareatx_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_recrdareatx_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'recrdareatx';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_resi1990_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_resi1990_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'resi1990';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_resi2000_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_resi2000_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'resi2000';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_resi2010_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_resi2010_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'resi2010';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_resident_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_resident_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'resident';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_resityp_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_resityp_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'resityp';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_resiuths_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_resiuths_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'resiuths';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_revisedate_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_revisedate_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'revisedate';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_reviseddate_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_reviseddate_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'reviseddate';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_road_high_traffic_km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_road_high_traffic_km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'high_traffic_km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_road_highway_km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_road_highway_km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'highway_km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_road_ll_uuid_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_road_ll_uuid_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'll_uuid';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_road_paved_km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_road_paved_km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'paved_km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_road_road_km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_road_road_km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'road_km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_rzrealdat_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_rzrealdat_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'rzrealdat';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_saddno_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_saddno_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'saddno';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_saddpref_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_saddpref_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'saddpref';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_saddstr_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_saddstr_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'saddstr';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_saddstsuf_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_saddstsuf_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'saddstsuf';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_saddsttyp_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_saddsttyp_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'saddsttyp';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_saledate_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_saledate_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'saledate';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_saleprice_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_saleprice_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'saleprice';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_scity_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_scity_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'scity';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_sdatwebadr_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_sdatwebadr_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'sdatwebadr';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_section_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_section_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'section';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_sourceagent_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_sourceagent_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'sourceagent';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_sourcedate_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_sourcedate_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'sourcedate';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_sourceref_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_sourceref_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'sourceref';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_sourceurl_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_sourceurl_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'sourceurl';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_special_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_special_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'special';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_sqft_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_sqft_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'sqft';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_state2_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_state2_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'state2';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_strubldg_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_strubldg_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'strubldg';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_strucnst_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_strucnst_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'strucnst';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_struct_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_struct_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'struct';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_structno_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_structno_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'structno';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_structstyle_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_structstyle_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'structstyle';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_strugrad_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_strugrad_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'strugrad';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_strustyl_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_strustyl_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'strustyl';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_subdivision_code_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_subdivision_code_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'subdivision_code';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_subdivision_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_subdivision_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'subdivision';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_subowntype_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_subowntype_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'subowntype';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_subsurfown_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_subsurfown_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'subsurfown';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_sunit_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_sunit_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'sunit';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_szip_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_szip_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'szip';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_taxamt_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_taxamt_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'taxamt';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_taxyear_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_taxyear_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'taxyear';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_towncode_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_towncode_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'towncode';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_trailer_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_trailer_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'trailer';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_transno1_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_transno1_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'transno1';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_urbanization_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_urbanization_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'urbanization';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_usecode_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_usecode_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'usecode';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_usedesc_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_usedesc_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'usedesc';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_usps_vacancy_date_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_usps_vacancy_date_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'usps_vacancy_date';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_usps_vacancy_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_usps_vacancy_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'usps_vacancy';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_viewshed_latitude_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_viewshed_latitude_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'latitude';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_viewshed_ll_uuid_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_viewshed_ll_uuid_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'll_uuid';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_viewshed_longitude_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_viewshed_longitude_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'longitude';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_viewshed_viewshed_e_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_viewshed_viewshed_e_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'viewshed_e';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_viewshed_viewshed_index_10km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_viewshed_viewshed_index_10km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'viewshed_index_10km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_viewshed_viewshed_index_20km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_viewshed_viewshed_index_20km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'viewshed_index_20km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_viewshed_viewshed_index_2km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_viewshed_viewshed_index_2km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'viewshed_index_2km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_viewshed_viewshed_index_50km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_viewshed_viewshed_index_50km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'viewshed_index_50km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_viewshed_viewshed_index_5km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_viewshed_viewshed_index_5km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'viewshed_index_5km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_viewshed_viewshed_index_75km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_viewshed_viewshed_index_75km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'viewshed_index_75km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_viewshed_viewshed_index_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_viewshed_viewshed_index_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'viewshed_index';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_viewshed_viewshed_index_under_2km_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_viewshed_viewshed_index_under_2km_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'viewshed_index_under_2km';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_viewshed_viewshed_n_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_viewshed_viewshed_n_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'viewshed_n';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_viewshed_viewshed_ne_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_viewshed_viewshed_ne_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'viewshed_ne';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_viewshed_viewshed_nw_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_viewshed_viewshed_nw_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'viewshed_nw';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_viewshed_viewshed_percentage_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_viewshed_viewshed_percentage_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'viewshed_percentage';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_viewshed_viewshed_s_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_viewshed_viewshed_s_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'viewshed_s';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_viewshed_viewshed_se_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_viewshed_viewshed_se_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'viewshed_se';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_viewshed_viewshed_sw_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_viewshed_viewshed_sw_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'viewshed_sw';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_viewshed_viewshed_w_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_viewshed_viewshed_w_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'viewshed_w';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_avg_active_days_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_avg_active_days_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_active_days';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_avg_cloudy_hours_10pct_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_avg_cloudy_hours_10pct_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_cloudy_hours_10pct';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_avg_cloudy_hours_50pct_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_avg_cloudy_hours_50pct_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_cloudy_hours_50pct';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_avg_cloudy_hours_90pct_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_avg_cloudy_hours_90pct_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_cloudy_hours_90pct';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_avg_daytime_hours_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_avg_daytime_hours_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_daytime_hours';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_avg_daytime_hrs_below_0c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_avg_daytime_hrs_below_0c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_daytime_hrs_below_0c';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_avg_daytime_hrs_below_10c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_avg_daytime_hrs_below_10c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_daytime_hrs_below_10c';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_avg_daytime_hrs_below_5c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_avg_daytime_hrs_below_5c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_daytime_hrs_below_5c';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_avg_dinner_outside_days_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_avg_dinner_outside_days_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_dinner_outside_days';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_avg_fair_days_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_avg_fair_days_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_fair_days';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_avg_hrs_below_0c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_avg_hrs_below_0c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_hrs_below_0c';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_avg_hrs_below_10c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_avg_hrs_below_10c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_hrs_below_10c';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_avg_hrs_below_5c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_avg_hrs_below_5c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_hrs_below_5c';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_avg_indoor_days_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_avg_indoor_days_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_indoor_days';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_avg_perfect_days_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_avg_perfect_days_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'avg_perfect_days';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_ll_uuid_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_ll_uuid_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'll_uuid';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_max_active_days_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_max_active_days_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'max_active_days';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_max_cloudy_hours_10pct_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_max_cloudy_hours_10pct_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'max_cloudy_hours_10pct';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_max_cloudy_hours_50pct_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_max_cloudy_hours_50pct_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'max_cloudy_hours_50pct';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_max_cloudy_hours_90pct_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_max_cloudy_hours_90pct_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'max_cloudy_hours_90pct';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_max_daytime_hours_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_max_daytime_hours_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'max_daytime_hours';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_max_daytime_hrs_below_0c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_max_daytime_hrs_below_0c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'max_daytime_hrs_below_0c';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_max_daytime_hrs_below_10c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_max_daytime_hrs_below_10c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'max_daytime_hrs_below_10c';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_max_daytime_hrs_below_5c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_max_daytime_hrs_below_5c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'max_daytime_hrs_below_5c';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_max_dinner_outside_days_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_max_dinner_outside_days_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'max_dinner_outside_days';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_max_fair_days_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_max_fair_days_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'max_fair_days';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_max_hrs_below_0c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_max_hrs_below_0c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'max_hrs_below_0c';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_max_hrs_below_10c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_max_hrs_below_10c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'max_hrs_below_10c';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_max_hrs_below_5c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_max_hrs_below_5c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'max_hrs_below_5c';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_max_indoor_days_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_max_indoor_days_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'max_indoor_days';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_max_perfect_days_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_max_perfect_days_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'max_perfect_days';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_median_active_days_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_median_active_days_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'median_active_days';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_median_cloudy_hours_10pct_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_median_cloudy_hours_10pct_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'median_cloudy_hours_10pct';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_median_cloudy_hours_50pct_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_median_cloudy_hours_50pct_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'median_cloudy_hours_50pct';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_median_cloudy_hours_90pct_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_median_cloudy_hours_90pct_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'median_cloudy_hours_90pct';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_median_daytime_hours_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_median_daytime_hours_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'median_daytime_hours';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_median_daytime_hrs_below_0c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_median_daytime_hrs_below_0c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'median_daytime_hrs_below_0c';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_median_daytime_hrs_below_10c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_median_daytime_hrs_below_10c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'median_daytime_hrs_below_10c';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_median_daytime_hrs_below_5c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_median_daytime_hrs_below_5c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'median_daytime_hrs_below_5c';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_median_dinner_outside_days_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_median_dinner_outside_days_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'median_dinner_outside_days';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_median_fair_days_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_median_fair_days_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'median_fair_days';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_median_hrs_below_0c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_median_hrs_below_0c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'median_hrs_below_0c';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_median_hrs_below_10c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_median_hrs_below_10c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'median_hrs_below_10c';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_median_hrs_below_5c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_median_hrs_below_5c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'median_hrs_below_5c';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_median_indoor_days_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_median_indoor_days_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'median_indoor_days';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_median_perfect_days_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_median_perfect_days_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'median_perfect_days';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_min_active_days_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_min_active_days_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'min_active_days';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_min_cloudy_hours_10pct_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_min_cloudy_hours_10pct_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'min_cloudy_hours_10pct';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_min_cloudy_hours_50pct_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_min_cloudy_hours_50pct_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'min_cloudy_hours_50pct';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_min_cloudy_hours_90pct_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_min_cloudy_hours_90pct_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'min_cloudy_hours_90pct';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_min_daytime_hours_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_min_daytime_hours_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'min_daytime_hours';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_min_daytime_hrs_below_0c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_min_daytime_hrs_below_0c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'min_daytime_hrs_below_0c';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_min_daytime_hrs_below_10c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_min_daytime_hrs_below_10c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'min_daytime_hrs_below_10c';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_min_daytime_hrs_below_5c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_min_daytime_hrs_below_5c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'min_daytime_hrs_below_5c';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_min_dinner_outside_days_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_min_dinner_outside_days_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'min_dinner_outside_days';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_min_fair_days_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_min_fair_days_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'min_fair_days';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_min_hrs_below_0c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_min_hrs_below_0c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'min_hrs_below_0c';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_min_hrs_below_10c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_min_hrs_below_10c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'min_hrs_below_10c';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_min_hrs_below_5c_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_min_hrs_below_5c_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'min_hrs_below_5c';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_min_indoor_days_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_min_indoor_days_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'min_indoor_days';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_min_perfect_days_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_min_perfect_days_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'min_perfect_days';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_updated_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_updated_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'updated';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_weather_summary_years_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_weather_summary_years_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'years';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_width_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_width_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'width';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_yearbuilt_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_yearbuilt_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'yearbuilt';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_zoning_change_date_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_zoning_change_date_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'zoning_change_date';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_zoning_description_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_zoning_description_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'zoning_description';
      RETURN NEW;
    END;
    $$;


--
-- Name: update_parcels_zoning_fn(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_parcels_zoning_fn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    BEGIN
      UPDATE coverage
      SET column_updated = NOW()
      WHERE column_name = 'zoning';
      RETURN NEW;
    END;
    $$;


SET default_table_access_method = heap;

--
-- Name: airports; Type: TABLE; Schema: parcels_production; Owner: -
--

CREATE TABLE parcels_production.airports (
    latitude numeric(8,6),
    longitude numeric(9,6),
    type character varying(100),
    name character varying(200),
    abbrev character varying(10),
    gps_code character varying(10),
    iata_code character varying(10),
    wikipedia character varying(300)
);


--
-- Name: COLUMN airports.latitude; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.airports.latitude IS 'latitude decimal coordinate';


--
-- Name: COLUMN airports.longitude; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.airports.longitude IS 'longitude decimal coordinate';


--
-- Name: broadband_availability; Type: TABLE; Schema: parcels_production; Owner: -
--

CREATE TABLE parcels_production.broadband_availability (
    frn integer NOT NULL,
    provider_id integer NOT NULL,
    brand_name character varying(200) NOT NULL,
    location_id character varying(200) NOT NULL,
    technology smallint NOT NULL,
    max_advertised_download_speed integer NOT NULL,
    max_advertised_upload_speed integer NOT NULL,
    low_latency boolean NOT NULL,
    business_residential_code character varying(1) NOT NULL,
    state_usps character varying(2) NOT NULL,
    block_geoid character varying(15) NOT NULL,
    h3_res8_id character varying(16) NOT NULL
);


--
-- Name: coordinates; Type: TABLE; Schema: parcels_production; Owner: -
--

CREATE TABLE parcels_production.coordinates (
    lat numeric(8,6),
    lon numeric(9,6),
    elevation text
);


--
-- Name: COLUMN coordinates.lat; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.coordinates.lat IS 'latitude decimal coordinate';


--
-- Name: COLUMN coordinates.lon; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.coordinates.lon IS 'longitude decimal coordinate';


--
-- Name: COLUMN coordinates.elevation; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.coordinates.elevation IS 'Estimated 90 meter digital elevation model is used';


--
-- Name: coverage; Type: TABLE; Schema: parcels_production; Owner: -
--

CREATE TABLE parcels_production.coverage (
    column_name character varying(100) NOT NULL,
    table_name character varying(30) NOT NULL,
    total_rows bigint NOT NULL,
    covered_rows bigint NOT NULL,
    coverage_percentage numeric(5,2) NOT NULL,
    coverage_updated bigint NOT NULL,
    column_updated timestamp with time zone
);


--
-- Name: database_table_views; Type: TABLE; Schema: parcels_production; Owner: -
--

CREATE TABLE parcels_production.database_table_views (
    view_id uuid DEFAULT public.uuid_generate_v1() NOT NULL,
    view_name character varying(30) NOT NULL,
    view_description text,
    table_name character varying(255) NOT NULL,
    table_state json,
    user_public_key character varying(64) NOT NULL,
    user_signature character varying(128) NOT NULL,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


--
-- Name: election_results; Type: TABLE; Schema: parcels_production; Owner: -
--

CREATE TABLE parcels_production.election_results (
    election_year smallint NOT NULL,
    coordinates parcels_production.geometry(Geometry,4326),
    state character(2),
    geoid character varying(100) NOT NULL,
    votes_dem integer,
    votes_rep integer,
    votes_total integer,
    pct_dem_lead numeric(6,4),
    official_boundary boolean
);


--
-- Name: heatmaps; Type: TABLE; Schema: parcels_production; Owner: -
--

CREATE TABLE parcels_production.heatmaps (
    h3_res4_id public.h3index,
    median_hardiness_temp_rank double precision,
    parcels_count integer
);


--
-- Name: importers; Type: TABLE; Schema: parcels_production; Owner: -
--

CREATE TABLE parcels_production.importers (
    name character varying(20) NOT NULL,
    running character varying(100),
    last_error text,
    "timestamp" integer,
    data json
);


--
-- Name: parcels; Type: TABLE; Schema: parcels_production; Owner: -
--

CREATE TABLE parcels_production.parcels (
    ogc_fid bigint NOT NULL,
    geoid text,
    sourceagent text,
    parcelnumb text,
    usecode text,
    usedesc text,
    zoning text,
    zoning_description text,
    struct boolean,
    multistruct boolean,
    structno integer,
    yearbuilt integer,
    numstories double precision,
    numunits integer,
    structstyle text,
    parvaltype text,
    improvval double precision,
    landval double precision,
    parval double precision,
    agval double precision,
    saleprice double precision,
    saledate date,
    taxamt double precision,
    taxyear text,
    owntype text,
    owner text,
    owner_index character varying(200),
    ownfrst text,
    ownlast text,
    owner2 text,
    owner3 text,
    owner4 text,
    subsurfown text,
    subowntype text,
    mailadd text,
    mail_address2 text,
    careof text,
    mail_addno text,
    mail_addpref text,
    mail_addstr text,
    mail_addsttyp text,
    mail_addstsuf text,
    mail_unit text,
    mail_city text,
    mail_state2 text,
    mail_zip text,
    mail_country text,
    mail_urbanization text,
    address text,
    address2 text,
    saddno text,
    saddpref text,
    saddstr text,
    saddsttyp text,
    saddstsuf text,
    sunit text,
    scity text,
    original_address text,
    city text,
    county text,
    state2 text,
    szip text,
    urbanization text,
    location_name text,
    address_source text,
    legaldesc text,
    plat text,
    book text,
    page text,
    block text,
    lot text,
    neighborhood text,
    subdivision text,
    lat numeric(10,8),
    lon numeric(11,8),
    goz text,
    goz_tract text,
    census_tract text,
    census_block text,
    census_blockgroup text,
    sourceref text,
    sourcedate date,
    sourceurl text,
    recrdareatx text,
    recrdareano double precision,
    gisacre double precision,
    sqft double precision,
    ll_gisacre double precision,
    ll_gissqft bigint,
    ll_bldg_footprint_sqft integer,
    ll_bldg_count integer,
    cdl_raw text,
    cdl_majority_category text,
    cdl_majority_percent double precision,
    cdl_date text,
    revisedate date,
    path character varying(200),
    ll_stable_id text,
    ll_uuid character varying(36) NOT NULL,
    ll_updated_at timestamp with time zone,
    dpv_status text,
    dpv_codes text,
    dpv_notes text,
    dpv_type text,
    cass_errorno text,
    rdi text,
    usps_vacancy text,
    usps_vacancy_date date,
    lbcs_activity numeric(10,0),
    lbcs_activity_desc text,
    lbcs_function numeric(10,0),
    lbcs_function_desc text,
    lbcs_structure numeric(10,0),
    lbcs_structure_desc text,
    lbcs_site numeric(10,0),
    lbcs_site_desc text,
    lbcs_ownership numeric(10,0),
    lbcs_ownership_desc text,
    padus_public_access text,
    homestead_exemption text,
    reviseddate date,
    jurscode text,
    acctid_county_stripped text,
    geogcode text,
    ooi text,
    resityp text,
    addrtyp text,
    namekey text,
    dr1clerk text,
    towncode text,
    desctown text,
    subdivision_code text,
    detailed_subdivision_code text,
    dr1liber text,
    dr1folio text,
    section text,
    map text,
    grid text,
    zoning_change_date date,
    rzrealdat date,
    ciuse text,
    descciuse text,
    exclass text,
    descexcl text,
    luom text,
    width double precision,
    depth double precision,
    pfuw text,
    pfus text,
    pflw text,
    pfsp text,
    pfsu text,
    pfic text,
    pfih text,
    recind text,
    permittyp text,
    strugrad text,
    descgrad text,
    strucnst text,
    desccnst text,
    strustyl text,
    strubldg text,
    descbldg text,
    lastinsp date,
    lastassd date,
    assessor text,
    transno1 text,
    grntnam1 text,
    gr1clrk1v text,
    gr1libr1 text,
    gr1folo1 text,
    convey1 text,
    mortgag1 text,
    crtarcod text,
    fcmacode text,
    agfndarea double precision,
    agfndluom text,
    entzndat date,
    entznassm double precision,
    plndevdat date,
    nprctstdat date,
    nprcarea double precision,
    nprcluom text,
    homqlcod text,
    homqldat date,
    resident double precision,
    resi2010 double precision,
    resi2000 double precision,
    resi1990 double precision,
    resiuths double precision,
    aprtment double precision,
    trailer double precision,
    special double precision,
    other double precision,
    ptype text,
    sdatwebadr text,
    polyid text,
    qoz text,
    qoz_tract text
);


--
-- Name: COLUMN parcels.ogc_fid; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.ogc_fid IS 'object id';


--
-- Name: COLUMN parcels.geoid; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.geoid IS 'FIPS code';


--
-- Name: COLUMN parcels.sourceagent; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.sourceagent IS 'Source Agent';


--
-- Name: COLUMN parcels.parcelnumb; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.parcelnumb IS 'Parcel ID';


--
-- Name: COLUMN parcels.usecode; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.usecode IS 'Parcel Use Code';


--
-- Name: COLUMN parcels.usedesc; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.usedesc IS 'Parcel Use Description';


--
-- Name: COLUMN parcels.zoning; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.zoning IS 'Zoning Code';


--
-- Name: COLUMN parcels.zoning_description; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.zoning_description IS 'Zoning description';


--
-- Name: COLUMN parcels.struct; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.struct IS 'Structure on Parcel';


--
-- Name: COLUMN parcels.multistruct; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.multistruct IS 'Multiple structures on Parcel';


--
-- Name: COLUMN parcels.structno; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.structno IS 'Number of structures on parcel';


--
-- Name: COLUMN parcels.yearbuilt; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.yearbuilt IS 'Structure Year Built';


--
-- Name: COLUMN parcels.numstories; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.numstories IS 'Number of Stories';


--
-- Name: COLUMN parcels.numunits; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.numunits IS 'Number of Units';


--
-- Name: COLUMN parcels.structstyle; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.structstyle IS 'Structure Style';


--
-- Name: COLUMN parcels.parvaltype; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.parvaltype IS 'Parcel Value Type';


--
-- Name: COLUMN parcels.improvval; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.improvval IS 'Improvement Value';


--
-- Name: COLUMN parcels.landval; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.landval IS 'Land Value';


--
-- Name: COLUMN parcels.parval; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.parval IS 'Total Parcel Value';


--
-- Name: COLUMN parcels.agval; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.agval IS 'Agricultural Value';


--
-- Name: COLUMN parcels.saleprice; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.saleprice IS 'Last sale price';


--
-- Name: COLUMN parcels.saledate; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.saledate IS 'Last sale date';


--
-- Name: COLUMN parcels.taxamt; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.taxamt IS 'Annual Tax Bill';


--
-- Name: COLUMN parcels.taxyear; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.taxyear IS 'A county provided attribute indicating the tax year the assessor data applies to';


--
-- Name: COLUMN parcels.owntype; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.owntype IS 'Owner Type';


--
-- Name: COLUMN parcels.owner; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.owner IS 'Owner Name';


--
-- Name: COLUMN parcels.ownfrst; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.ownfrst IS 'Owner First Name';


--
-- Name: COLUMN parcels.ownlast; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.ownlast IS 'Owner Last Name';


--
-- Name: COLUMN parcels.owner2; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.owner2 IS 'Second Owner Name';


--
-- Name: COLUMN parcels.owner3; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.owner3 IS 'Third Owner Name';


--
-- Name: COLUMN parcels.owner4; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.owner4 IS 'Fourth Owner Name';


--
-- Name: COLUMN parcels.subsurfown; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.subsurfown IS 'Subsurface Owner';


--
-- Name: COLUMN parcels.subowntype; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.subowntype IS 'Subsurface Owner Type';


--
-- Name: COLUMN parcels.mailadd; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.mailadd IS 'Mailing Address';


--
-- Name: COLUMN parcels.mail_address2; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.mail_address2 IS 'Mailing Address Second Line';


--
-- Name: COLUMN parcels.careof; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.careof IS 'Mailing Address Care of';


--
-- Name: COLUMN parcels.mail_addno; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.mail_addno IS 'Mailing Address Street Number';


--
-- Name: COLUMN parcels.mail_addpref; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.mail_addpref IS 'Mailing Address Street Prefix';


--
-- Name: COLUMN parcels.mail_addstr; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.mail_addstr IS 'Mailing Address Street Name';


--
-- Name: COLUMN parcels.mail_addsttyp; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.mail_addsttyp IS 'Mailing Address Street Type';


--
-- Name: COLUMN parcels.mail_addstsuf; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.mail_addstsuf IS 'Mailing Address Street Suffix';


--
-- Name: COLUMN parcels.mail_unit; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.mail_unit IS 'Mailing Address Unit Number';


--
-- Name: COLUMN parcels.mail_city; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.mail_city IS 'Mailing Address City';


--
-- Name: COLUMN parcels.mail_state2; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.mail_state2 IS 'Mailing Address State';


--
-- Name: COLUMN parcels.mail_zip; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.mail_zip IS 'Mailing Address ZIP Code';


--
-- Name: COLUMN parcels.mail_country; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.mail_country IS 'Mailing Address Country';


--
-- Name: COLUMN parcels.mail_urbanization; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.mail_urbanization IS 'Mailing Address Urbanizacion (Puerto Rico)';


--
-- Name: COLUMN parcels.address; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.address IS 'Parcel Address';


--
-- Name: COLUMN parcels.address2; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.address2 IS 'Parcel Address Second Line';


--
-- Name: COLUMN parcels.saddno; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.saddno IS 'Parcel Address Number';


--
-- Name: COLUMN parcels.saddpref; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.saddpref IS 'Parcel Address Prefix';


--
-- Name: COLUMN parcels.saddstr; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.saddstr IS 'Parcel Address Street Name';


--
-- Name: COLUMN parcels.saddsttyp; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.saddsttyp IS 'Parcel Address Street Type';


--
-- Name: COLUMN parcels.saddstsuf; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.saddstsuf IS 'Parcel Address Street Suffix';


--
-- Name: COLUMN parcels.sunit; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.sunit IS 'Parcel Address Unit';


--
-- Name: COLUMN parcels.scity; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.scity IS 'Parcel Address City';


--
-- Name: COLUMN parcels.original_address; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.original_address IS 'Address fields as originally provided by the county, separated by a semicolon and a space';


--
-- Name: COLUMN parcels.city; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.city IS 'US Census County Subdivision';


--
-- Name: COLUMN parcels.county; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.county IS 'Parcel Address County';


--
-- Name: COLUMN parcels.state2; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.state2 IS 'Parcel Address State';


--
-- Name: COLUMN parcels.szip; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.szip IS 'Parcel Address Zip Code';


--
-- Name: COLUMN parcels.urbanization; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.urbanization IS 'A postal address field commonly used in Puerto Rico';


--
-- Name: COLUMN parcels.location_name; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.location_name IS 'Location Name';


--
-- Name: COLUMN parcels.address_source; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.address_source IS 'Primary Address Source';


--
-- Name: COLUMN parcels.legaldesc; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.legaldesc IS 'Legal Description';


--
-- Name: COLUMN parcels.plat; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.plat IS 'Plat number the parcel is recorded on';


--
-- Name: COLUMN parcels.book; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.book IS 'Book/Liber the parcel is recorded in';


--
-- Name: COLUMN parcels.page; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.page IS 'Page/Folio the parcel is recorded on';


--
-- Name: COLUMN parcels.block; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.block IS 'Block';


--
-- Name: COLUMN parcels.lot; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.lot IS 'Lot';


--
-- Name: COLUMN parcels.neighborhood; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.neighborhood IS 'Neighborhood';


--
-- Name: COLUMN parcels.subdivision; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.subdivision IS 'Subdivision';


--
-- Name: COLUMN parcels.lat; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.lat IS 'On parcel centroid latitude decimal coordinate';


--
-- Name: COLUMN parcels.lon; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.lon IS 'On parcel centroid longitude decimal coordinate';


--
-- Name: COLUMN parcels.goz; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.goz IS 'Federal Qualified Opportunity Zone';


--
-- Name: COLUMN parcels.goz_tract; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.goz_tract IS 'Qualified Opportunity Zone Tract Number';


--
-- Name: COLUMN parcels.census_tract; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.census_tract IS 'Census 2010 Tract';


--
-- Name: COLUMN parcels.census_block; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.census_block IS 'Census 2010 Block';


--
-- Name: COLUMN parcels.census_blockgroup; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.census_blockgroup IS 'Census 2010 Blockgroup';


--
-- Name: COLUMN parcels.sourceref; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.sourceref IS 'A county provided reference for the parcel record';


--
-- Name: COLUMN parcels.sourcedate; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.sourcedate IS 'A county provided date for the parcel record';


--
-- Name: COLUMN parcels.sourceurl; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.sourceurl IS 'A county provided url to the county parcel record online';


--
-- Name: COLUMN parcels.recrdareatx; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.recrdareatx IS 'Recorded Area (text)';


--
-- Name: COLUMN parcels.recrdareano; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.recrdareano IS 'Recorded Area (number)';


--
-- Name: COLUMN parcels.gisacre; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.gisacre IS 'County-provided Acres';


--
-- Name: COLUMN parcels.sqft; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.sqft IS 'County-provided Parcel Square Feet';


--
-- Name: COLUMN parcels.ll_gisacre; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.ll_gisacre IS 'Loveland calculated parcel areas';


--
-- Name: COLUMN parcels.ll_gissqft; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.ll_gissqft IS 'Loveland calculated parcel square feet';


--
-- Name: COLUMN parcels.ll_bldg_footprint_sqft; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.ll_bldg_footprint_sqft IS 'Loveland calculated building footprint square feet';


--
-- Name: COLUMN parcels.ll_bldg_count; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.ll_bldg_count IS 'Total number of buildings on the parcel, calculated by loveland';


--
-- Name: COLUMN parcels.cdl_raw; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.cdl_raw IS 'Cropland Data Layer raw values';


--
-- Name: COLUMN parcels.cdl_majority_category; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.cdl_majority_category IS 'This is the human readable Category name for the land cover type that is most common on the parcel';


--
-- Name: COLUMN parcels.cdl_majority_percent; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.cdl_majority_percent IS 'This is the actual percentage of pixels for the majority category';


--
-- Name: COLUMN parcels.cdl_date; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.cdl_date IS 'The year of the Cropland Data Layer data set the current attributes are derived from';


--
-- Name: COLUMN parcels.revisedate; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.revisedate IS 'The last date of last revision as provided by the county assessors office if available';


--
-- Name: COLUMN parcels.path; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.path IS 'Lovelands human-readable identifier for this parcel. Not guaranteed to be stable between updates';


--
-- Name: COLUMN parcels.ll_stable_id; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.ll_stable_id IS 'Stable ID Status';


--
-- Name: COLUMN parcels.ll_uuid; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.ll_uuid IS 'Uniquely identifies a single parcel with a v4 uuid. A stable parcel id across county data refreshes. This field should be used for tracking indiviual parcels.';


--
-- Name: COLUMN parcels.ll_updated_at; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.ll_updated_at IS 'Timestamp of last update of any kind to this row, internal changes to row, and/or county updates';


--
-- Name: COLUMN parcels.dpv_status; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.dpv_status IS 'USPS Delivary Point Validation';


--
-- Name: COLUMN parcels.dpv_codes; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.dpv_codes IS 'Delivery Point Validation Codes';


--
-- Name: COLUMN parcels.dpv_notes; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.dpv_notes IS 'Delivery Point Validation Notes';


--
-- Name: COLUMN parcels.dpv_type; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.dpv_type IS 'Delivery Point Match Type';


--
-- Name: COLUMN parcels.cass_errorno; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.cass_errorno IS 'CASS Error Codes';


--
-- Name: COLUMN parcels.rdi; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.rdi IS 'Residential Delivary Indicator';


--
-- Name: COLUMN parcels.usps_vacancy; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.usps_vacancy IS 'USPS Vacancy Indicator';


--
-- Name: COLUMN parcels.usps_vacancy_date; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.usps_vacancy_date IS 'USPS Vacancy Indicator Date';


--
-- Name: COLUMN parcels.lbcs_activity; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.lbcs_activity IS 'Land Use Code: Activity';


--
-- Name: COLUMN parcels.lbcs_activity_desc; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.lbcs_activity_desc IS 'Land Use Code Description: Activity';


--
-- Name: COLUMN parcels.lbcs_function; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.lbcs_function IS 'Land Use Code: Function';


--
-- Name: COLUMN parcels.lbcs_function_desc; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.lbcs_function_desc IS 'Land Use Code Description: Function';


--
-- Name: COLUMN parcels.lbcs_structure; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.lbcs_structure IS 'Land Use Code: Structure';


--
-- Name: COLUMN parcels.lbcs_structure_desc; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.lbcs_structure_desc IS 'Land Use Code Description: Structure';


--
-- Name: COLUMN parcels.lbcs_site; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.lbcs_site IS 'Land Use Code: Site';


--
-- Name: COLUMN parcels.lbcs_site_desc; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.lbcs_site_desc IS 'Land Use Code Description: Site';


--
-- Name: COLUMN parcels.lbcs_ownership; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.lbcs_ownership IS 'Land Use Code: Ownership';


--
-- Name: COLUMN parcels.lbcs_ownership_desc; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.lbcs_ownership_desc IS 'Land Use Code Description: Ownership';


--
-- Name: COLUMN parcels.padus_public_access; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.padus_public_access IS 'PAD-US Public Access Designation';


--
-- Name: COLUMN parcels.homestead_exemption; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.homestead_exemption IS 'Homestead Exemption';


--
-- Name: COLUMN parcels.reviseddate; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.reviseddate IS 'Date of Last Revision';


--
-- Name: COLUMN parcels.jurscode; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.jurscode IS 'Jurisdiction Code';


--
-- Name: COLUMN parcels.acctid_county_stripped; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.acctid_county_stripped IS 'Account ID Without County Prefix';


--
-- Name: COLUMN parcels.geogcode; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.geogcode IS 'Geographic Code';


--
-- Name: COLUMN parcels.ooi; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.ooi IS 'Owner Occupied Indicator';


--
-- Name: COLUMN parcels.resityp; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.resityp IS 'Residential Address Type Code';


--
-- Name: COLUMN parcels.addrtyp; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.addrtyp IS 'Address Source Indicator';


--
-- Name: COLUMN parcels.namekey; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.namekey IS 'Owner Name Key';


--
-- Name: COLUMN parcels.dr1clerk; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.dr1clerk IS 'Deed Clerk';


--
-- Name: COLUMN parcels.towncode; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.towncode IS 'Town Code';


--
-- Name: COLUMN parcels.desctown; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.desctown IS 'Town Code Description';


--
-- Name: COLUMN parcels.subdivision_code; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.subdivision_code IS 'Subdivision Code';


--
-- Name: COLUMN parcels.detailed_subdivision_code; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.detailed_subdivision_code IS 'Detailed Subdivision Code';


--
-- Name: COLUMN parcels.dr1liber; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.dr1liber IS 'Deed Liber';


--
-- Name: COLUMN parcels.dr1folio; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.dr1folio IS 'Deed Folio';


--
-- Name: COLUMN parcels.section; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.section IS 'Section';


--
-- Name: COLUMN parcels.map; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.map IS 'Map';


--
-- Name: COLUMN parcels.grid; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.grid IS 'Grid';


--
-- Name: COLUMN parcels.zoning_change_date; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.zoning_change_date IS 'Zoning Change Date';


--
-- Name: COLUMN parcels.rzrealdat; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.rzrealdat IS 'Rezoned Reality Date';


--
-- Name: COLUMN parcels.ciuse; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.ciuse IS 'Commercial and Industrial Property Use Code';


--
-- Name: COLUMN parcels.descciuse; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.descciuse IS 'Commercial and Industrial Property Description';


--
-- Name: COLUMN parcels.exclass; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.exclass IS 'Exemption Class Code';


--
-- Name: COLUMN parcels.descexcl; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.descexcl IS 'Exemption Class Description';


--
-- Name: COLUMN parcels.luom; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.luom IS 'Land Area Unit';


--
-- Name: COLUMN parcels.width; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.width IS 'Width';


--
-- Name: COLUMN parcels.depth; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.depth IS 'Depth';


--
-- Name: COLUMN parcels.pfuw; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.pfuw IS 'Public Water';


--
-- Name: COLUMN parcels.pfus; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.pfus IS 'Public Sewer';


--
-- Name: COLUMN parcels.pflw; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.pflw IS 'Waterfront';


--
-- Name: COLUMN parcels.pfsp; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.pfsp IS 'Street Paved';


--
-- Name: COLUMN parcels.pfsu; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.pfsu IS 'Street Unpaved';


--
-- Name: COLUMN parcels.pfic; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.pfic IS 'Property Factor Influece - Commerical Indicator';


--
-- Name: COLUMN parcels.pfih; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.pfih IS 'Property Factor Influence - Historical';


--
-- Name: COLUMN parcels.recind; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.recind IS 'Recreation Influence Indicator';


--
-- Name: COLUMN parcels.permittyp; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.permittyp IS 'Permit Type';


--
-- Name: COLUMN parcels.strugrad; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.strugrad IS 'Construction Grade Code';


--
-- Name: COLUMN parcels.descgrad; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.descgrad IS 'Construction Grade Description';


--
-- Name: COLUMN parcels.strucnst; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.strucnst IS 'Construction Code';


--
-- Name: COLUMN parcels.desccnst; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.desccnst IS 'Construction Description';


--
-- Name: COLUMN parcels.strustyl; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.strustyl IS 'Building Style Code';


--
-- Name: COLUMN parcels.strubldg; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.strubldg IS 'Building Type code';


--
-- Name: COLUMN parcels.descbldg; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.descbldg IS 'Building Type Description';


--
-- Name: COLUMN parcels.lastinsp; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.lastinsp IS 'Last Date Inspected';


--
-- Name: COLUMN parcels.lastassd; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.lastassd IS 'Last Date Assessed';


--
-- Name: COLUMN parcels.assessor; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.assessor IS 'Assessor Numeric Code';


--
-- Name: COLUMN parcels.transno1; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.transno1 IS 'Sale Transfer Number';


--
-- Name: COLUMN parcels.grntnam1; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.grntnam1 IS 'Sale Grantor Name';


--
-- Name: COLUMN parcels.gr1clrk1v; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.gr1clrk1v IS 'Grantor Deed Clerk';


--
-- Name: COLUMN parcels.gr1libr1; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.gr1libr1 IS 'Grantor Liber';


--
-- Name: COLUMN parcels.gr1folo1; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.gr1folo1 IS 'Grantor Folio';


--
-- Name: COLUMN parcels.convey1; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.convey1 IS 'How Conveyed';


--
-- Name: COLUMN parcels.mortgag1; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.mortgag1 IS 'Mortgage';


--
-- Name: COLUMN parcels.crtarcod; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.crtarcod IS 'Critical Area Code';


--
-- Name: COLUMN parcels.fcmacode; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.fcmacode IS 'Forest Conservation Management Agreement Code';


--
-- Name: COLUMN parcels.agfndarea; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.agfndarea IS 'Agricultural Preservation Foundation Area';


--
-- Name: COLUMN parcels.agfndluom; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.agfndluom IS 'Agricultural Preservation Area Unit';


--
-- Name: COLUMN parcels.entzndat; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.entzndat IS 'Enterprise Zone Date';


--
-- Name: COLUMN parcels.entznassm; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.entznassm IS 'Enterprise Zone Assessment';


--
-- Name: COLUMN parcels.plndevdat; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.plndevdat IS 'PUD date';


--
-- Name: COLUMN parcels.nprctstdat; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.nprctstdat IS 'Perc Test Date';


--
-- Name: COLUMN parcels.nprcarea; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.nprcarea IS 'Perc Test Area';


--
-- Name: COLUMN parcels.nprcluom; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.nprcluom IS 'Perc Test Area Unit';


--
-- Name: COLUMN parcels.homqlcod; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.homqlcod IS 'Homestead Tax Credit Application';


--
-- Name: COLUMN parcels.homqldat; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.homqldat IS 'Homestead Tax Credit Date';


--
-- Name: COLUMN parcels.resident; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.resident IS 'Resident';


--
-- Name: COLUMN parcels.resi2010; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.resi2010 IS 'Resident Property 2010';


--
-- Name: COLUMN parcels.resi2000; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.resi2000 IS 'Resident Property 2000';


--
-- Name: COLUMN parcels.resi1990; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.resi1990 IS 'Resident Property 1990';


--
-- Name: COLUMN parcels.resiuths; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.resiuths IS 'Resident Property Low Value';


--
-- Name: COLUMN parcels.aprtment; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.aprtment IS 'Apartment Residence';


--
-- Name: COLUMN parcels.trailer; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.trailer IS 'Trailer Residence';


--
-- Name: COLUMN parcels.special; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.special IS 'Special Residence';


--
-- Name: COLUMN parcels.other; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.other IS 'Other';


--
-- Name: COLUMN parcels.ptype; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.ptype IS 'Type of Digitized Parcel';


--
-- Name: COLUMN parcels.sdatwebadr; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.sdatwebadr IS 'SDAT URL';


--
-- Name: COLUMN parcels.polyid; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.polyid IS 'Polygon ID';


--
-- Name: COLUMN parcels.qoz; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.qoz IS 'Federal Qualified Opportunity Zone';


--
-- Name: COLUMN parcels.qoz_tract; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels.qoz_tract IS 'Qualified Opportunity Zone Tract Number';


--
-- Name: parcels_agriculture; Type: TABLE; Schema: parcels_production; Owner: -
--

CREATE TABLE parcels_production.parcels_agriculture (
    plant_hardiness_updated bigint,
    hardiness_zone character varying(2),
    hardiness_temp smallint,
    ll_uuid character varying(36) NOT NULL
);


--
-- Name: parcels_airport; Type: TABLE; Schema: parcels_production; Owner: -
--

CREATE TABLE parcels_production.parcels_airport (
    distance_km integer NOT NULL,
    abbrev character varying(10),
    ll_uuid character varying(36) NOT NULL
);


--
-- Name: parcels_coastline; Type: TABLE; Schema: parcels_production; Owner: -
--

CREATE TABLE parcels_production.parcels_coastline (
    distance_km integer NOT NULL,
    ll_uuid character varying(36) NOT NULL
);


--
-- Name: parcels_density; Type: TABLE; Schema: parcels_production; Owner: -
--

CREATE TABLE parcels_production.parcels_density (
    geological_features_updated bigint,
    closest_geological_features_name character varying(300),
    closest_geological_features_distance character varying(300),
    closest_geological_features_tags character varying(300),
    closest_geological_features_items json,
    geological_features_1km json,
    geological_features_count_1km integer,
    geological_features_5km json,
    geological_features_count_5km integer,
    geological_features_10km json,
    geological_features_count_10km integer,
    geological_features_25km json,
    geological_features_count_25km integer,
    healthcare_updated bigint,
    closest_healthcare_name character varying(300),
    closest_healthcare_distance character varying(300),
    closest_healthcare_tags character varying(300),
    closest_healthcare_items json,
    healthcare_1km json,
    healthcare_count_1km integer,
    healthcare_5km json,
    healthcare_count_5km integer,
    healthcare_10km json,
    healthcare_count_10km integer,
    healthcare_25km json,
    healthcare_count_25km integer,
    healthcare_50km json,
    healthcare_count_50km integer,
    healthcare_100km json,
    healthcare_count_100km integer,
    healthcare_150km json,
    healthcare_count_150km integer,
    healthcare_200km json,
    healthcare_count_200km integer,
    library_updated bigint,
    closest_library_name character varying(300),
    closest_library_distance character varying(300),
    closest_library_tags character varying(300),
    closest_library_items json,
    library_1km json,
    library_count_1km integer,
    library_5km json,
    library_count_5km integer,
    library_10km json,
    library_count_10km integer,
    library_25km json,
    library_count_25km integer,
    library_50km json,
    library_count_50km integer,
    military_updated bigint,
    closest_military_name character varying(300),
    closest_military_distance numeric(12,2),
    closest_military_tags character varying(300),
    closest_military_items json,
    military_1km json,
    military_count_1km integer,
    military_5km json,
    military_count_5km integer,
    military_10km json,
    military_count_10km integer,
    military_25km json,
    military_count_25km integer,
    military_50km json,
    military_count_50km integer,
    military_100km json,
    military_count_100km integer,
    military_150km json,
    military_count_150km integer,
    military_200km json,
    military_count_200km integer,
    natural_updated bigint,
    closest_natural_name character varying(300),
    closest_natural_distance character varying(300),
    closest_natural_tags character varying(300),
    closest_natural_items json,
    natural_1km json,
    natural_count_1km integer,
    natural_density_1km numeric(8,7),
    natural_5km json,
    natural_count_5km integer,
    natural_density_5km numeric(8,7),
    natural_10km json,
    natural_count_10km integer,
    natural_density_10km numeric(8,7),
    natural_25km json,
    natural_count_25km integer,
    natural_density_25km numeric(8,7),
    pollution_updated bigint,
    closest_pollution_name character varying(300),
    closest_pollution_distance character varying(300),
    closest_pollution_tags character varying(300),
    closest_pollution_items json,
    pollution_1km json,
    pollution_count_1km integer,
    pollution_density_1km numeric(8,7),
    pollution_5km json,
    pollution_count_5km integer,
    pollution_density_5km numeric(8,7),
    pollution_10km json,
    pollution_count_10km integer,
    pollution_density_10km numeric(8,7),
    pollution_25km json,
    pollution_count_25km integer,
    pollution_density_25km numeric(8,7),
    public_land_updated bigint,
    closest_public_land_name character varying(300),
    closest_public_land_distance character varying(300),
    closest_public_land_tags character varying(300),
    closest_public_land_items json,
    public_land_1km json,
    public_land_count_1km integer,
    public_land_density_1km numeric(8,7),
    public_land_5km json,
    public_land_count_5km integer,
    public_land_density_5km numeric(8,7),
    public_land_10km json,
    public_land_count_10km integer,
    public_land_density_10km numeric(8,7),
    public_land_25km json,
    public_land_count_25km integer,
    public_land_density_25km numeric(8,7),
    religious_updated bigint,
    closest_religious_name character varying(300),
    closest_religious_distance character varying(300),
    closest_religious_tags character varying(300),
    closest_religious_items json,
    religion_1km json,
    religion_count_1km integer,
    religion_density_1km numeric(8,7),
    religion_5km json,
    religion_count_5km integer,
    religion_density_5km numeric(8,7),
    religion_10km json,
    religion_count_10km integer,
    religion_density_10km numeric(8,7),
    religion_25km json,
    religion_count_25km integer,
    religion_density_25km numeric(8,7),
    religion_50km json,
    religion_count_50km integer,
    religion_density_50km numeric(8,7),
    religion_100km json,
    religion_count_100km integer,
    religion_density_100km numeric(8,7),
    religion_150km json,
    religion_count_150km integer,
    religion_density_150km numeric(8,7),
    spring_updated bigint,
    closest_spring_name character varying(300),
    closest_spring_distance numeric(12,2),
    closest_spring_tags character varying(300),
    closest_spring_items json,
    spring_1km json,
    spring_count_1km integer,
    spring_5km json,
    spring_count_5km integer,
    spring_10km json,
    spring_count_10km integer,
    spring_25km json,
    spring_count_25km integer,
    spring_50km json,
    spring_count_50km integer,
    spring_100km json,
    spring_count_100km integer,
    water_updated bigint,
    closest_water_name character varying(300),
    closest_water_distance character varying(300),
    closest_water_tags character varying(300),
    closest_water_items json,
    water_1km json,
    water_count_1km integer,
    water_density_1km numeric(8,7),
    water_5km json,
    water_count_5km integer,
    water_density_5km numeric(8,7),
    water_10km json,
    water_count_10km integer,
    water_density_10km numeric(8,7),
    water_25km json,
    water_count_25km integer,
    water_density_25km numeric(8,7),
    water_50km json,
    water_count_50km integer,
    water_density_50km numeric(8,7),
    ll_uuid character varying(36) NOT NULL,
    parcels_updated bigint,
    parcels_count_1km integer,
    parcels_density_1km numeric(8,7),
    parcels_count_5km integer,
    parcels_density_5km numeric(8,7),
    parcels_count_10km integer,
    parcels_density_10km numeric(8,7),
    parcels_count_25km integer,
    parcels_density_25km numeric(8,7),
    parcels_count_50km integer,
    parcels_density_50km numeric(8,7)
);


--
-- Name: parcels_election_results; Type: TABLE; Schema: parcels_production; Owner: -
--

CREATE TABLE parcels_production.parcels_election_results (
    ll_uuid character varying(36) NOT NULL,
    election_year smallint NOT NULL,
    votes_dem integer,
    votes_rep integer,
    votes_total integer,
    pct_dem_lead numeric(6,4)
);


--
-- Name: parcels_elevation; Type: TABLE; Schema: parcels_production; Owner: -
--

CREATE TABLE parcels_production.parcels_elevation (
    min integer NOT NULL,
    p10 integer NOT NULL,
    p25 integer NOT NULL,
    p50 integer NOT NULL,
    p75 integer NOT NULL,
    p90 integer NOT NULL,
    max integer NOT NULL,
    median integer NOT NULL,
    ll_uuid character varying(36) NOT NULL
);


--
-- Name: parcels_geometry; Type: TABLE; Schema: parcels_production; Owner: -
--

CREATE TABLE parcels_production.parcels_geometry (
    coordinates json NOT NULL,
    ll_uuid character varying(36) NOT NULL
);


--
-- Name: parcels_geometry_extra; Type: TABLE; Schema: parcels_production; Owner: -
--

CREATE TABLE parcels_production.parcels_geometry_extra (
    path character varying(300) NOT NULL,
    ogc_fid bigint NOT NULL,
    owner text,
    parcelnumb text,
    address text,
    coordinates json NOT NULL
);


--
-- Name: COLUMN parcels_geometry_extra.ogc_fid; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels_geometry_extra.ogc_fid IS 'object id';


--
-- Name: COLUMN parcels_geometry_extra.owner; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels_geometry_extra.owner IS 'Owner Name';


--
-- Name: COLUMN parcels_geometry_extra.parcelnumb; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels_geometry_extra.parcelnumb IS 'Parcel ID';


--
-- Name: COLUMN parcels_geometry_extra.address; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels_geometry_extra.address IS 'Parcel Address';


--
-- Name: parcels_geometry_extra_ogc_fid_seq; Type: SEQUENCE; Schema: parcels_production; Owner: -
--

CREATE SEQUENCE parcels_production.parcels_geometry_extra_ogc_fid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: parcels_geometry_extra_ogc_fid_seq; Type: SEQUENCE OWNED BY; Schema: parcels_production; Owner: -
--

ALTER SEQUENCE parcels_production.parcels_geometry_extra_ogc_fid_seq OWNED BY parcels_production.parcels_geometry_extra.ogc_fid;


--
-- Name: parcels_internet; Type: TABLE; Schema: parcels_production; Owner: -
--

CREATE TABLE parcels_production.parcels_internet (
    broadband_updated bigint NOT NULL,
    max_download_speed integer,
    max_upload_speed integer,
    low_latency boolean,
    closest_provider_h3_res8_id character varying(16),
    closest_provider_distance bigint,
    nearby_max_download_speed integer,
    nearby_max_upload_speed integer,
    surrounding_providers json,
    surrounding_coverage_density numeric(6,5),
    ll_uuid character varying(36) NOT NULL
);


--
-- Name: parcels_meta; Type: TABLE; Schema: parcels_production; Owner: -
--

CREATE TABLE parcels_production.parcels_meta (
    public boolean,
    tribal boolean,
    ll_uuid character varying(36) NOT NULL
);


--
-- Name: parcels_nature; Type: TABLE; Schema: parcels_production; Owner: -
--

CREATE TABLE parcels_production.parcels_nature (
    nature_updated integer,
    nature_score numeric(5,2),
    leaf_rating smallint,
    ll_uuid character varying(36) NOT NULL
);


--
-- Name: parcels_rank; Type: TABLE; Schema: parcels_production; Owner: -
--

CREATE TABLE parcels_production.parcels_rank (
    hardiness_temp_rank smallint,
    max_download_speed_rank smallint,
    closest_military_distance_rank smallint,
    closest_spring_distance_rank smallint,
    military_count_25km_rank smallint,
    military_count_50km_rank smallint,
    military_count_200km_rank smallint,
    spring_count_1km_rank smallint,
    spring_count_5km_rank smallint,
    spring_count_10km_rank smallint,
    spring_count_50km_rank smallint,
    spring_count_100km_rank smallint,
    ll_uuid character varying(36) NOT NULL,
    max_upload_speed_rank smallint,
    closest_provider_distance_rank smallint,
    nearby_max_download_speed_rank smallint,
    nearby_max_upload_speed_rank smallint,
    surrounding_coverage_density_rank smallint,
    daytime_hours_above_50_pct_cloud_cover_in_2015_rank smallint,
    daytime_hours_above_50_pct_cloud_cover_in_2016_rank smallint,
    daytime_hours_above_50_pct_cloud_cover_in_2017_rank smallint,
    daytime_hours_above_50_pct_cloud_cover_in_2018_rank smallint,
    daytime_hours_above_50_pct_cloud_cover_in_2019_rank smallint,
    daytime_hours_above_50_pct_cloud_cover_in_2020_rank smallint,
    daytime_hours_above_50_pct_cloud_cover_in_2021_rank smallint,
    daytime_hours_above_50_pct_cloud_cover_in_2022_rank smallint,
    daytime_hours_above_60_pct_cloud_cover_in_2015_rank smallint,
    daytime_hours_above_60_pct_cloud_cover_in_2016_rank smallint,
    daytime_hours_above_60_pct_cloud_cover_in_2017_rank smallint,
    daytime_hours_above_60_pct_cloud_cover_in_2018_rank smallint,
    daytime_hours_above_60_pct_cloud_cover_in_2019_rank smallint,
    daytime_hours_above_60_pct_cloud_cover_in_2020_rank smallint,
    daytime_hours_above_60_pct_cloud_cover_in_2021_rank smallint,
    daytime_hours_above_60_pct_cloud_cover_in_2022_rank smallint,
    daytime_hours_above_70_pct_cloud_cover_in_2015_rank smallint,
    daytime_hours_above_70_pct_cloud_cover_in_2016_rank smallint,
    daytime_hours_above_70_pct_cloud_cover_in_2017_rank smallint,
    daytime_hours_above_70_pct_cloud_cover_in_2018_rank smallint,
    daytime_hours_above_70_pct_cloud_cover_in_2019_rank smallint,
    daytime_hours_above_70_pct_cloud_cover_in_2020_rank smallint,
    daytime_hours_above_70_pct_cloud_cover_in_2021_rank smallint,
    daytime_hours_above_70_pct_cloud_cover_in_2022_rank smallint,
    daytime_hours_above_80_pct_cloud_cover_in_2015_rank smallint,
    daytime_hours_above_80_pct_cloud_cover_in_2016_rank smallint,
    daytime_hours_above_80_pct_cloud_cover_in_2017_rank smallint,
    daytime_hours_above_80_pct_cloud_cover_in_2018_rank smallint,
    daytime_hours_above_80_pct_cloud_cover_in_2019_rank smallint,
    daytime_hours_above_80_pct_cloud_cover_in_2020_rank smallint,
    daytime_hours_above_80_pct_cloud_cover_in_2021_rank smallint,
    daytime_hours_above_80_pct_cloud_cover_in_2022_rank smallint,
    daytime_hours_above_90_pct_cloud_cover_in_2015_rank smallint,
    daytime_hours_above_90_pct_cloud_cover_in_2016_rank smallint,
    daytime_hours_above_90_pct_cloud_cover_in_2017_rank smallint,
    daytime_hours_above_90_pct_cloud_cover_in_2018_rank smallint,
    daytime_hours_above_90_pct_cloud_cover_in_2019_rank smallint,
    daytime_hours_above_90_pct_cloud_cover_in_2020_rank smallint,
    daytime_hours_above_90_pct_cloud_cover_in_2021_rank smallint,
    daytime_hours_above_90_pct_cloud_cover_in_2022_rank smallint,
    avg_fair_days_rank smallint,
    avg_perfect_days_rank smallint,
    avg_active_days_rank smallint,
    avg_dinner_outside_days_rank smallint,
    avg_indoor_days_rank smallint,
    avg_hrs_below_0c_rank smallint,
    avg_hrs_below_5c_rank smallint,
    avg_hrs_below_10c_rank smallint,
    avg_daytime_hrs_below_0c_rank smallint,
    avg_daytime_hrs_below_5c_rank smallint,
    avg_daytime_hrs_below_10c_rank smallint,
    avg_cloudy_hours_10pct_rank smallint,
    avg_cloudy_hours_50pct_rank smallint,
    avg_cloudy_hours_90pct_rank smallint
);


--
-- Name: parcels_road; Type: TABLE; Schema: parcels_production; Owner: -
--

CREATE TABLE parcels_production.parcels_road (
    road_km numeric(9,5) NOT NULL,
    paved_km numeric(9,5) NOT NULL,
    high_traffic_km numeric(9,5) NOT NULL,
    highway_km numeric(9,5) NOT NULL,
    ll_uuid character varying(36) NOT NULL
);


--
-- Name: parcels_seismic_hazards_model; Type: TABLE; Schema: parcels_production; Owner: -
--

CREATE TABLE parcels_production.parcels_seismic_hazards_model (
    ll_uuid character varying(36) NOT NULL,
    ll_updated_at timestamp with time zone,
    year smallint NOT NULL,
    low_cont smallint,
    high_cont smallint
);


--
-- Name: parcels_viewshed; Type: TABLE; Schema: parcels_production; Owner: -
--

CREATE TABLE parcels_production.parcels_viewshed (
    latitude numeric(8,6),
    longitude numeric(9,6),
    viewshed_percentage numeric(5,2) NOT NULL,
    viewshed_index integer NOT NULL,
    viewshed_index_under_2km integer NOT NULL,
    viewshed_index_2km integer NOT NULL,
    viewshed_index_5km integer NOT NULL,
    viewshed_index_10km integer NOT NULL,
    viewshed_index_20km integer NOT NULL,
    viewshed_index_50km integer NOT NULL,
    viewshed_index_75km integer NOT NULL,
    viewshed_nw integer NOT NULL,
    viewshed_sw integer NOT NULL,
    viewshed_se integer NOT NULL,
    viewshed_ne integer NOT NULL,
    viewshed_n integer NOT NULL,
    viewshed_e integer NOT NULL,
    viewshed_s integer NOT NULL,
    viewshed_w integer NOT NULL,
    ll_uuid character varying(36) NOT NULL
);


--
-- Name: COLUMN parcels_viewshed.latitude; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels_viewshed.latitude IS 'latitude decimal coordinate';


--
-- Name: COLUMN parcels_viewshed.longitude; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.parcels_viewshed.longitude IS 'longitude decimal coordinate';


--
-- Name: parcels_weather; Type: TABLE; Schema: parcels_production; Owner: -
--

CREATE TABLE parcels_production.parcels_weather (
    ll_uuid character(36) NOT NULL,
    year smallint NOT NULL,
    updated bigint,
    hrs_below_0_c_apparent_temperature smallint,
    hrs_below_5_c_apparent_temperature smallint,
    hrs_below_10_c_apparent_temperature smallint,
    daytime_hrs_below_0_c_apparent_temperature smallint,
    daytime_hrs_below_5_c_apparent_temperature smallint,
    daytime_hrs_below_10_c_apparent_temperature smallint,
    fair_days smallint,
    fair_days_dates character(10)[],
    perfect_days smallint,
    perfect_days_dates character(10)[],
    active_days smallint,
    active_days_dates character(10)[],
    dinner_outside_days smallint,
    dinner_outside_days_dates character(10)[],
    indoor_days smallint,
    indoor_days_dates character(10)[],
    daytime_hours smallint,
    daytime_hours_above_10_pct_cloud_cover smallint,
    daytime_hours_above_20_pct_cloud_cover smallint,
    daytime_hours_above_30_pct_cloud_cover smallint,
    daytime_hours_above_40_pct_cloud_cover smallint,
    daytime_hours_above_50_pct_cloud_cover smallint,
    daytime_hours_above_60_pct_cloud_cover smallint,
    daytime_hours_above_70_pct_cloud_cover smallint,
    daytime_hours_above_80_pct_cloud_cover smallint,
    daytime_hours_above_90_pct_cloud_cover smallint
);


--
-- Name: parcels_weather_summary; Type: TABLE; Schema: parcels_production; Owner: -
--

CREATE TABLE parcels_production.parcels_weather_summary (
    ll_uuid character(36) NOT NULL,
    updated bigint,
    years smallint[] NOT NULL,
    avg_fair_days numeric(5,2),
    median_fair_days smallint,
    min_fair_days smallint,
    max_fair_days smallint,
    avg_perfect_days numeric(5,2),
    median_perfect_days smallint,
    min_perfect_days smallint,
    max_perfect_days smallint,
    avg_active_days numeric(5,2),
    median_active_days smallint,
    min_active_days smallint,
    max_active_days smallint,
    avg_dinner_outside_days numeric(5,2),
    median_dinner_outside_days smallint,
    min_dinner_outside_days smallint,
    max_dinner_outside_days smallint,
    avg_indoor_days numeric(5,2),
    median_indoor_days smallint,
    min_indoor_days smallint,
    max_indoor_days smallint,
    avg_hrs_below_0c numeric(7,2),
    median_hrs_below_0c smallint,
    min_hrs_below_0c smallint,
    max_hrs_below_0c smallint,
    avg_hrs_below_5c numeric(7,2),
    median_hrs_below_5c smallint,
    min_hrs_below_5c smallint,
    max_hrs_below_5c smallint,
    avg_hrs_below_10c numeric(7,2),
    median_hrs_below_10c smallint,
    min_hrs_below_10c smallint,
    max_hrs_below_10c smallint,
    avg_daytime_hrs_below_0c numeric(7,2),
    median_daytime_hrs_below_0c smallint,
    min_daytime_hrs_below_0c smallint,
    max_daytime_hrs_below_0c smallint,
    avg_daytime_hrs_below_5c numeric(7,2),
    median_daytime_hrs_below_5c smallint,
    min_daytime_hrs_below_5c smallint,
    max_daytime_hrs_below_5c smallint,
    avg_daytime_hrs_below_10c numeric(7,2),
    median_daytime_hrs_below_10c smallint,
    min_daytime_hrs_below_10c smallint,
    max_daytime_hrs_below_10c smallint,
    avg_daytime_hours numeric(7,2),
    median_daytime_hours smallint,
    min_daytime_hours smallint,
    max_daytime_hours smallint,
    avg_cloudy_hours_10pct numeric(7,2),
    median_cloudy_hours_10pct smallint,
    min_cloudy_hours_10pct smallint,
    max_cloudy_hours_10pct smallint,
    avg_cloudy_hours_50pct numeric(7,2),
    median_cloudy_hours_50pct smallint,
    min_cloudy_hours_50pct smallint,
    max_cloudy_hours_50pct smallint,
    avg_cloudy_hours_90pct numeric(7,2),
    median_cloudy_hours_90pct smallint,
    min_cloudy_hours_90pct smallint,
    max_cloudy_hours_90pct smallint
);


--
-- Name: plant_hardiness_zones; Type: TABLE; Schema: parcels_production; Owner: -
--

CREATE TABLE parcels_production.plant_hardiness_zones (
    statefp character varying(2) NOT NULL,
    stusps character varying(2) NOT NULL,
    state character varying(100) NOT NULL,
    temp smallint NOT NULL,
    zone character varying(2) NOT NULL,
    coordinates json NOT NULL
);


--
-- Name: properties; Type: TABLE; Schema: parcels_production; Owner: -
--

CREATE TABLE parcels_production.properties (
    ogc_fid bigint NOT NULL,
    name character varying(50),
    postal character varying(10),
    classes character varying(30),
    headline character varying(50),
    path character varying(100) NOT NULL,
    sqmi numeric(20,8),
    num_parcels integer,
    num_owners integer,
    import_cursor integer,
    selected boolean DEFAULT false
);


--
-- Name: COLUMN properties.ogc_fid; Type: COMMENT; Schema: parcels_production; Owner: -
--

COMMENT ON COLUMN parcels_production.properties.ogc_fid IS 'object id';


--
-- Name: roads; Type: TABLE; Schema: parcels_production; Owner: -
--

CREATE TABLE parcels_production.roads (
    number integer,
    road_class character varying(15),
    type character varying(16),
    divided character varying(16),
    country character varying(36),
    state character varying(60),
    length numeric(9,3),
    continent character varying(16),
    "lineString" json
);


--
-- Name: tiles; Type: TABLE; Schema: parcels_production; Owner: -
--

CREATE TABLE parcels_production.tiles (
    count smallint NOT NULL,
    z smallint NOT NULL,
    y integer NOT NULL,
    x integer NOT NULL
);


--
-- Name: usgs_seismic_hazards_model; Type: TABLE; Schema: parcels_production; Owner: -
--

CREATE TABLE parcels_production.usgs_seismic_hazards_model (
    year smallint NOT NULL,
    coordinates parcels_production.geometry(Geometry,4326),
    low_cont smallint,
    high_cont smallint
);


--
-- Name: parcels_geometry_extra ogc_fid; Type: DEFAULT; Schema: parcels_production; Owner: -
--

ALTER TABLE ONLY parcels_production.parcels_geometry_extra ALTER COLUMN ogc_fid SET DEFAULT nextval('parcels_production.parcels_geometry_extra_ogc_fid_seq'::regclass);


--
-- Name: coverage coverage_pkey; Type: CONSTRAINT; Schema: parcels_production; Owner: -
--

ALTER TABLE ONLY parcels_production.coverage
    ADD CONSTRAINT coverage_pkey PRIMARY KEY (column_name, table_name);


--
-- Name: database_table_views database_table_views_pkey; Type: CONSTRAINT; Schema: parcels_production; Owner: -
--

ALTER TABLE ONLY parcels_production.database_table_views
    ADD CONSTRAINT database_table_views_pkey PRIMARY KEY (view_id);


--
-- Name: database_table_views database_table_views_view_name_table_name_user_public_key_key; Type: CONSTRAINT; Schema: parcels_production; Owner: -
--

ALTER TABLE ONLY parcels_production.database_table_views
    ADD CONSTRAINT database_table_views_view_name_table_name_user_public_key_key UNIQUE (view_name, table_name, user_public_key);


--
-- Name: election_results election_results_pkey; Type: CONSTRAINT; Schema: parcels_production; Owner: -
--

ALTER TABLE ONLY parcels_production.election_results
    ADD CONSTRAINT election_results_pkey PRIMARY KEY (geoid, election_year);


--
-- Name: heatmaps heatmaps_h3_res4_id_h3_res4_id1_key; Type: CONSTRAINT; Schema: parcels_production; Owner: -
--

ALTER TABLE ONLY parcels_production.heatmaps
    ADD CONSTRAINT heatmaps_h3_res4_id_h3_res4_id1_key UNIQUE (h3_res4_id) INCLUDE (h3_res4_id);


--
-- Name: importers importers_pkey; Type: CONSTRAINT; Schema: parcels_production; Owner: -
--

ALTER TABLE ONLY parcels_production.importers
    ADD CONSTRAINT importers_pkey PRIMARY KEY (name);


--
-- Name: parcels_election_results parcels_election_results_pkey; Type: CONSTRAINT; Schema: parcels_production; Owner: -
--

ALTER TABLE ONLY parcels_production.parcels_election_results
    ADD CONSTRAINT parcels_election_results_pkey PRIMARY KEY (ll_uuid, election_year);


--
-- Name: parcels_seismic_hazards_model parcels_seismic_hazards_model_pkey; Type: CONSTRAINT; Schema: parcels_production; Owner: -
--

ALTER TABLE ONLY parcels_production.parcels_seismic_hazards_model
    ADD CONSTRAINT parcels_seismic_hazards_model_pkey PRIMARY KEY (ll_uuid, year);


--
-- Name: parcels_weather parcels_weather_pkey; Type: CONSTRAINT; Schema: parcels_production; Owner: -
--

ALTER TABLE ONLY parcels_production.parcels_weather
    ADD CONSTRAINT parcels_weather_pkey PRIMARY KEY (ll_uuid, year);


--
-- Name: parcels_weather_summary parcels_weather_summary_pkey; Type: CONSTRAINT; Schema: parcels_production; Owner: -
--

ALTER TABLE ONLY parcels_production.parcels_weather_summary
    ADD CONSTRAINT parcels_weather_summary_pkey PRIMARY KEY (ll_uuid);


--
-- Name: properties properties_pkey; Type: CONSTRAINT; Schema: parcels_production; Owner: -
--

ALTER TABLE ONLY parcels_production.properties
    ADD CONSTRAINT properties_pkey PRIMARY KEY (path);


--
-- Name: election_results_geometry_idx; Type: INDEX; Schema: parcels_production; Owner: -
--

CREATE INDEX election_results_geometry_idx ON parcels_production.election_results USING gist (coordinates);


--
-- Name: idx_650104_abbrev; Type: INDEX; Schema: parcels_production; Owner: -
--

CREATE UNIQUE INDEX idx_650104_abbrev ON parcels_production.airports USING btree (abbrev);


--
-- Name: idx_650109_provider_id; Type: INDEX; Schema: parcels_production; Owner: -
--

CREATE UNIQUE INDEX idx_650109_provider_id ON parcels_production.broadband_availability USING btree (provider_id, technology, h3_res8_id);


--
-- Name: idx_650112_lat; Type: INDEX; Schema: parcels_production; Owner: -
--

CREATE UNIQUE INDEX idx_650112_lat ON parcels_production.coordinates USING btree (lat, lon);


--
-- Name: idx_650117_column_name; Type: INDEX; Schema: parcels_production; Owner: -
--

CREATE UNIQUE INDEX idx_650117_column_name ON parcels_production.coverage USING btree (column_name, table_name);


--
-- Name: idx_650120_name; Type: INDEX; Schema: parcels_production; Owner: -
--

CREATE UNIQUE INDEX idx_650120_name ON parcels_production.importers USING btree (name);


--
-- Name: idx_650125_gisacre; Type: INDEX; Schema: parcels_production; Owner: -
--

CREATE INDEX idx_650125_gisacre ON parcels_production.parcels USING btree (gisacre);


--
-- Name: idx_650125_ll_gisacre; Type: INDEX; Schema: parcels_production; Owner: -
--

CREATE INDEX idx_650125_ll_gisacre ON parcels_production.parcels USING btree (ll_gisacre);


--
-- Name: idx_650125_ll_uuid; Type: INDEX; Schema: parcels_production; Owner: -
--

CREATE UNIQUE INDEX idx_650125_ll_uuid ON parcels_production.parcels USING btree (ll_uuid);


--
-- Name: idx_650125_path; Type: INDEX; Schema: parcels_production; Owner: -
--

CREATE INDEX idx_650125_path ON parcels_production.parcels USING btree (path);


--
-- Name: idx_650130_ll_uuid; Type: INDEX; Schema: parcels_production; Owner: -
--

CREATE UNIQUE INDEX idx_650130_ll_uuid ON parcels_production.parcels_agriculture USING btree (ll_uuid);


--
-- Name: idx_650133_ll_uuid; Type: INDEX; Schema: parcels_production; Owner: -
--

CREATE UNIQUE INDEX idx_650133_ll_uuid ON parcels_production.parcels_airport USING btree (ll_uuid);


--
-- Name: idx_650136_ll_uuid; Type: INDEX; Schema: parcels_production; Owner: -
--

CREATE UNIQUE INDEX idx_650136_ll_uuid ON parcels_production.parcels_coastline USING btree (ll_uuid);


--
-- Name: idx_650139_ll_uuid; Type: INDEX; Schema: parcels_production; Owner: -
--

CREATE UNIQUE INDEX idx_650139_ll_uuid ON parcels_production.parcels_density USING btree (ll_uuid);


--
-- Name: idx_650144_ll_uuid; Type: INDEX; Schema: parcels_production; Owner: -
--

CREATE UNIQUE INDEX idx_650144_ll_uuid ON parcels_production.parcels_elevation USING btree (ll_uuid);


--
-- Name: idx_650147_ll_uuid; Type: INDEX; Schema: parcels_production; Owner: -
--

CREATE UNIQUE INDEX idx_650147_ll_uuid ON parcels_production.parcels_geometry USING btree (ll_uuid);


--
-- Name: idx_650153_path; Type: INDEX; Schema: parcels_production; Owner: -
--

CREATE UNIQUE INDEX idx_650153_path ON parcels_production.parcels_geometry_extra USING btree (path);


--
-- Name: idx_650159_ll_uuid; Type: INDEX; Schema: parcels_production; Owner: -
--

CREATE UNIQUE INDEX idx_650159_ll_uuid ON parcels_production.parcels_internet USING btree (ll_uuid);


--
-- Name: idx_650164_ll_uuid; Type: INDEX; Schema: parcels_production; Owner: -
--

CREATE UNIQUE INDEX idx_650164_ll_uuid ON parcels_production.parcels_meta USING btree (ll_uuid);


--
-- Name: idx_650167_ll_uuid; Type: INDEX; Schema: parcels_production; Owner: -
--

CREATE UNIQUE INDEX idx_650167_ll_uuid ON parcels_production.parcels_nature USING btree (ll_uuid);


--
-- Name: idx_650170_ll_uuid; Type: INDEX; Schema: parcels_production; Owner: -
--

CREATE UNIQUE INDEX idx_650170_ll_uuid ON parcels_production.parcels_rank USING btree (ll_uuid);


--
-- Name: idx_650173_highway_km; Type: INDEX; Schema: parcels_production; Owner: -
--

CREATE INDEX idx_650173_highway_km ON parcels_production.parcels_road USING btree (highway_km);


--
-- Name: idx_650173_ll_uuid; Type: INDEX; Schema: parcels_production; Owner: -
--

CREATE UNIQUE INDEX idx_650173_ll_uuid ON parcels_production.parcels_road USING btree (ll_uuid);


--
-- Name: idx_650176_latitude; Type: INDEX; Schema: parcels_production; Owner: -
--

CREATE UNIQUE INDEX idx_650176_latitude ON parcels_production.parcels_viewshed USING btree (latitude, longitude);


--
-- Name: idx_650184_path; Type: INDEX; Schema: parcels_production; Owner: -
--

CREATE UNIQUE INDEX idx_650184_path ON parcels_production.properties USING btree (path);


--
-- Name: idx_650187_type; Type: INDEX; Schema: parcels_production; Owner: -
--

CREATE INDEX idx_650187_type ON parcels_production.roads USING btree (type);


--
-- Name: idx_650192_z; Type: INDEX; Schema: parcels_production; Owner: -
--

CREATE UNIQUE INDEX idx_650192_z ON parcels_production.tiles USING btree (z, y, x);


--
-- Name: parcels insert_parcels_acctid_county_stripped; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_acctid_county_stripped AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_acctid_county_stripped_fn();


--
-- Name: parcels insert_parcels_address; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_address AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_address_fn();


--
-- Name: parcels insert_parcels_address2; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_address2 AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_address2_fn();


--
-- Name: parcels insert_parcels_address_source; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_address_source AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_address_source_fn();


--
-- Name: parcels insert_parcels_addrtyp; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_addrtyp AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_addrtyp_fn();


--
-- Name: parcels insert_parcels_agfndarea; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_agfndarea AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_agfndarea_fn();


--
-- Name: parcels insert_parcels_agfndluom; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_agfndluom AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_agfndluom_fn();


--
-- Name: parcels_agriculture insert_parcels_agriculture_hardiness_temp; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_agriculture_hardiness_temp AFTER INSERT ON parcels_production.parcels_agriculture FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_agriculture_hardiness_temp_fn();


--
-- Name: parcels_agriculture insert_parcels_agriculture_hardiness_zone; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_agriculture_hardiness_zone AFTER INSERT ON parcels_production.parcels_agriculture FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_agriculture_hardiness_zone_fn();


--
-- Name: parcels_agriculture insert_parcels_agriculture_ll_uuid; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_agriculture_ll_uuid AFTER INSERT ON parcels_production.parcels_agriculture FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_agriculture_ll_uuid_fn();


--
-- Name: parcels_agriculture insert_parcels_agriculture_plant_hardiness_updated; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_agriculture_plant_hardiness_updated AFTER INSERT ON parcels_production.parcels_agriculture FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_agriculture_plant_hardiness_updated_fn();


--
-- Name: parcels insert_parcels_agval; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_agval AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_agval_fn();


--
-- Name: parcels_airport insert_parcels_airport_abbrev; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_airport_abbrev AFTER INSERT ON parcels_production.parcels_airport FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_airport_abbrev_fn();


--
-- Name: parcels_airport insert_parcels_airport_distance_km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_airport_distance_km AFTER INSERT ON parcels_production.parcels_airport FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_airport_distance_km_fn();


--
-- Name: parcels_airport insert_parcels_airport_ll_uuid; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_airport_ll_uuid AFTER INSERT ON parcels_production.parcels_airport FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_airport_ll_uuid_fn();


--
-- Name: parcels insert_parcels_aprtment; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_aprtment AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_aprtment_fn();


--
-- Name: parcels insert_parcels_assessor; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_assessor AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_assessor_fn();


--
-- Name: parcels insert_parcels_block; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_block AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_block_fn();


--
-- Name: parcels insert_parcels_book; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_book AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_book_fn();


--
-- Name: parcels insert_parcels_careof; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_careof AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_careof_fn();


--
-- Name: parcels insert_parcels_cass_errorno; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_cass_errorno AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_cass_errorno_fn();


--
-- Name: parcels insert_parcels_cdl_date; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_cdl_date AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_cdl_date_fn();


--
-- Name: parcels insert_parcels_cdl_majority_category; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_cdl_majority_category AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_cdl_majority_category_fn();


--
-- Name: parcels insert_parcels_cdl_majority_percent; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_cdl_majority_percent AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_cdl_majority_percent_fn();


--
-- Name: parcels insert_parcels_cdl_raw; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_cdl_raw AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_cdl_raw_fn();


--
-- Name: parcels insert_parcels_census_block; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_census_block AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_census_block_fn();


--
-- Name: parcels insert_parcels_census_blockgroup; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_census_blockgroup AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_census_blockgroup_fn();


--
-- Name: parcels insert_parcels_census_tract; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_census_tract AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_census_tract_fn();


--
-- Name: parcels insert_parcels_city; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_city AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_city_fn();


--
-- Name: parcels insert_parcels_ciuse; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_ciuse AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_ciuse_fn();


--
-- Name: parcels_coastline insert_parcels_coastline_distance_km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_coastline_distance_km AFTER INSERT ON parcels_production.parcels_coastline FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_coastline_distance_km_fn();


--
-- Name: parcels_coastline insert_parcels_coastline_ll_uuid; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_coastline_ll_uuid AFTER INSERT ON parcels_production.parcels_coastline FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_coastline_ll_uuid_fn();


--
-- Name: parcels insert_parcels_convey1; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_convey1 AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_convey1_fn();


--
-- Name: parcels insert_parcels_county; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_county AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_county_fn();


--
-- Name: parcels insert_parcels_crtarcod; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_crtarcod AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_crtarcod_fn();


--
-- Name: parcels_density insert_parcels_density_closest_geological_features_distance; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_closest_geological_features_distance AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_closest_geological_features_distance_fn();


--
-- Name: parcels_density insert_parcels_density_closest_geological_features_items; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_closest_geological_features_items AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_closest_geological_features_items_fn();


--
-- Name: parcels_density insert_parcels_density_closest_geological_features_name; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_closest_geological_features_name AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_closest_geological_features_name_fn();


--
-- Name: parcels_density insert_parcels_density_closest_geological_features_tags; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_closest_geological_features_tags AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_closest_geological_features_tags_fn();


--
-- Name: parcels_density insert_parcels_density_closest_healthcare_distance; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_closest_healthcare_distance AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_closest_healthcare_distance_fn();


--
-- Name: parcels_density insert_parcels_density_closest_healthcare_items; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_closest_healthcare_items AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_closest_healthcare_items_fn();


--
-- Name: parcels_density insert_parcels_density_closest_healthcare_name; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_closest_healthcare_name AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_closest_healthcare_name_fn();


--
-- Name: parcels_density insert_parcels_density_closest_healthcare_tags; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_closest_healthcare_tags AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_closest_healthcare_tags_fn();


--
-- Name: parcels_density insert_parcels_density_closest_library_distance; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_closest_library_distance AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_closest_library_distance_fn();


--
-- Name: parcels_density insert_parcels_density_closest_library_items; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_closest_library_items AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_closest_library_items_fn();


--
-- Name: parcels_density insert_parcels_density_closest_library_name; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_closest_library_name AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_closest_library_name_fn();


--
-- Name: parcels_density insert_parcels_density_closest_library_tags; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_closest_library_tags AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_closest_library_tags_fn();


--
-- Name: parcels_density insert_parcels_density_closest_military_distance; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_closest_military_distance AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_closest_military_distance_fn();


--
-- Name: parcels_density insert_parcels_density_closest_military_items; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_closest_military_items AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_closest_military_items_fn();


--
-- Name: parcels_density insert_parcels_density_closest_military_name; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_closest_military_name AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_closest_military_name_fn();


--
-- Name: parcels_density insert_parcels_density_closest_military_tags; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_closest_military_tags AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_closest_military_tags_fn();


--
-- Name: parcels_density insert_parcels_density_closest_natural_distance; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_closest_natural_distance AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_closest_natural_distance_fn();


--
-- Name: parcels_density insert_parcels_density_closest_natural_items; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_closest_natural_items AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_closest_natural_items_fn();


--
-- Name: parcels_density insert_parcels_density_closest_natural_name; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_closest_natural_name AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_closest_natural_name_fn();


--
-- Name: parcels_density insert_parcels_density_closest_natural_tags; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_closest_natural_tags AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_closest_natural_tags_fn();


--
-- Name: parcels_density insert_parcels_density_closest_pollution_distance; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_closest_pollution_distance AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_closest_pollution_distance_fn();


--
-- Name: parcels_density insert_parcels_density_closest_pollution_items; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_closest_pollution_items AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_closest_pollution_items_fn();


--
-- Name: parcels_density insert_parcels_density_closest_pollution_name; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_closest_pollution_name AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_closest_pollution_name_fn();


--
-- Name: parcels_density insert_parcels_density_closest_pollution_tags; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_closest_pollution_tags AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_closest_pollution_tags_fn();


--
-- Name: parcels_density insert_parcels_density_closest_public_land_distance; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_closest_public_land_distance AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_closest_public_land_distance_fn();


--
-- Name: parcels_density insert_parcels_density_closest_public_land_items; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_closest_public_land_items AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_closest_public_land_items_fn();


--
-- Name: parcels_density insert_parcels_density_closest_public_land_name; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_closest_public_land_name AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_closest_public_land_name_fn();


--
-- Name: parcels_density insert_parcels_density_closest_public_land_tags; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_closest_public_land_tags AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_closest_public_land_tags_fn();


--
-- Name: parcels_density insert_parcels_density_closest_religious_distance; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_closest_religious_distance AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_closest_religious_distance_fn();


--
-- Name: parcels_density insert_parcels_density_closest_religious_items; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_closest_religious_items AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_closest_religious_items_fn();


--
-- Name: parcels_density insert_parcels_density_closest_religious_name; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_closest_religious_name AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_closest_religious_name_fn();


--
-- Name: parcels_density insert_parcels_density_closest_religious_tags; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_closest_religious_tags AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_closest_religious_tags_fn();


--
-- Name: parcels_density insert_parcels_density_closest_spring_distance; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_closest_spring_distance AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_closest_spring_distance_fn();


--
-- Name: parcels_density insert_parcels_density_closest_spring_items; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_closest_spring_items AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_closest_spring_items_fn();


--
-- Name: parcels_density insert_parcels_density_closest_spring_name; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_closest_spring_name AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_closest_spring_name_fn();


--
-- Name: parcels_density insert_parcels_density_closest_spring_tags; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_closest_spring_tags AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_closest_spring_tags_fn();


--
-- Name: parcels_density insert_parcels_density_closest_water_distance; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_closest_water_distance AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_closest_water_distance_fn();


--
-- Name: parcels_density insert_parcels_density_closest_water_items; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_closest_water_items AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_closest_water_items_fn();


--
-- Name: parcels_density insert_parcels_density_closest_water_name; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_closest_water_name AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_closest_water_name_fn();


--
-- Name: parcels_density insert_parcels_density_closest_water_tags; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_closest_water_tags AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_closest_water_tags_fn();


--
-- Name: parcels_density insert_parcels_density_geological_features_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_geological_features_10km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_geological_features_10km_fn();


--
-- Name: parcels_density insert_parcels_density_geological_features_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_geological_features_1km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_geological_features_1km_fn();


--
-- Name: parcels_density insert_parcels_density_geological_features_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_geological_features_25km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_geological_features_25km_fn();


--
-- Name: parcels_density insert_parcels_density_geological_features_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_geological_features_5km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_geological_features_5km_fn();


--
-- Name: parcels_density insert_parcels_density_geological_features_count_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_geological_features_count_10km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_geological_features_count_10km_fn();


--
-- Name: parcels_density insert_parcels_density_geological_features_count_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_geological_features_count_1km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_geological_features_count_1km_fn();


--
-- Name: parcels_density insert_parcels_density_geological_features_count_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_geological_features_count_25km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_geological_features_count_25km_fn();


--
-- Name: parcels_density insert_parcels_density_geological_features_count_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_geological_features_count_5km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_geological_features_count_5km_fn();


--
-- Name: parcels_density insert_parcels_density_geological_features_updated; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_geological_features_updated AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_geological_features_updated_fn();


--
-- Name: parcels_density insert_parcels_density_healthcare_100km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_healthcare_100km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_healthcare_100km_fn();


--
-- Name: parcels_density insert_parcels_density_healthcare_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_healthcare_10km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_healthcare_10km_fn();


--
-- Name: parcels_density insert_parcels_density_healthcare_150km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_healthcare_150km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_healthcare_150km_fn();


--
-- Name: parcels_density insert_parcels_density_healthcare_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_healthcare_1km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_healthcare_1km_fn();


--
-- Name: parcels_density insert_parcels_density_healthcare_200km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_healthcare_200km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_healthcare_200km_fn();


--
-- Name: parcels_density insert_parcels_density_healthcare_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_healthcare_25km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_healthcare_25km_fn();


--
-- Name: parcels_density insert_parcels_density_healthcare_50km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_healthcare_50km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_healthcare_50km_fn();


--
-- Name: parcels_density insert_parcels_density_healthcare_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_healthcare_5km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_healthcare_5km_fn();


--
-- Name: parcels_density insert_parcels_density_healthcare_count_100km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_healthcare_count_100km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_healthcare_count_100km_fn();


--
-- Name: parcels_density insert_parcels_density_healthcare_count_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_healthcare_count_10km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_healthcare_count_10km_fn();


--
-- Name: parcels_density insert_parcels_density_healthcare_count_150km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_healthcare_count_150km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_healthcare_count_150km_fn();


--
-- Name: parcels_density insert_parcels_density_healthcare_count_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_healthcare_count_1km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_healthcare_count_1km_fn();


--
-- Name: parcels_density insert_parcels_density_healthcare_count_200km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_healthcare_count_200km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_healthcare_count_200km_fn();


--
-- Name: parcels_density insert_parcels_density_healthcare_count_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_healthcare_count_25km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_healthcare_count_25km_fn();


--
-- Name: parcels_density insert_parcels_density_healthcare_count_50km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_healthcare_count_50km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_healthcare_count_50km_fn();


--
-- Name: parcels_density insert_parcels_density_healthcare_count_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_healthcare_count_5km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_healthcare_count_5km_fn();


--
-- Name: parcels_density insert_parcels_density_healthcare_updated; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_healthcare_updated AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_healthcare_updated_fn();


--
-- Name: parcels_density insert_parcels_density_library_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_library_10km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_library_10km_fn();


--
-- Name: parcels_density insert_parcels_density_library_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_library_1km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_library_1km_fn();


--
-- Name: parcels_density insert_parcels_density_library_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_library_25km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_library_25km_fn();


--
-- Name: parcels_density insert_parcels_density_library_50km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_library_50km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_library_50km_fn();


--
-- Name: parcels_density insert_parcels_density_library_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_library_5km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_library_5km_fn();


--
-- Name: parcels_density insert_parcels_density_library_count_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_library_count_10km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_library_count_10km_fn();


--
-- Name: parcels_density insert_parcels_density_library_count_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_library_count_1km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_library_count_1km_fn();


--
-- Name: parcels_density insert_parcels_density_library_count_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_library_count_25km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_library_count_25km_fn();


--
-- Name: parcels_density insert_parcels_density_library_count_50km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_library_count_50km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_library_count_50km_fn();


--
-- Name: parcels_density insert_parcels_density_library_count_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_library_count_5km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_library_count_5km_fn();


--
-- Name: parcels_density insert_parcels_density_library_updated; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_library_updated AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_library_updated_fn();


--
-- Name: parcels_density insert_parcels_density_ll_uuid; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_ll_uuid AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_ll_uuid_fn();


--
-- Name: parcels_density insert_parcels_density_military_100km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_military_100km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_military_100km_fn();


--
-- Name: parcels_density insert_parcels_density_military_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_military_10km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_military_10km_fn();


--
-- Name: parcels_density insert_parcels_density_military_150km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_military_150km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_military_150km_fn();


--
-- Name: parcels_density insert_parcels_density_military_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_military_1km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_military_1km_fn();


--
-- Name: parcels_density insert_parcels_density_military_200km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_military_200km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_military_200km_fn();


--
-- Name: parcels_density insert_parcels_density_military_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_military_25km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_military_25km_fn();


--
-- Name: parcels_density insert_parcels_density_military_50km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_military_50km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_military_50km_fn();


--
-- Name: parcels_density insert_parcels_density_military_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_military_5km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_military_5km_fn();


--
-- Name: parcels_density insert_parcels_density_military_count_100km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_military_count_100km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_military_count_100km_fn();


--
-- Name: parcels_density insert_parcels_density_military_count_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_military_count_10km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_military_count_10km_fn();


--
-- Name: parcels_density insert_parcels_density_military_count_150km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_military_count_150km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_military_count_150km_fn();


--
-- Name: parcels_density insert_parcels_density_military_count_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_military_count_1km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_military_count_1km_fn();


--
-- Name: parcels_density insert_parcels_density_military_count_200km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_military_count_200km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_military_count_200km_fn();


--
-- Name: parcels_density insert_parcels_density_military_count_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_military_count_25km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_military_count_25km_fn();


--
-- Name: parcels_density insert_parcels_density_military_count_50km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_military_count_50km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_military_count_50km_fn();


--
-- Name: parcels_density insert_parcels_density_military_count_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_military_count_5km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_military_count_5km_fn();


--
-- Name: parcels_density insert_parcels_density_military_updated; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_military_updated AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_military_updated_fn();


--
-- Name: parcels_density insert_parcels_density_natural_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_natural_10km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_natural_10km_fn();


--
-- Name: parcels_density insert_parcels_density_natural_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_natural_1km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_natural_1km_fn();


--
-- Name: parcels_density insert_parcels_density_natural_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_natural_25km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_natural_25km_fn();


--
-- Name: parcels_density insert_parcels_density_natural_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_natural_5km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_natural_5km_fn();


--
-- Name: parcels_density insert_parcels_density_natural_count_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_natural_count_10km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_natural_count_10km_fn();


--
-- Name: parcels_density insert_parcels_density_natural_count_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_natural_count_1km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_natural_count_1km_fn();


--
-- Name: parcels_density insert_parcels_density_natural_count_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_natural_count_25km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_natural_count_25km_fn();


--
-- Name: parcels_density insert_parcels_density_natural_count_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_natural_count_5km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_natural_count_5km_fn();


--
-- Name: parcels_density insert_parcels_density_natural_density_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_natural_density_10km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_natural_density_10km_fn();


--
-- Name: parcels_density insert_parcels_density_natural_density_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_natural_density_1km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_natural_density_1km_fn();


--
-- Name: parcels_density insert_parcels_density_natural_density_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_natural_density_25km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_natural_density_25km_fn();


--
-- Name: parcels_density insert_parcels_density_natural_density_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_natural_density_5km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_natural_density_5km_fn();


--
-- Name: parcels_density insert_parcels_density_natural_updated; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_natural_updated AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_natural_updated_fn();


--
-- Name: parcels_density insert_parcels_density_parcels_count_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_parcels_count_10km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_parcels_count_10km_fn();


--
-- Name: parcels_density insert_parcels_density_parcels_count_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_parcels_count_1km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_parcels_count_1km_fn();


--
-- Name: parcels_density insert_parcels_density_parcels_count_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_parcels_count_25km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_parcels_count_25km_fn();


--
-- Name: parcels_density insert_parcels_density_parcels_count_50km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_parcels_count_50km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_parcels_count_50km_fn();


--
-- Name: parcels_density insert_parcels_density_parcels_count_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_parcels_count_5km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_parcels_count_5km_fn();


--
-- Name: parcels_density insert_parcels_density_parcels_density_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_parcels_density_10km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_parcels_density_10km_fn();


--
-- Name: parcels_density insert_parcels_density_parcels_density_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_parcels_density_1km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_parcels_density_1km_fn();


--
-- Name: parcels_density insert_parcels_density_parcels_density_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_parcels_density_25km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_parcels_density_25km_fn();


--
-- Name: parcels_density insert_parcels_density_parcels_density_50km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_parcels_density_50km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_parcels_density_50km_fn();


--
-- Name: parcels_density insert_parcels_density_parcels_density_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_parcels_density_5km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_parcels_density_5km_fn();


--
-- Name: parcels_density insert_parcels_density_parcels_updated; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_parcels_updated AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_parcels_updated_fn();


--
-- Name: parcels_density insert_parcels_density_pollution_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_pollution_10km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_pollution_10km_fn();


--
-- Name: parcels_density insert_parcels_density_pollution_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_pollution_1km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_pollution_1km_fn();


--
-- Name: parcels_density insert_parcels_density_pollution_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_pollution_25km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_pollution_25km_fn();


--
-- Name: parcels_density insert_parcels_density_pollution_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_pollution_5km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_pollution_5km_fn();


--
-- Name: parcels_density insert_parcels_density_pollution_count_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_pollution_count_10km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_pollution_count_10km_fn();


--
-- Name: parcels_density insert_parcels_density_pollution_count_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_pollution_count_1km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_pollution_count_1km_fn();


--
-- Name: parcels_density insert_parcels_density_pollution_count_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_pollution_count_25km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_pollution_count_25km_fn();


--
-- Name: parcels_density insert_parcels_density_pollution_count_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_pollution_count_5km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_pollution_count_5km_fn();


--
-- Name: parcels_density insert_parcels_density_pollution_density_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_pollution_density_10km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_pollution_density_10km_fn();


--
-- Name: parcels_density insert_parcels_density_pollution_density_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_pollution_density_1km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_pollution_density_1km_fn();


--
-- Name: parcels_density insert_parcels_density_pollution_density_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_pollution_density_25km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_pollution_density_25km_fn();


--
-- Name: parcels_density insert_parcels_density_pollution_density_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_pollution_density_5km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_pollution_density_5km_fn();


--
-- Name: parcels_density insert_parcels_density_pollution_updated; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_pollution_updated AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_pollution_updated_fn();


--
-- Name: parcels_density insert_parcels_density_public_land_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_public_land_10km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_public_land_10km_fn();


--
-- Name: parcels_density insert_parcels_density_public_land_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_public_land_1km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_public_land_1km_fn();


--
-- Name: parcels_density insert_parcels_density_public_land_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_public_land_25km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_public_land_25km_fn();


--
-- Name: parcels_density insert_parcels_density_public_land_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_public_land_5km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_public_land_5km_fn();


--
-- Name: parcels_density insert_parcels_density_public_land_count_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_public_land_count_10km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_public_land_count_10km_fn();


--
-- Name: parcels_density insert_parcels_density_public_land_count_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_public_land_count_1km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_public_land_count_1km_fn();


--
-- Name: parcels_density insert_parcels_density_public_land_count_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_public_land_count_25km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_public_land_count_25km_fn();


--
-- Name: parcels_density insert_parcels_density_public_land_count_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_public_land_count_5km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_public_land_count_5km_fn();


--
-- Name: parcels_density insert_parcels_density_public_land_density_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_public_land_density_10km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_public_land_density_10km_fn();


--
-- Name: parcels_density insert_parcels_density_public_land_density_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_public_land_density_1km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_public_land_density_1km_fn();


--
-- Name: parcels_density insert_parcels_density_public_land_density_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_public_land_density_25km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_public_land_density_25km_fn();


--
-- Name: parcels_density insert_parcels_density_public_land_density_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_public_land_density_5km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_public_land_density_5km_fn();


--
-- Name: parcels_density insert_parcels_density_public_land_updated; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_public_land_updated AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_public_land_updated_fn();


--
-- Name: parcels_density insert_parcels_density_religion_100km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_religion_100km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_religion_100km_fn();


--
-- Name: parcels_density insert_parcels_density_religion_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_religion_10km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_religion_10km_fn();


--
-- Name: parcels_density insert_parcels_density_religion_150km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_religion_150km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_religion_150km_fn();


--
-- Name: parcels_density insert_parcels_density_religion_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_religion_1km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_religion_1km_fn();


--
-- Name: parcels_density insert_parcels_density_religion_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_religion_25km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_religion_25km_fn();


--
-- Name: parcels_density insert_parcels_density_religion_50km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_religion_50km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_religion_50km_fn();


--
-- Name: parcels_density insert_parcels_density_religion_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_religion_5km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_religion_5km_fn();


--
-- Name: parcels_density insert_parcels_density_religion_count_100km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_religion_count_100km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_religion_count_100km_fn();


--
-- Name: parcels_density insert_parcels_density_religion_count_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_religion_count_10km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_religion_count_10km_fn();


--
-- Name: parcels_density insert_parcels_density_religion_count_150km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_religion_count_150km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_religion_count_150km_fn();


--
-- Name: parcels_density insert_parcels_density_religion_count_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_religion_count_1km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_religion_count_1km_fn();


--
-- Name: parcels_density insert_parcels_density_religion_count_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_religion_count_25km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_religion_count_25km_fn();


--
-- Name: parcels_density insert_parcels_density_religion_count_50km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_religion_count_50km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_religion_count_50km_fn();


--
-- Name: parcels_density insert_parcels_density_religion_count_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_religion_count_5km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_religion_count_5km_fn();


--
-- Name: parcels_density insert_parcels_density_religion_density_100km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_religion_density_100km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_religion_density_100km_fn();


--
-- Name: parcels_density insert_parcels_density_religion_density_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_religion_density_10km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_religion_density_10km_fn();


--
-- Name: parcels_density insert_parcels_density_religion_density_150km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_religion_density_150km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_religion_density_150km_fn();


--
-- Name: parcels_density insert_parcels_density_religion_density_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_religion_density_1km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_religion_density_1km_fn();


--
-- Name: parcels_density insert_parcels_density_religion_density_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_religion_density_25km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_religion_density_25km_fn();


--
-- Name: parcels_density insert_parcels_density_religion_density_50km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_religion_density_50km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_religion_density_50km_fn();


--
-- Name: parcels_density insert_parcels_density_religion_density_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_religion_density_5km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_religion_density_5km_fn();


--
-- Name: parcels_density insert_parcels_density_religious_updated; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_religious_updated AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_religious_updated_fn();


--
-- Name: parcels_density insert_parcels_density_spring_100km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_spring_100km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_spring_100km_fn();


--
-- Name: parcels_density insert_parcels_density_spring_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_spring_10km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_spring_10km_fn();


--
-- Name: parcels_density insert_parcels_density_spring_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_spring_1km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_spring_1km_fn();


--
-- Name: parcels_density insert_parcels_density_spring_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_spring_25km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_spring_25km_fn();


--
-- Name: parcels_density insert_parcels_density_spring_50km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_spring_50km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_spring_50km_fn();


--
-- Name: parcels_density insert_parcels_density_spring_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_spring_5km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_spring_5km_fn();


--
-- Name: parcels_density insert_parcels_density_spring_count_100km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_spring_count_100km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_spring_count_100km_fn();


--
-- Name: parcels_density insert_parcels_density_spring_count_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_spring_count_10km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_spring_count_10km_fn();


--
-- Name: parcels_density insert_parcels_density_spring_count_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_spring_count_1km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_spring_count_1km_fn();


--
-- Name: parcels_density insert_parcels_density_spring_count_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_spring_count_25km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_spring_count_25km_fn();


--
-- Name: parcels_density insert_parcels_density_spring_count_50km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_spring_count_50km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_spring_count_50km_fn();


--
-- Name: parcels_density insert_parcels_density_spring_count_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_spring_count_5km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_spring_count_5km_fn();


--
-- Name: parcels_density insert_parcels_density_spring_updated; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_spring_updated AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_spring_updated_fn();


--
-- Name: parcels_density insert_parcels_density_water_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_water_10km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_water_10km_fn();


--
-- Name: parcels_density insert_parcels_density_water_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_water_1km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_water_1km_fn();


--
-- Name: parcels_density insert_parcels_density_water_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_water_25km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_water_25km_fn();


--
-- Name: parcels_density insert_parcels_density_water_50km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_water_50km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_water_50km_fn();


--
-- Name: parcels_density insert_parcels_density_water_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_water_5km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_water_5km_fn();


--
-- Name: parcels_density insert_parcels_density_water_count_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_water_count_10km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_water_count_10km_fn();


--
-- Name: parcels_density insert_parcels_density_water_count_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_water_count_1km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_water_count_1km_fn();


--
-- Name: parcels_density insert_parcels_density_water_count_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_water_count_25km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_water_count_25km_fn();


--
-- Name: parcels_density insert_parcels_density_water_count_50km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_water_count_50km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_water_count_50km_fn();


--
-- Name: parcels_density insert_parcels_density_water_count_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_water_count_5km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_water_count_5km_fn();


--
-- Name: parcels_density insert_parcels_density_water_density_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_water_density_10km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_water_density_10km_fn();


--
-- Name: parcels_density insert_parcels_density_water_density_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_water_density_1km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_water_density_1km_fn();


--
-- Name: parcels_density insert_parcels_density_water_density_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_water_density_25km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_water_density_25km_fn();


--
-- Name: parcels_density insert_parcels_density_water_density_50km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_water_density_50km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_water_density_50km_fn();


--
-- Name: parcels_density insert_parcels_density_water_density_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_water_density_5km AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_water_density_5km_fn();


--
-- Name: parcels_density insert_parcels_density_water_updated; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_density_water_updated AFTER INSERT ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_density_water_updated_fn();


--
-- Name: parcels insert_parcels_depth; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_depth AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_depth_fn();


--
-- Name: parcels insert_parcels_descbldg; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_descbldg AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_descbldg_fn();


--
-- Name: parcels insert_parcels_descciuse; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_descciuse AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_descciuse_fn();


--
-- Name: parcels insert_parcels_desccnst; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_desccnst AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_desccnst_fn();


--
-- Name: parcels insert_parcels_descexcl; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_descexcl AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_descexcl_fn();


--
-- Name: parcels insert_parcels_descgrad; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_descgrad AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_descgrad_fn();


--
-- Name: parcels insert_parcels_desctown; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_desctown AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_desctown_fn();


--
-- Name: parcels insert_parcels_detailed_subdivision_code; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_detailed_subdivision_code AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_detailed_subdivision_code_fn();


--
-- Name: parcels insert_parcels_dpv_codes; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_dpv_codes AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_dpv_codes_fn();


--
-- Name: parcels insert_parcels_dpv_notes; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_dpv_notes AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_dpv_notes_fn();


--
-- Name: parcels insert_parcels_dpv_status; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_dpv_status AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_dpv_status_fn();


--
-- Name: parcels insert_parcels_dpv_type; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_dpv_type AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_dpv_type_fn();


--
-- Name: parcels insert_parcels_dr1clerk; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_dr1clerk AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_dr1clerk_fn();


--
-- Name: parcels insert_parcels_dr1folio; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_dr1folio AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_dr1folio_fn();


--
-- Name: parcels insert_parcels_dr1liber; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_dr1liber AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_dr1liber_fn();


--
-- Name: parcels_elevation insert_parcels_elevation_ll_uuid; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_elevation_ll_uuid AFTER INSERT ON parcels_production.parcels_elevation FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_elevation_ll_uuid_fn();


--
-- Name: parcels_elevation insert_parcels_elevation_max; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_elevation_max AFTER INSERT ON parcels_production.parcels_elevation FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_elevation_max_fn();


--
-- Name: parcels_elevation insert_parcels_elevation_median; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_elevation_median AFTER INSERT ON parcels_production.parcels_elevation FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_elevation_median_fn();


--
-- Name: parcels_elevation insert_parcels_elevation_min; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_elevation_min AFTER INSERT ON parcels_production.parcels_elevation FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_elevation_min_fn();


--
-- Name: parcels_elevation insert_parcels_elevation_p10; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_elevation_p10 AFTER INSERT ON parcels_production.parcels_elevation FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_elevation_p10_fn();


--
-- Name: parcels_elevation insert_parcels_elevation_p25; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_elevation_p25 AFTER INSERT ON parcels_production.parcels_elevation FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_elevation_p25_fn();


--
-- Name: parcels_elevation insert_parcels_elevation_p50; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_elevation_p50 AFTER INSERT ON parcels_production.parcels_elevation FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_elevation_p50_fn();


--
-- Name: parcels_elevation insert_parcels_elevation_p75; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_elevation_p75 AFTER INSERT ON parcels_production.parcels_elevation FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_elevation_p75_fn();


--
-- Name: parcels_elevation insert_parcels_elevation_p90; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_elevation_p90 AFTER INSERT ON parcels_production.parcels_elevation FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_elevation_p90_fn();


--
-- Name: parcels insert_parcels_entznassm; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_entznassm AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_entznassm_fn();


--
-- Name: parcels insert_parcels_entzndat; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_entzndat AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_entzndat_fn();


--
-- Name: parcels insert_parcels_exclass; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_exclass AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_exclass_fn();


--
-- Name: parcels insert_parcels_fcmacode; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_fcmacode AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_fcmacode_fn();


--
-- Name: parcels insert_parcels_geogcode; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_geogcode AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_geogcode_fn();


--
-- Name: parcels insert_parcels_geoid; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_geoid AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_geoid_fn();


--
-- Name: parcels_geometry insert_parcels_geometry_coordinates; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_geometry_coordinates AFTER INSERT ON parcels_production.parcels_geometry FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_geometry_coordinates_fn();


--
-- Name: parcels_geometry insert_parcels_geometry_ll_uuid; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_geometry_ll_uuid AFTER INSERT ON parcels_production.parcels_geometry FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_geometry_ll_uuid_fn();


--
-- Name: parcels insert_parcels_gisacre; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_gisacre AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_gisacre_fn();


--
-- Name: parcels insert_parcels_goz; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_goz AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_goz_fn();


--
-- Name: parcels insert_parcels_goz_tract; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_goz_tract AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_goz_tract_fn();


--
-- Name: parcels insert_parcels_gr1clrk1v; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_gr1clrk1v AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_gr1clrk1v_fn();


--
-- Name: parcels insert_parcels_gr1folo1; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_gr1folo1 AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_gr1folo1_fn();


--
-- Name: parcels insert_parcels_gr1libr1; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_gr1libr1 AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_gr1libr1_fn();


--
-- Name: parcels insert_parcels_grid; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_grid AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_grid_fn();


--
-- Name: parcels insert_parcels_grntnam1; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_grntnam1 AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_grntnam1_fn();


--
-- Name: parcels insert_parcels_homestead_exemption; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_homestead_exemption AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_homestead_exemption_fn();


--
-- Name: parcels insert_parcels_homqlcod; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_homqlcod AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_homqlcod_fn();


--
-- Name: parcels insert_parcels_homqldat; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_homqldat AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_homqldat_fn();


--
-- Name: parcels insert_parcels_improvval; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_improvval AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_improvval_fn();


--
-- Name: parcels_internet insert_parcels_internet_broadband_updated; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_internet_broadband_updated AFTER INSERT ON parcels_production.parcels_internet FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_internet_broadband_updated_fn();


--
-- Name: parcels_internet insert_parcels_internet_closest_provider_distance; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_internet_closest_provider_distance AFTER INSERT ON parcels_production.parcels_internet FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_internet_closest_provider_distance_fn();


--
-- Name: parcels_internet insert_parcels_internet_closest_provider_h3_res8_id; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_internet_closest_provider_h3_res8_id AFTER INSERT ON parcels_production.parcels_internet FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_internet_closest_provider_h3_res8_id_fn();


--
-- Name: parcels_internet insert_parcels_internet_ll_uuid; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_internet_ll_uuid AFTER INSERT ON parcels_production.parcels_internet FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_internet_ll_uuid_fn();


--
-- Name: parcels_internet insert_parcels_internet_low_latency; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_internet_low_latency AFTER INSERT ON parcels_production.parcels_internet FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_internet_low_latency_fn();


--
-- Name: parcels_internet insert_parcels_internet_max_download_speed; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_internet_max_download_speed AFTER INSERT ON parcels_production.parcels_internet FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_internet_max_download_speed_fn();


--
-- Name: parcels_internet insert_parcels_internet_max_upload_speed; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_internet_max_upload_speed AFTER INSERT ON parcels_production.parcels_internet FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_internet_max_upload_speed_fn();


--
-- Name: parcels_internet insert_parcels_internet_nearby_max_download_speed; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_internet_nearby_max_download_speed AFTER INSERT ON parcels_production.parcels_internet FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_internet_nearby_max_download_speed_fn();


--
-- Name: parcels_internet insert_parcels_internet_nearby_max_upload_speed; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_internet_nearby_max_upload_speed AFTER INSERT ON parcels_production.parcels_internet FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_internet_nearby_max_upload_speed_fn();


--
-- Name: parcels_internet insert_parcels_internet_surrounding_coverage_density; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_internet_surrounding_coverage_density AFTER INSERT ON parcels_production.parcels_internet FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_internet_surrounding_coverage_density_fn();


--
-- Name: parcels_internet insert_parcels_internet_surrounding_providers; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_internet_surrounding_providers AFTER INSERT ON parcels_production.parcels_internet FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_internet_surrounding_providers_fn();


--
-- Name: parcels insert_parcels_jurscode; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_jurscode AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_jurscode_fn();


--
-- Name: parcels insert_parcels_landval; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_landval AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_landval_fn();


--
-- Name: parcels insert_parcels_lastassd; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_lastassd AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_lastassd_fn();


--
-- Name: parcels insert_parcels_lastinsp; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_lastinsp AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_lastinsp_fn();


--
-- Name: parcels insert_parcels_lat; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_lat AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_lat_fn();


--
-- Name: parcels insert_parcels_lbcs_activity; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_lbcs_activity AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_lbcs_activity_fn();


--
-- Name: parcels insert_parcels_lbcs_activity_desc; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_lbcs_activity_desc AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_lbcs_activity_desc_fn();


--
-- Name: parcels insert_parcels_lbcs_function; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_lbcs_function AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_lbcs_function_fn();


--
-- Name: parcels insert_parcels_lbcs_function_desc; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_lbcs_function_desc AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_lbcs_function_desc_fn();


--
-- Name: parcels insert_parcels_lbcs_ownership; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_lbcs_ownership AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_lbcs_ownership_fn();


--
-- Name: parcels insert_parcels_lbcs_ownership_desc; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_lbcs_ownership_desc AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_lbcs_ownership_desc_fn();


--
-- Name: parcels insert_parcels_lbcs_site; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_lbcs_site AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_lbcs_site_fn();


--
-- Name: parcels insert_parcels_lbcs_site_desc; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_lbcs_site_desc AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_lbcs_site_desc_fn();


--
-- Name: parcels insert_parcels_lbcs_structure; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_lbcs_structure AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_lbcs_structure_fn();


--
-- Name: parcels insert_parcels_lbcs_structure_desc; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_lbcs_structure_desc AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_lbcs_structure_desc_fn();


--
-- Name: parcels insert_parcels_legaldesc; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_legaldesc AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_legaldesc_fn();


--
-- Name: parcels insert_parcels_ll_bldg_count; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_ll_bldg_count AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_ll_bldg_count_fn();


--
-- Name: parcels insert_parcels_ll_bldg_footprint_sqft; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_ll_bldg_footprint_sqft AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_ll_bldg_footprint_sqft_fn();


--
-- Name: parcels insert_parcels_ll_gisacre; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_ll_gisacre AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_ll_gisacre_fn();


--
-- Name: parcels insert_parcels_ll_gissqft; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_ll_gissqft AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_ll_gissqft_fn();


--
-- Name: parcels insert_parcels_ll_stable_id; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_ll_stable_id AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_ll_stable_id_fn();


--
-- Name: parcels insert_parcels_ll_updated_at; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_ll_updated_at AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_ll_updated_at_fn();


--
-- Name: parcels insert_parcels_ll_uuid; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_ll_uuid AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_ll_uuid_fn();


--
-- Name: parcels insert_parcels_location_name; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_location_name AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_location_name_fn();


--
-- Name: parcels insert_parcels_lon; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_lon AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_lon_fn();


--
-- Name: parcels insert_parcels_lot; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_lot AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_lot_fn();


--
-- Name: parcels insert_parcels_luom; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_luom AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_luom_fn();


--
-- Name: parcels insert_parcels_mail_addno; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_mail_addno AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_mail_addno_fn();


--
-- Name: parcels insert_parcels_mail_addpref; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_mail_addpref AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_mail_addpref_fn();


--
-- Name: parcels insert_parcels_mail_address2; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_mail_address2 AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_mail_address2_fn();


--
-- Name: parcels insert_parcels_mail_addstr; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_mail_addstr AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_mail_addstr_fn();


--
-- Name: parcels insert_parcels_mail_addstsuf; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_mail_addstsuf AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_mail_addstsuf_fn();


--
-- Name: parcels insert_parcels_mail_addsttyp; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_mail_addsttyp AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_mail_addsttyp_fn();


--
-- Name: parcels insert_parcels_mail_city; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_mail_city AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_mail_city_fn();


--
-- Name: parcels insert_parcels_mail_country; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_mail_country AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_mail_country_fn();


--
-- Name: parcels insert_parcels_mail_state2; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_mail_state2 AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_mail_state2_fn();


--
-- Name: parcels insert_parcels_mail_unit; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_mail_unit AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_mail_unit_fn();


--
-- Name: parcels insert_parcels_mail_urbanization; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_mail_urbanization AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_mail_urbanization_fn();


--
-- Name: parcels insert_parcels_mail_zip; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_mail_zip AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_mail_zip_fn();


--
-- Name: parcels insert_parcels_mailadd; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_mailadd AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_mailadd_fn();


--
-- Name: parcels insert_parcels_map; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_map AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_map_fn();


--
-- Name: parcels_meta insert_parcels_meta_ll_uuid; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_meta_ll_uuid AFTER INSERT ON parcels_production.parcels_meta FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_meta_ll_uuid_fn();


--
-- Name: parcels_meta insert_parcels_meta_public; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_meta_public AFTER INSERT ON parcels_production.parcels_meta FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_meta_public_fn();


--
-- Name: parcels_meta insert_parcels_meta_tribal; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_meta_tribal AFTER INSERT ON parcels_production.parcels_meta FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_meta_tribal_fn();


--
-- Name: parcels insert_parcels_mortgag1; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_mortgag1 AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_mortgag1_fn();


--
-- Name: parcels insert_parcels_multistruct; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_multistruct AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_multistruct_fn();


--
-- Name: parcels insert_parcels_namekey; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_namekey AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_namekey_fn();


--
-- Name: parcels_nature insert_parcels_nature_leaf_rating; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_nature_leaf_rating AFTER INSERT ON parcels_production.parcels_nature FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_nature_leaf_rating_fn();


--
-- Name: parcels_nature insert_parcels_nature_ll_uuid; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_nature_ll_uuid AFTER INSERT ON parcels_production.parcels_nature FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_nature_ll_uuid_fn();


--
-- Name: parcels_nature insert_parcels_nature_nature_score; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_nature_nature_score AFTER INSERT ON parcels_production.parcels_nature FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_nature_nature_score_fn();


--
-- Name: parcels_nature insert_parcels_nature_nature_updated; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_nature_nature_updated AFTER INSERT ON parcels_production.parcels_nature FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_nature_nature_updated_fn();


--
-- Name: parcels insert_parcels_neighborhood; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_neighborhood AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_neighborhood_fn();


--
-- Name: parcels insert_parcels_nprcarea; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_nprcarea AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_nprcarea_fn();


--
-- Name: parcels insert_parcels_nprcluom; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_nprcluom AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_nprcluom_fn();


--
-- Name: parcels insert_parcels_nprctstdat; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_nprctstdat AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_nprctstdat_fn();


--
-- Name: parcels insert_parcels_numstories; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_numstories AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_numstories_fn();


--
-- Name: parcels insert_parcels_numunits; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_numunits AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_numunits_fn();


--
-- Name: parcels insert_parcels_ogc_fid; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_ogc_fid AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_ogc_fid_fn();


--
-- Name: parcels insert_parcels_ooi; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_ooi AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_ooi_fn();


--
-- Name: parcels insert_parcels_original_address; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_original_address AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_original_address_fn();


--
-- Name: parcels insert_parcels_other; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_other AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_other_fn();


--
-- Name: parcels insert_parcels_owner; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_owner AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_owner_fn();


--
-- Name: parcels insert_parcels_owner2; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_owner2 AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_owner2_fn();


--
-- Name: parcels insert_parcels_owner3; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_owner3 AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_owner3_fn();


--
-- Name: parcels insert_parcels_owner4; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_owner4 AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_owner4_fn();


--
-- Name: parcels insert_parcels_owner_index; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_owner_index AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_owner_index_fn();


--
-- Name: parcels insert_parcels_ownfrst; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_ownfrst AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_ownfrst_fn();


--
-- Name: parcels insert_parcels_ownlast; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_ownlast AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_ownlast_fn();


--
-- Name: parcels insert_parcels_owntype; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_owntype AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_owntype_fn();


--
-- Name: parcels insert_parcels_padus_public_access; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_padus_public_access AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_padus_public_access_fn();


--
-- Name: parcels insert_parcels_page; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_page AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_page_fn();


--
-- Name: parcels insert_parcels_parcelnumb; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_parcelnumb AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_parcelnumb_fn();


--
-- Name: parcels insert_parcels_parval; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_parval AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_parval_fn();


--
-- Name: parcels insert_parcels_parvaltype; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_parvaltype AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_parvaltype_fn();


--
-- Name: parcels insert_parcels_path; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_path AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_path_fn();


--
-- Name: parcels insert_parcels_permittyp; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_permittyp AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_permittyp_fn();


--
-- Name: parcels insert_parcels_pfic; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_pfic AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_pfic_fn();


--
-- Name: parcels insert_parcels_pfih; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_pfih AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_pfih_fn();


--
-- Name: parcels insert_parcels_pflw; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_pflw AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_pflw_fn();


--
-- Name: parcels insert_parcels_pfsp; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_pfsp AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_pfsp_fn();


--
-- Name: parcels insert_parcels_pfsu; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_pfsu AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_pfsu_fn();


--
-- Name: parcels insert_parcels_pfus; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_pfus AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_pfus_fn();


--
-- Name: parcels insert_parcels_pfuw; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_pfuw AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_pfuw_fn();


--
-- Name: parcels insert_parcels_plat; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_plat AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_plat_fn();


--
-- Name: parcels insert_parcels_plndevdat; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_plndevdat AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_plndevdat_fn();


--
-- Name: parcels insert_parcels_polyid; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_polyid AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_polyid_fn();


--
-- Name: parcels insert_parcels_ptype; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_ptype AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_ptype_fn();


--
-- Name: parcels insert_parcels_qoz; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_qoz AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_qoz_fn();


--
-- Name: parcels insert_parcels_qoz_tract; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_qoz_tract AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_qoz_tract_fn();


--
-- Name: parcels_rank insert_parcels_rank_active_days_in_2015_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_active_days_in_2015_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_active_days_in_2015_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_active_days_in_2016_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_active_days_in_2016_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_active_days_in_2016_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_active_days_in_2017_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_active_days_in_2017_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_active_days_in_2017_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_active_days_in_2018_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_active_days_in_2018_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_active_days_in_2018_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_active_days_in_2019_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_active_days_in_2019_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_active_days_in_2019_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_active_days_in_2020_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_active_days_in_2020_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_active_days_in_2020_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_active_days_in_2021_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_active_days_in_2021_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_active_days_in_2021_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_active_days_in_2022_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_active_days_in_2022_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_active_days_in_2022_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_avg_active_days_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_avg_active_days_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_avg_active_days_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_avg_cloudy_hours_10pct_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_avg_cloudy_hours_10pct_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_avg_cloudy_hours_10pct_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_avg_cloudy_hours_50pct_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_avg_cloudy_hours_50pct_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_avg_cloudy_hours_50pct_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_avg_cloudy_hours_90pct_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_avg_cloudy_hours_90pct_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_avg_cloudy_hours_90pct_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_avg_daytime_hrs_below_0c_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_avg_daytime_hrs_below_0c_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_avg_daytime_hrs_below_0c_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_avg_daytime_hrs_below_10c_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_avg_daytime_hrs_below_10c_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_avg_daytime_hrs_below_10c_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_avg_daytime_hrs_below_5c_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_avg_daytime_hrs_below_5c_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_avg_daytime_hrs_below_5c_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_avg_dinner_outside_days_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_avg_dinner_outside_days_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_avg_dinner_outside_days_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_avg_fair_days_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_avg_fair_days_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_avg_fair_days_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_avg_hrs_below_0c_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_avg_hrs_below_0c_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_avg_hrs_below_0c_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_avg_hrs_below_10c_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_avg_hrs_below_10c_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_avg_hrs_below_10c_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_avg_hrs_below_5c_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_avg_hrs_below_5c_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_avg_hrs_below_5c_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_avg_indoor_days_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_avg_indoor_days_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_avg_indoor_days_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_avg_perfect_days_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_avg_perfect_days_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_avg_perfect_days_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_closest_military_distance_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_closest_military_distance_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_closest_military_distance_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_closest_provider_distance_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_closest_provider_distance_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_closest_provider_distance_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_closest_spring_distance_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_closest_spring_distance_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_closest_spring_distance_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_daytime_hours_above_10_pct_cloud_cover_in_2; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_daytime_hours_above_10_pct_cloud_cover_in_2 AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_daytime_hours_above_10_pct_cloud_cover_in_2();


--
-- Name: parcels_rank insert_parcels_rank_daytime_hours_above_20_pct_cloud_cover_in_2; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_daytime_hours_above_20_pct_cloud_cover_in_2 AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_daytime_hours_above_20_pct_cloud_cover_in_2();


--
-- Name: parcels_rank insert_parcels_rank_daytime_hours_above_30_pct_cloud_cover_in_2; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_daytime_hours_above_30_pct_cloud_cover_in_2 AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_daytime_hours_above_30_pct_cloud_cover_in_2();


--
-- Name: parcels_rank insert_parcels_rank_daytime_hours_above_40_pct_cloud_cover_in_2; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_daytime_hours_above_40_pct_cloud_cover_in_2 AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_daytime_hours_above_40_pct_cloud_cover_in_2();


--
-- Name: parcels_rank insert_parcels_rank_daytime_hours_above_50_pct_cloud_cover_in_2; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_daytime_hours_above_50_pct_cloud_cover_in_2 AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_daytime_hours_above_50_pct_cloud_cover_in_2();


--
-- Name: parcels_rank insert_parcels_rank_daytime_hours_above_60_pct_cloud_cover_in_2; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_daytime_hours_above_60_pct_cloud_cover_in_2 AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_daytime_hours_above_60_pct_cloud_cover_in_2();


--
-- Name: parcels_rank insert_parcels_rank_daytime_hours_above_70_pct_cloud_cover_in_2; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_daytime_hours_above_70_pct_cloud_cover_in_2 AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_daytime_hours_above_70_pct_cloud_cover_in_2();


--
-- Name: parcels_rank insert_parcels_rank_daytime_hours_above_80_pct_cloud_cover_in_2; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_daytime_hours_above_80_pct_cloud_cover_in_2 AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_daytime_hours_above_80_pct_cloud_cover_in_2();


--
-- Name: parcels_rank insert_parcels_rank_daytime_hours_above_90_pct_cloud_cover_in_2; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_daytime_hours_above_90_pct_cloud_cover_in_2 AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_daytime_hours_above_90_pct_cloud_cover_in_2();


--
-- Name: parcels_rank insert_parcels_rank_daytime_hours_in_2015_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_daytime_hours_in_2015_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_daytime_hours_in_2015_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_daytime_hours_in_2016_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_daytime_hours_in_2016_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_daytime_hours_in_2016_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_daytime_hours_in_2017_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_daytime_hours_in_2017_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_daytime_hours_in_2017_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_daytime_hours_in_2018_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_daytime_hours_in_2018_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_daytime_hours_in_2018_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_daytime_hours_in_2019_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_daytime_hours_in_2019_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_daytime_hours_in_2019_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_daytime_hours_in_2020_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_daytime_hours_in_2020_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_daytime_hours_in_2020_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_daytime_hours_in_2021_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_daytime_hours_in_2021_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_daytime_hours_in_2021_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_daytime_hours_in_2022_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_daytime_hours_in_2022_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_daytime_hours_in_2022_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_daytime_hrs_below_0_c_apparent_temperature_; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_daytime_hrs_below_0_c_apparent_temperature_ AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_daytime_hrs_below_0_c_apparent_temperature_();


--
-- Name: parcels_rank insert_parcels_rank_daytime_hrs_below_10_c_apparent_temperature; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_daytime_hrs_below_10_c_apparent_temperature AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_daytime_hrs_below_10_c_apparent_temperature();


--
-- Name: parcels_rank insert_parcels_rank_daytime_hrs_below_5_c_apparent_temperature_; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_daytime_hrs_below_5_c_apparent_temperature_ AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_daytime_hrs_below_5_c_apparent_temperature_();


--
-- Name: parcels_rank insert_parcels_rank_dinner_outside_days_in_2015_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_dinner_outside_days_in_2015_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_dinner_outside_days_in_2015_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_dinner_outside_days_in_2016_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_dinner_outside_days_in_2016_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_dinner_outside_days_in_2016_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_dinner_outside_days_in_2017_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_dinner_outside_days_in_2017_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_dinner_outside_days_in_2017_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_dinner_outside_days_in_2018_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_dinner_outside_days_in_2018_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_dinner_outside_days_in_2018_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_dinner_outside_days_in_2019_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_dinner_outside_days_in_2019_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_dinner_outside_days_in_2019_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_dinner_outside_days_in_2020_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_dinner_outside_days_in_2020_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_dinner_outside_days_in_2020_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_dinner_outside_days_in_2021_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_dinner_outside_days_in_2021_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_dinner_outside_days_in_2021_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_dinner_outside_days_in_2022_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_dinner_outside_days_in_2022_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_dinner_outside_days_in_2022_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_fair_days_in_2015_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_fair_days_in_2015_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_fair_days_in_2015_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_fair_days_in_2016_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_fair_days_in_2016_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_fair_days_in_2016_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_fair_days_in_2017_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_fair_days_in_2017_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_fair_days_in_2017_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_fair_days_in_2018_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_fair_days_in_2018_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_fair_days_in_2018_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_fair_days_in_2019_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_fair_days_in_2019_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_fair_days_in_2019_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_fair_days_in_2020_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_fair_days_in_2020_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_fair_days_in_2020_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_fair_days_in_2021_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_fair_days_in_2021_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_fair_days_in_2021_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_fair_days_in_2022_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_fair_days_in_2022_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_fair_days_in_2022_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_hardiness_temp_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_hardiness_temp_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_hardiness_temp_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2015_; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2015_ AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2015_();


--
-- Name: parcels_rank insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2016_; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2016_ AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2016_();


--
-- Name: parcels_rank insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2017_; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2017_ AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2017_();


--
-- Name: parcels_rank insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2018_; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2018_ AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2018_();


--
-- Name: parcels_rank insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2019_; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2019_ AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2019_();


--
-- Name: parcels_rank insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2020_; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2020_ AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2020_();


--
-- Name: parcels_rank insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2021_; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2021_ AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2021_();


--
-- Name: parcels_rank insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2022_; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2022_ AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_hrs_below_0_c_apparent_temperature_in_2022_();


--
-- Name: parcels_rank insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2015; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2015 AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2015();


--
-- Name: parcels_rank insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2016; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2016 AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2016();


--
-- Name: parcels_rank insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2017; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2017 AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2017();


--
-- Name: parcels_rank insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2018; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2018 AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2018();


--
-- Name: parcels_rank insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2019; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2019 AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2019();


--
-- Name: parcels_rank insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2020; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2020 AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2020();


--
-- Name: parcels_rank insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2021; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2021 AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2021();


--
-- Name: parcels_rank insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2022; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2022 AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_hrs_below_10_c_apparent_temperature_in_2022();


--
-- Name: parcels_rank insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2015_; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2015_ AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2015_();


--
-- Name: parcels_rank insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2016_; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2016_ AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2016_();


--
-- Name: parcels_rank insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2017_; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2017_ AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2017_();


--
-- Name: parcels_rank insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2018_; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2018_ AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2018_();


--
-- Name: parcels_rank insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2019_; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2019_ AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2019_();


--
-- Name: parcels_rank insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2020_; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2020_ AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2020_();


--
-- Name: parcels_rank insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2021_; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2021_ AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2021_();


--
-- Name: parcels_rank insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2022_; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2022_ AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_hrs_below_5_c_apparent_temperature_in_2022_();


--
-- Name: parcels_rank insert_parcels_rank_indoor_days_in_2015_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_indoor_days_in_2015_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_indoor_days_in_2015_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_indoor_days_in_2016_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_indoor_days_in_2016_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_indoor_days_in_2016_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_indoor_days_in_2017_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_indoor_days_in_2017_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_indoor_days_in_2017_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_indoor_days_in_2018_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_indoor_days_in_2018_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_indoor_days_in_2018_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_indoor_days_in_2019_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_indoor_days_in_2019_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_indoor_days_in_2019_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_indoor_days_in_2020_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_indoor_days_in_2020_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_indoor_days_in_2020_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_indoor_days_in_2021_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_indoor_days_in_2021_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_indoor_days_in_2021_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_indoor_days_in_2022_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_indoor_days_in_2022_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_indoor_days_in_2022_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_ll_uuid; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_ll_uuid AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_ll_uuid_fn();


--
-- Name: parcels_rank insert_parcels_rank_max_download_speed_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_max_download_speed_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_max_download_speed_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_max_upload_speed_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_max_upload_speed_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_max_upload_speed_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_military_count_200km_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_military_count_200km_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_military_count_200km_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_military_count_25km_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_military_count_25km_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_military_count_25km_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_military_count_50km_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_military_count_50km_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_military_count_50km_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_nearby_max_download_speed_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_nearby_max_download_speed_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_nearby_max_download_speed_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_nearby_max_upload_speed_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_nearby_max_upload_speed_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_nearby_max_upload_speed_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_perfect_days_in_2015_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_perfect_days_in_2015_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_perfect_days_in_2015_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_perfect_days_in_2016_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_perfect_days_in_2016_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_perfect_days_in_2016_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_perfect_days_in_2017_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_perfect_days_in_2017_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_perfect_days_in_2017_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_perfect_days_in_2018_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_perfect_days_in_2018_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_perfect_days_in_2018_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_perfect_days_in_2019_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_perfect_days_in_2019_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_perfect_days_in_2019_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_perfect_days_in_2020_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_perfect_days_in_2020_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_perfect_days_in_2020_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_perfect_days_in_2021_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_perfect_days_in_2021_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_perfect_days_in_2021_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_perfect_days_in_2022_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_perfect_days_in_2022_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_perfect_days_in_2022_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_spring_count_100km_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_spring_count_100km_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_spring_count_100km_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_spring_count_10km_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_spring_count_10km_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_spring_count_10km_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_spring_count_1km_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_spring_count_1km_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_spring_count_1km_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_spring_count_50km_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_spring_count_50km_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_spring_count_50km_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_spring_count_5km_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_spring_count_5km_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_spring_count_5km_rank_fn();


--
-- Name: parcels_rank insert_parcels_rank_surrounding_coverage_density_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rank_surrounding_coverage_density_rank AFTER INSERT ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rank_surrounding_coverage_density_rank_fn();


--
-- Name: parcels insert_parcels_rdi; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rdi AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rdi_fn();


--
-- Name: parcels insert_parcels_recind; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_recind AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_recind_fn();


--
-- Name: parcels insert_parcels_recrdareano; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_recrdareano AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_recrdareano_fn();


--
-- Name: parcels insert_parcels_recrdareatx; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_recrdareatx AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_recrdareatx_fn();


--
-- Name: parcels insert_parcels_resi1990; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_resi1990 AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_resi1990_fn();


--
-- Name: parcels insert_parcels_resi2000; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_resi2000 AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_resi2000_fn();


--
-- Name: parcels insert_parcels_resi2010; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_resi2010 AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_resi2010_fn();


--
-- Name: parcels insert_parcels_resident; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_resident AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_resident_fn();


--
-- Name: parcels insert_parcels_resityp; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_resityp AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_resityp_fn();


--
-- Name: parcels insert_parcels_resiuths; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_resiuths AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_resiuths_fn();


--
-- Name: parcels insert_parcels_revisedate; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_revisedate AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_revisedate_fn();


--
-- Name: parcels insert_parcels_reviseddate; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_reviseddate AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_reviseddate_fn();


--
-- Name: parcels_road insert_parcels_road_high_traffic_km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_road_high_traffic_km AFTER INSERT ON parcels_production.parcels_road FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_road_high_traffic_km_fn();


--
-- Name: parcels_road insert_parcels_road_highway_km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_road_highway_km AFTER INSERT ON parcels_production.parcels_road FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_road_highway_km_fn();


--
-- Name: parcels_road insert_parcels_road_ll_uuid; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_road_ll_uuid AFTER INSERT ON parcels_production.parcels_road FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_road_ll_uuid_fn();


--
-- Name: parcels_road insert_parcels_road_paved_km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_road_paved_km AFTER INSERT ON parcels_production.parcels_road FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_road_paved_km_fn();


--
-- Name: parcels_road insert_parcels_road_road_km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_road_road_km AFTER INSERT ON parcels_production.parcels_road FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_road_road_km_fn();


--
-- Name: parcels insert_parcels_rzrealdat; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_rzrealdat AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_rzrealdat_fn();


--
-- Name: parcels insert_parcels_saddno; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_saddno AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_saddno_fn();


--
-- Name: parcels insert_parcels_saddpref; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_saddpref AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_saddpref_fn();


--
-- Name: parcels insert_parcels_saddstr; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_saddstr AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_saddstr_fn();


--
-- Name: parcels insert_parcels_saddstsuf; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_saddstsuf AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_saddstsuf_fn();


--
-- Name: parcels insert_parcels_saddsttyp; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_saddsttyp AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_saddsttyp_fn();


--
-- Name: parcels insert_parcels_saledate; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_saledate AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_saledate_fn();


--
-- Name: parcels insert_parcels_saleprice; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_saleprice AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_saleprice_fn();


--
-- Name: parcels insert_parcels_scity; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_scity AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_scity_fn();


--
-- Name: parcels insert_parcels_sdatwebadr; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_sdatwebadr AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_sdatwebadr_fn();


--
-- Name: parcels insert_parcels_section; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_section AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_section_fn();


--
-- Name: parcels insert_parcels_sourceagent; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_sourceagent AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_sourceagent_fn();


--
-- Name: parcels insert_parcels_sourcedate; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_sourcedate AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_sourcedate_fn();


--
-- Name: parcels insert_parcels_sourceref; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_sourceref AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_sourceref_fn();


--
-- Name: parcels insert_parcels_sourceurl; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_sourceurl AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_sourceurl_fn();


--
-- Name: parcels insert_parcels_special; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_special AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_special_fn();


--
-- Name: parcels insert_parcels_sqft; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_sqft AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_sqft_fn();


--
-- Name: parcels insert_parcels_state2; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_state2 AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_state2_fn();


--
-- Name: parcels insert_parcels_strubldg; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_strubldg AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_strubldg_fn();


--
-- Name: parcels insert_parcels_strucnst; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_strucnst AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_strucnst_fn();


--
-- Name: parcels insert_parcels_struct; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_struct AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_struct_fn();


--
-- Name: parcels insert_parcels_structno; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_structno AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_structno_fn();


--
-- Name: parcels insert_parcels_structstyle; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_structstyle AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_structstyle_fn();


--
-- Name: parcels insert_parcels_strugrad; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_strugrad AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_strugrad_fn();


--
-- Name: parcels insert_parcels_strustyl; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_strustyl AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_strustyl_fn();


--
-- Name: parcels insert_parcels_subdivision; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_subdivision AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_subdivision_fn();


--
-- Name: parcels insert_parcels_subdivision_code; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_subdivision_code AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_subdivision_code_fn();


--
-- Name: parcels insert_parcels_subowntype; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_subowntype AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_subowntype_fn();


--
-- Name: parcels insert_parcels_subsurfown; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_subsurfown AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_subsurfown_fn();


--
-- Name: parcels insert_parcels_sunit; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_sunit AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_sunit_fn();


--
-- Name: parcels insert_parcels_szip; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_szip AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_szip_fn();


--
-- Name: parcels insert_parcels_taxamt; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_taxamt AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_taxamt_fn();


--
-- Name: parcels insert_parcels_taxyear; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_taxyear AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_taxyear_fn();


--
-- Name: parcels insert_parcels_towncode; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_towncode AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_towncode_fn();


--
-- Name: parcels insert_parcels_trailer; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_trailer AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_trailer_fn();


--
-- Name: parcels insert_parcels_transno1; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_transno1 AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_transno1_fn();


--
-- Name: parcels insert_parcels_urbanization; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_urbanization AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_urbanization_fn();


--
-- Name: parcels insert_parcels_usecode; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_usecode AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_usecode_fn();


--
-- Name: parcels insert_parcels_usedesc; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_usedesc AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_usedesc_fn();


--
-- Name: parcels insert_parcels_usps_vacancy; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_usps_vacancy AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_usps_vacancy_fn();


--
-- Name: parcels insert_parcels_usps_vacancy_date; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_usps_vacancy_date AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_usps_vacancy_date_fn();


--
-- Name: parcels_viewshed insert_parcels_viewshed_latitude; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_viewshed_latitude AFTER INSERT ON parcels_production.parcels_viewshed FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_viewshed_latitude_fn();


--
-- Name: parcels_viewshed insert_parcels_viewshed_ll_uuid; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_viewshed_ll_uuid AFTER INSERT ON parcels_production.parcels_viewshed FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_viewshed_ll_uuid_fn();


--
-- Name: parcels_viewshed insert_parcels_viewshed_longitude; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_viewshed_longitude AFTER INSERT ON parcels_production.parcels_viewshed FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_viewshed_longitude_fn();


--
-- Name: parcels_viewshed insert_parcels_viewshed_viewshed_e; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_viewshed_viewshed_e AFTER INSERT ON parcels_production.parcels_viewshed FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_viewshed_viewshed_e_fn();


--
-- Name: parcels_viewshed insert_parcels_viewshed_viewshed_index; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_viewshed_viewshed_index AFTER INSERT ON parcels_production.parcels_viewshed FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_viewshed_viewshed_index_fn();


--
-- Name: parcels_viewshed insert_parcels_viewshed_viewshed_index_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_viewshed_viewshed_index_10km AFTER INSERT ON parcels_production.parcels_viewshed FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_viewshed_viewshed_index_10km_fn();


--
-- Name: parcels_viewshed insert_parcels_viewshed_viewshed_index_20km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_viewshed_viewshed_index_20km AFTER INSERT ON parcels_production.parcels_viewshed FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_viewshed_viewshed_index_20km_fn();


--
-- Name: parcels_viewshed insert_parcels_viewshed_viewshed_index_2km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_viewshed_viewshed_index_2km AFTER INSERT ON parcels_production.parcels_viewshed FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_viewshed_viewshed_index_2km_fn();


--
-- Name: parcels_viewshed insert_parcels_viewshed_viewshed_index_50km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_viewshed_viewshed_index_50km AFTER INSERT ON parcels_production.parcels_viewshed FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_viewshed_viewshed_index_50km_fn();


--
-- Name: parcels_viewshed insert_parcels_viewshed_viewshed_index_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_viewshed_viewshed_index_5km AFTER INSERT ON parcels_production.parcels_viewshed FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_viewshed_viewshed_index_5km_fn();


--
-- Name: parcels_viewshed insert_parcels_viewshed_viewshed_index_75km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_viewshed_viewshed_index_75km AFTER INSERT ON parcels_production.parcels_viewshed FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_viewshed_viewshed_index_75km_fn();


--
-- Name: parcels_viewshed insert_parcels_viewshed_viewshed_index_under_2km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_viewshed_viewshed_index_under_2km AFTER INSERT ON parcels_production.parcels_viewshed FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_viewshed_viewshed_index_under_2km_fn();


--
-- Name: parcels_viewshed insert_parcels_viewshed_viewshed_n; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_viewshed_viewshed_n AFTER INSERT ON parcels_production.parcels_viewshed FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_viewshed_viewshed_n_fn();


--
-- Name: parcels_viewshed insert_parcels_viewshed_viewshed_ne; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_viewshed_viewshed_ne AFTER INSERT ON parcels_production.parcels_viewshed FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_viewshed_viewshed_ne_fn();


--
-- Name: parcels_viewshed insert_parcels_viewshed_viewshed_nw; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_viewshed_viewshed_nw AFTER INSERT ON parcels_production.parcels_viewshed FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_viewshed_viewshed_nw_fn();


--
-- Name: parcels_viewshed insert_parcels_viewshed_viewshed_percentage; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_viewshed_viewshed_percentage AFTER INSERT ON parcels_production.parcels_viewshed FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_viewshed_viewshed_percentage_fn();


--
-- Name: parcels_viewshed insert_parcels_viewshed_viewshed_s; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_viewshed_viewshed_s AFTER INSERT ON parcels_production.parcels_viewshed FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_viewshed_viewshed_s_fn();


--
-- Name: parcels_viewshed insert_parcels_viewshed_viewshed_se; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_viewshed_viewshed_se AFTER INSERT ON parcels_production.parcels_viewshed FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_viewshed_viewshed_se_fn();


--
-- Name: parcels_viewshed insert_parcels_viewshed_viewshed_sw; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_viewshed_viewshed_sw AFTER INSERT ON parcels_production.parcels_viewshed FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_viewshed_viewshed_sw_fn();


--
-- Name: parcels_viewshed insert_parcels_viewshed_viewshed_w; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_viewshed_viewshed_w AFTER INSERT ON parcels_production.parcels_viewshed FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_viewshed_viewshed_w_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_avg_active_days; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_avg_active_days AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_avg_active_days_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_avg_cloudy_hours_10pct; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_avg_cloudy_hours_10pct AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_avg_cloudy_hours_10pct_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_avg_cloudy_hours_50pct; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_avg_cloudy_hours_50pct AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_avg_cloudy_hours_50pct_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_avg_cloudy_hours_90pct; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_avg_cloudy_hours_90pct AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_avg_cloudy_hours_90pct_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_avg_daytime_hours; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_avg_daytime_hours AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_avg_daytime_hours_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_avg_daytime_hrs_below_0c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_avg_daytime_hrs_below_0c AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_avg_daytime_hrs_below_0c_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_avg_daytime_hrs_below_10c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_avg_daytime_hrs_below_10c AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_avg_daytime_hrs_below_10c_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_avg_daytime_hrs_below_5c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_avg_daytime_hrs_below_5c AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_avg_daytime_hrs_below_5c_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_avg_dinner_outside_days; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_avg_dinner_outside_days AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_avg_dinner_outside_days_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_avg_fair_days; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_avg_fair_days AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_avg_fair_days_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_avg_hrs_below_0c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_avg_hrs_below_0c AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_avg_hrs_below_0c_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_avg_hrs_below_10c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_avg_hrs_below_10c AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_avg_hrs_below_10c_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_avg_hrs_below_5c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_avg_hrs_below_5c AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_avg_hrs_below_5c_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_avg_indoor_days; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_avg_indoor_days AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_avg_indoor_days_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_avg_perfect_days; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_avg_perfect_days AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_avg_perfect_days_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_ll_uuid; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_ll_uuid AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_ll_uuid_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_max_active_days; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_max_active_days AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_max_active_days_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_max_cloudy_hours_10pct; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_max_cloudy_hours_10pct AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_max_cloudy_hours_10pct_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_max_cloudy_hours_50pct; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_max_cloudy_hours_50pct AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_max_cloudy_hours_50pct_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_max_cloudy_hours_90pct; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_max_cloudy_hours_90pct AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_max_cloudy_hours_90pct_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_max_daytime_hours; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_max_daytime_hours AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_max_daytime_hours_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_max_daytime_hrs_below_0c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_max_daytime_hrs_below_0c AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_max_daytime_hrs_below_0c_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_max_daytime_hrs_below_10c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_max_daytime_hrs_below_10c AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_max_daytime_hrs_below_10c_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_max_daytime_hrs_below_5c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_max_daytime_hrs_below_5c AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_max_daytime_hrs_below_5c_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_max_dinner_outside_days; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_max_dinner_outside_days AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_max_dinner_outside_days_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_max_fair_days; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_max_fair_days AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_max_fair_days_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_max_hrs_below_0c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_max_hrs_below_0c AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_max_hrs_below_0c_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_max_hrs_below_10c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_max_hrs_below_10c AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_max_hrs_below_10c_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_max_hrs_below_5c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_max_hrs_below_5c AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_max_hrs_below_5c_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_max_indoor_days; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_max_indoor_days AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_max_indoor_days_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_max_perfect_days; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_max_perfect_days AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_max_perfect_days_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_median_active_days; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_median_active_days AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_median_active_days_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_median_cloudy_hours_10pct; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_median_cloudy_hours_10pct AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_median_cloudy_hours_10pct_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_median_cloudy_hours_50pct; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_median_cloudy_hours_50pct AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_median_cloudy_hours_50pct_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_median_cloudy_hours_90pct; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_median_cloudy_hours_90pct AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_median_cloudy_hours_90pct_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_median_daytime_hours; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_median_daytime_hours AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_median_daytime_hours_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_median_daytime_hrs_below_0c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_median_daytime_hrs_below_0c AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_median_daytime_hrs_below_0c_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_median_daytime_hrs_below_10c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_median_daytime_hrs_below_10c AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_median_daytime_hrs_below_10c_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_median_daytime_hrs_below_5c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_median_daytime_hrs_below_5c AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_median_daytime_hrs_below_5c_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_median_dinner_outside_days; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_median_dinner_outside_days AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_median_dinner_outside_days_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_median_fair_days; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_median_fair_days AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_median_fair_days_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_median_hrs_below_0c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_median_hrs_below_0c AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_median_hrs_below_0c_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_median_hrs_below_10c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_median_hrs_below_10c AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_median_hrs_below_10c_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_median_hrs_below_5c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_median_hrs_below_5c AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_median_hrs_below_5c_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_median_indoor_days; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_median_indoor_days AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_median_indoor_days_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_median_perfect_days; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_median_perfect_days AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_median_perfect_days_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_min_active_days; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_min_active_days AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_min_active_days_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_min_cloudy_hours_10pct; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_min_cloudy_hours_10pct AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_min_cloudy_hours_10pct_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_min_cloudy_hours_50pct; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_min_cloudy_hours_50pct AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_min_cloudy_hours_50pct_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_min_cloudy_hours_90pct; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_min_cloudy_hours_90pct AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_min_cloudy_hours_90pct_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_min_daytime_hours; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_min_daytime_hours AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_min_daytime_hours_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_min_daytime_hrs_below_0c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_min_daytime_hrs_below_0c AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_min_daytime_hrs_below_0c_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_min_daytime_hrs_below_10c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_min_daytime_hrs_below_10c AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_min_daytime_hrs_below_10c_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_min_daytime_hrs_below_5c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_min_daytime_hrs_below_5c AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_min_daytime_hrs_below_5c_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_min_dinner_outside_days; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_min_dinner_outside_days AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_min_dinner_outside_days_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_min_fair_days; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_min_fair_days AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_min_fair_days_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_min_hrs_below_0c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_min_hrs_below_0c AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_min_hrs_below_0c_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_min_hrs_below_10c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_min_hrs_below_10c AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_min_hrs_below_10c_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_min_hrs_below_5c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_min_hrs_below_5c AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_min_hrs_below_5c_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_min_indoor_days; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_min_indoor_days AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_min_indoor_days_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_min_perfect_days; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_min_perfect_days AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_min_perfect_days_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_updated; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_updated AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_updated_fn();


--
-- Name: parcels_weather_summary insert_parcels_weather_summary_years; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_weather_summary_years AFTER INSERT ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_weather_summary_years_fn();


--
-- Name: parcels insert_parcels_width; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_width AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_width_fn();


--
-- Name: parcels insert_parcels_yearbuilt; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_yearbuilt AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_yearbuilt_fn();


--
-- Name: parcels insert_parcels_zoning; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_zoning AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_zoning_fn();


--
-- Name: parcels insert_parcels_zoning_change_date; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_zoning_change_date AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_zoning_change_date_fn();


--
-- Name: parcels insert_parcels_zoning_description; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER insert_parcels_zoning_description AFTER INSERT ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.insert_parcels_zoning_description_fn();


--
-- Name: parcels update_parcels_acctid_county_stripped; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_acctid_county_stripped AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_acctid_county_stripped_fn();


--
-- Name: parcels update_parcels_address; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_address AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_address_fn();


--
-- Name: parcels update_parcels_address2; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_address2 AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_address2_fn();


--
-- Name: parcels update_parcels_address_source; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_address_source AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_address_source_fn();


--
-- Name: parcels update_parcels_addrtyp; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_addrtyp AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_addrtyp_fn();


--
-- Name: parcels update_parcels_agfndarea; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_agfndarea AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_agfndarea_fn();


--
-- Name: parcels update_parcels_agfndluom; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_agfndluom AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_agfndluom_fn();


--
-- Name: parcels_agriculture update_parcels_agriculture_hardiness_temp; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_agriculture_hardiness_temp AFTER UPDATE ON parcels_production.parcels_agriculture FOR EACH ROW EXECUTE FUNCTION public.update_parcels_agriculture_hardiness_temp_fn();


--
-- Name: parcels_agriculture update_parcels_agriculture_hardiness_zone; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_agriculture_hardiness_zone AFTER UPDATE ON parcels_production.parcels_agriculture FOR EACH ROW EXECUTE FUNCTION public.update_parcels_agriculture_hardiness_zone_fn();


--
-- Name: parcels_agriculture update_parcels_agriculture_ll_uuid; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_agriculture_ll_uuid AFTER UPDATE ON parcels_production.parcels_agriculture FOR EACH ROW EXECUTE FUNCTION public.update_parcels_agriculture_ll_uuid_fn();


--
-- Name: parcels_agriculture update_parcels_agriculture_plant_hardiness_updated; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_agriculture_plant_hardiness_updated AFTER UPDATE ON parcels_production.parcels_agriculture FOR EACH ROW EXECUTE FUNCTION public.update_parcels_agriculture_plant_hardiness_updated_fn();


--
-- Name: parcels update_parcels_agval; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_agval AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_agval_fn();


--
-- Name: parcels_airport update_parcels_airport_abbrev; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_airport_abbrev AFTER UPDATE ON parcels_production.parcels_airport FOR EACH ROW EXECUTE FUNCTION public.update_parcels_airport_abbrev_fn();


--
-- Name: parcels_airport update_parcels_airport_distance_km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_airport_distance_km AFTER UPDATE ON parcels_production.parcels_airport FOR EACH ROW EXECUTE FUNCTION public.update_parcels_airport_distance_km_fn();


--
-- Name: parcels_airport update_parcels_airport_ll_uuid; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_airport_ll_uuid AFTER UPDATE ON parcels_production.parcels_airport FOR EACH ROW EXECUTE FUNCTION public.update_parcels_airport_ll_uuid_fn();


--
-- Name: parcels update_parcels_aprtment; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_aprtment AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_aprtment_fn();


--
-- Name: parcels update_parcels_assessor; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_assessor AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_assessor_fn();


--
-- Name: parcels update_parcels_block; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_block AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_block_fn();


--
-- Name: parcels update_parcels_book; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_book AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_book_fn();


--
-- Name: parcels update_parcels_careof; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_careof AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_careof_fn();


--
-- Name: parcels update_parcels_cass_errorno; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_cass_errorno AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_cass_errorno_fn();


--
-- Name: parcels update_parcels_cdl_date; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_cdl_date AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_cdl_date_fn();


--
-- Name: parcels update_parcels_cdl_majority_category; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_cdl_majority_category AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_cdl_majority_category_fn();


--
-- Name: parcels update_parcels_cdl_majority_percent; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_cdl_majority_percent AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_cdl_majority_percent_fn();


--
-- Name: parcels update_parcels_cdl_raw; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_cdl_raw AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_cdl_raw_fn();


--
-- Name: parcels update_parcels_census_block; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_census_block AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_census_block_fn();


--
-- Name: parcels update_parcels_census_blockgroup; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_census_blockgroup AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_census_blockgroup_fn();


--
-- Name: parcels update_parcels_census_tract; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_census_tract AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_census_tract_fn();


--
-- Name: parcels update_parcels_city; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_city AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_city_fn();


--
-- Name: parcels update_parcels_ciuse; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_ciuse AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_ciuse_fn();


--
-- Name: parcels_coastline update_parcels_coastline_distance_km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_coastline_distance_km AFTER UPDATE ON parcels_production.parcels_coastline FOR EACH ROW EXECUTE FUNCTION public.update_parcels_coastline_distance_km_fn();


--
-- Name: parcels_coastline update_parcels_coastline_ll_uuid; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_coastline_ll_uuid AFTER UPDATE ON parcels_production.parcels_coastline FOR EACH ROW EXECUTE FUNCTION public.update_parcels_coastline_ll_uuid_fn();


--
-- Name: parcels update_parcels_convey1; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_convey1 AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_convey1_fn();


--
-- Name: parcels update_parcels_county; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_county AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_county_fn();


--
-- Name: parcels update_parcels_crtarcod; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_crtarcod AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_crtarcod_fn();


--
-- Name: parcels_density update_parcels_density_closest_geological_features_distance; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_closest_geological_features_distance AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_closest_geological_features_distance_fn();


--
-- Name: parcels_density update_parcels_density_closest_geological_features_items; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_closest_geological_features_items AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_closest_geological_features_items_fn();


--
-- Name: parcels_density update_parcels_density_closest_geological_features_name; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_closest_geological_features_name AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_closest_geological_features_name_fn();


--
-- Name: parcels_density update_parcels_density_closest_geological_features_tags; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_closest_geological_features_tags AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_closest_geological_features_tags_fn();


--
-- Name: parcels_density update_parcels_density_closest_healthcare_distance; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_closest_healthcare_distance AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_closest_healthcare_distance_fn();


--
-- Name: parcels_density update_parcels_density_closest_healthcare_items; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_closest_healthcare_items AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_closest_healthcare_items_fn();


--
-- Name: parcels_density update_parcels_density_closest_healthcare_name; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_closest_healthcare_name AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_closest_healthcare_name_fn();


--
-- Name: parcels_density update_parcels_density_closest_healthcare_tags; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_closest_healthcare_tags AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_closest_healthcare_tags_fn();


--
-- Name: parcels_density update_parcels_density_closest_library_distance; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_closest_library_distance AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_closest_library_distance_fn();


--
-- Name: parcels_density update_parcels_density_closest_library_items; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_closest_library_items AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_closest_library_items_fn();


--
-- Name: parcels_density update_parcels_density_closest_library_name; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_closest_library_name AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_closest_library_name_fn();


--
-- Name: parcels_density update_parcels_density_closest_library_tags; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_closest_library_tags AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_closest_library_tags_fn();


--
-- Name: parcels_density update_parcels_density_closest_military_distance; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_closest_military_distance AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_closest_military_distance_fn();


--
-- Name: parcels_density update_parcels_density_closest_military_items; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_closest_military_items AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_closest_military_items_fn();


--
-- Name: parcels_density update_parcels_density_closest_military_name; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_closest_military_name AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_closest_military_name_fn();


--
-- Name: parcels_density update_parcels_density_closest_military_tags; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_closest_military_tags AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_closest_military_tags_fn();


--
-- Name: parcels_density update_parcels_density_closest_natural_distance; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_closest_natural_distance AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_closest_natural_distance_fn();


--
-- Name: parcels_density update_parcels_density_closest_natural_items; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_closest_natural_items AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_closest_natural_items_fn();


--
-- Name: parcels_density update_parcels_density_closest_natural_name; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_closest_natural_name AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_closest_natural_name_fn();


--
-- Name: parcels_density update_parcels_density_closest_natural_tags; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_closest_natural_tags AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_closest_natural_tags_fn();


--
-- Name: parcels_density update_parcels_density_closest_pollution_distance; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_closest_pollution_distance AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_closest_pollution_distance_fn();


--
-- Name: parcels_density update_parcels_density_closest_pollution_items; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_closest_pollution_items AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_closest_pollution_items_fn();


--
-- Name: parcels_density update_parcels_density_closest_pollution_name; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_closest_pollution_name AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_closest_pollution_name_fn();


--
-- Name: parcels_density update_parcels_density_closest_pollution_tags; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_closest_pollution_tags AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_closest_pollution_tags_fn();


--
-- Name: parcels_density update_parcels_density_closest_public_land_distance; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_closest_public_land_distance AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_closest_public_land_distance_fn();


--
-- Name: parcels_density update_parcels_density_closest_public_land_items; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_closest_public_land_items AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_closest_public_land_items_fn();


--
-- Name: parcels_density update_parcels_density_closest_public_land_name; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_closest_public_land_name AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_closest_public_land_name_fn();


--
-- Name: parcels_density update_parcels_density_closest_public_land_tags; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_closest_public_land_tags AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_closest_public_land_tags_fn();


--
-- Name: parcels_density update_parcels_density_closest_religious_distance; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_closest_religious_distance AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_closest_religious_distance_fn();


--
-- Name: parcels_density update_parcels_density_closest_religious_items; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_closest_religious_items AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_closest_religious_items_fn();


--
-- Name: parcels_density update_parcels_density_closest_religious_name; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_closest_religious_name AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_closest_religious_name_fn();


--
-- Name: parcels_density update_parcels_density_closest_religious_tags; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_closest_religious_tags AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_closest_religious_tags_fn();


--
-- Name: parcels_density update_parcels_density_closest_spring_distance; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_closest_spring_distance AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_closest_spring_distance_fn();


--
-- Name: parcels_density update_parcels_density_closest_spring_items; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_closest_spring_items AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_closest_spring_items_fn();


--
-- Name: parcels_density update_parcels_density_closest_spring_name; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_closest_spring_name AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_closest_spring_name_fn();


--
-- Name: parcels_density update_parcels_density_closest_spring_tags; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_closest_spring_tags AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_closest_spring_tags_fn();


--
-- Name: parcels_density update_parcels_density_closest_water_distance; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_closest_water_distance AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_closest_water_distance_fn();


--
-- Name: parcels_density update_parcels_density_closest_water_items; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_closest_water_items AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_closest_water_items_fn();


--
-- Name: parcels_density update_parcels_density_closest_water_name; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_closest_water_name AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_closest_water_name_fn();


--
-- Name: parcels_density update_parcels_density_closest_water_tags; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_closest_water_tags AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_closest_water_tags_fn();


--
-- Name: parcels_density update_parcels_density_geological_features_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_geological_features_10km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_geological_features_10km_fn();


--
-- Name: parcels_density update_parcels_density_geological_features_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_geological_features_1km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_geological_features_1km_fn();


--
-- Name: parcels_density update_parcels_density_geological_features_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_geological_features_25km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_geological_features_25km_fn();


--
-- Name: parcels_density update_parcels_density_geological_features_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_geological_features_5km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_geological_features_5km_fn();


--
-- Name: parcels_density update_parcels_density_geological_features_count_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_geological_features_count_10km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_geological_features_count_10km_fn();


--
-- Name: parcels_density update_parcels_density_geological_features_count_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_geological_features_count_1km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_geological_features_count_1km_fn();


--
-- Name: parcels_density update_parcels_density_geological_features_count_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_geological_features_count_25km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_geological_features_count_25km_fn();


--
-- Name: parcels_density update_parcels_density_geological_features_count_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_geological_features_count_5km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_geological_features_count_5km_fn();


--
-- Name: parcels_density update_parcels_density_geological_features_updated; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_geological_features_updated AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_geological_features_updated_fn();


--
-- Name: parcels_density update_parcels_density_healthcare_100km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_healthcare_100km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_healthcare_100km_fn();


--
-- Name: parcels_density update_parcels_density_healthcare_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_healthcare_10km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_healthcare_10km_fn();


--
-- Name: parcels_density update_parcels_density_healthcare_150km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_healthcare_150km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_healthcare_150km_fn();


--
-- Name: parcels_density update_parcels_density_healthcare_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_healthcare_1km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_healthcare_1km_fn();


--
-- Name: parcels_density update_parcels_density_healthcare_200km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_healthcare_200km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_healthcare_200km_fn();


--
-- Name: parcels_density update_parcels_density_healthcare_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_healthcare_25km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_healthcare_25km_fn();


--
-- Name: parcels_density update_parcels_density_healthcare_50km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_healthcare_50km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_healthcare_50km_fn();


--
-- Name: parcels_density update_parcels_density_healthcare_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_healthcare_5km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_healthcare_5km_fn();


--
-- Name: parcels_density update_parcels_density_healthcare_count_100km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_healthcare_count_100km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_healthcare_count_100km_fn();


--
-- Name: parcels_density update_parcels_density_healthcare_count_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_healthcare_count_10km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_healthcare_count_10km_fn();


--
-- Name: parcels_density update_parcels_density_healthcare_count_150km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_healthcare_count_150km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_healthcare_count_150km_fn();


--
-- Name: parcels_density update_parcels_density_healthcare_count_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_healthcare_count_1km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_healthcare_count_1km_fn();


--
-- Name: parcels_density update_parcels_density_healthcare_count_200km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_healthcare_count_200km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_healthcare_count_200km_fn();


--
-- Name: parcels_density update_parcels_density_healthcare_count_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_healthcare_count_25km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_healthcare_count_25km_fn();


--
-- Name: parcels_density update_parcels_density_healthcare_count_50km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_healthcare_count_50km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_healthcare_count_50km_fn();


--
-- Name: parcels_density update_parcels_density_healthcare_count_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_healthcare_count_5km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_healthcare_count_5km_fn();


--
-- Name: parcels_density update_parcels_density_healthcare_updated; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_healthcare_updated AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_healthcare_updated_fn();


--
-- Name: parcels_density update_parcels_density_library_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_library_10km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_library_10km_fn();


--
-- Name: parcels_density update_parcels_density_library_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_library_1km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_library_1km_fn();


--
-- Name: parcels_density update_parcels_density_library_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_library_25km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_library_25km_fn();


--
-- Name: parcels_density update_parcels_density_library_50km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_library_50km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_library_50km_fn();


--
-- Name: parcels_density update_parcels_density_library_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_library_5km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_library_5km_fn();


--
-- Name: parcels_density update_parcels_density_library_count_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_library_count_10km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_library_count_10km_fn();


--
-- Name: parcels_density update_parcels_density_library_count_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_library_count_1km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_library_count_1km_fn();


--
-- Name: parcels_density update_parcels_density_library_count_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_library_count_25km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_library_count_25km_fn();


--
-- Name: parcels_density update_parcels_density_library_count_50km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_library_count_50km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_library_count_50km_fn();


--
-- Name: parcels_density update_parcels_density_library_count_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_library_count_5km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_library_count_5km_fn();


--
-- Name: parcels_density update_parcels_density_library_updated; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_library_updated AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_library_updated_fn();


--
-- Name: parcels_density update_parcels_density_ll_uuid; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_ll_uuid AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_ll_uuid_fn();


--
-- Name: parcels_density update_parcels_density_military_100km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_military_100km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_military_100km_fn();


--
-- Name: parcels_density update_parcels_density_military_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_military_10km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_military_10km_fn();


--
-- Name: parcels_density update_parcels_density_military_150km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_military_150km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_military_150km_fn();


--
-- Name: parcels_density update_parcels_density_military_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_military_1km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_military_1km_fn();


--
-- Name: parcels_density update_parcels_density_military_200km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_military_200km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_military_200km_fn();


--
-- Name: parcels_density update_parcels_density_military_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_military_25km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_military_25km_fn();


--
-- Name: parcels_density update_parcels_density_military_50km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_military_50km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_military_50km_fn();


--
-- Name: parcels_density update_parcels_density_military_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_military_5km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_military_5km_fn();


--
-- Name: parcels_density update_parcels_density_military_count_100km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_military_count_100km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_military_count_100km_fn();


--
-- Name: parcels_density update_parcels_density_military_count_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_military_count_10km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_military_count_10km_fn();


--
-- Name: parcels_density update_parcels_density_military_count_150km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_military_count_150km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_military_count_150km_fn();


--
-- Name: parcels_density update_parcels_density_military_count_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_military_count_1km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_military_count_1km_fn();


--
-- Name: parcels_density update_parcels_density_military_count_200km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_military_count_200km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_military_count_200km_fn();


--
-- Name: parcels_density update_parcels_density_military_count_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_military_count_25km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_military_count_25km_fn();


--
-- Name: parcels_density update_parcels_density_military_count_50km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_military_count_50km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_military_count_50km_fn();


--
-- Name: parcels_density update_parcels_density_military_count_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_military_count_5km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_military_count_5km_fn();


--
-- Name: parcels_density update_parcels_density_military_updated; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_military_updated AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_military_updated_fn();


--
-- Name: parcels_density update_parcels_density_natural_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_natural_10km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_natural_10km_fn();


--
-- Name: parcels_density update_parcels_density_natural_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_natural_1km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_natural_1km_fn();


--
-- Name: parcels_density update_parcels_density_natural_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_natural_25km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_natural_25km_fn();


--
-- Name: parcels_density update_parcels_density_natural_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_natural_5km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_natural_5km_fn();


--
-- Name: parcels_density update_parcels_density_natural_count_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_natural_count_10km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_natural_count_10km_fn();


--
-- Name: parcels_density update_parcels_density_natural_count_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_natural_count_1km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_natural_count_1km_fn();


--
-- Name: parcels_density update_parcels_density_natural_count_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_natural_count_25km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_natural_count_25km_fn();


--
-- Name: parcels_density update_parcels_density_natural_count_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_natural_count_5km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_natural_count_5km_fn();


--
-- Name: parcels_density update_parcels_density_natural_density_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_natural_density_10km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_natural_density_10km_fn();


--
-- Name: parcels_density update_parcels_density_natural_density_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_natural_density_1km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_natural_density_1km_fn();


--
-- Name: parcels_density update_parcels_density_natural_density_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_natural_density_25km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_natural_density_25km_fn();


--
-- Name: parcels_density update_parcels_density_natural_density_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_natural_density_5km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_natural_density_5km_fn();


--
-- Name: parcels_density update_parcels_density_natural_updated; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_natural_updated AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_natural_updated_fn();


--
-- Name: parcels_density update_parcels_density_parcels_count_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_parcels_count_10km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_parcels_count_10km_fn();


--
-- Name: parcels_density update_parcels_density_parcels_count_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_parcels_count_1km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_parcels_count_1km_fn();


--
-- Name: parcels_density update_parcels_density_parcels_count_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_parcels_count_25km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_parcels_count_25km_fn();


--
-- Name: parcels_density update_parcels_density_parcels_count_50km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_parcels_count_50km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_parcels_count_50km_fn();


--
-- Name: parcels_density update_parcels_density_parcels_count_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_parcels_count_5km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_parcels_count_5km_fn();


--
-- Name: parcels_density update_parcels_density_parcels_density_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_parcels_density_10km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_parcels_density_10km_fn();


--
-- Name: parcels_density update_parcels_density_parcels_density_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_parcels_density_1km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_parcels_density_1km_fn();


--
-- Name: parcels_density update_parcels_density_parcels_density_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_parcels_density_25km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_parcels_density_25km_fn();


--
-- Name: parcels_density update_parcels_density_parcels_density_50km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_parcels_density_50km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_parcels_density_50km_fn();


--
-- Name: parcels_density update_parcels_density_parcels_density_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_parcels_density_5km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_parcels_density_5km_fn();


--
-- Name: parcels_density update_parcels_density_parcels_updated; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_parcels_updated AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_parcels_updated_fn();


--
-- Name: parcels_density update_parcels_density_pollution_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_pollution_10km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_pollution_10km_fn();


--
-- Name: parcels_density update_parcels_density_pollution_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_pollution_1km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_pollution_1km_fn();


--
-- Name: parcels_density update_parcels_density_pollution_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_pollution_25km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_pollution_25km_fn();


--
-- Name: parcels_density update_parcels_density_pollution_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_pollution_5km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_pollution_5km_fn();


--
-- Name: parcels_density update_parcels_density_pollution_count_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_pollution_count_10km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_pollution_count_10km_fn();


--
-- Name: parcels_density update_parcels_density_pollution_count_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_pollution_count_1km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_pollution_count_1km_fn();


--
-- Name: parcels_density update_parcels_density_pollution_count_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_pollution_count_25km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_pollution_count_25km_fn();


--
-- Name: parcels_density update_parcels_density_pollution_count_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_pollution_count_5km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_pollution_count_5km_fn();


--
-- Name: parcels_density update_parcels_density_pollution_density_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_pollution_density_10km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_pollution_density_10km_fn();


--
-- Name: parcels_density update_parcels_density_pollution_density_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_pollution_density_1km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_pollution_density_1km_fn();


--
-- Name: parcels_density update_parcels_density_pollution_density_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_pollution_density_25km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_pollution_density_25km_fn();


--
-- Name: parcels_density update_parcels_density_pollution_density_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_pollution_density_5km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_pollution_density_5km_fn();


--
-- Name: parcels_density update_parcels_density_pollution_updated; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_pollution_updated AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_pollution_updated_fn();


--
-- Name: parcels_density update_parcels_density_public_land_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_public_land_10km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_public_land_10km_fn();


--
-- Name: parcels_density update_parcels_density_public_land_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_public_land_1km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_public_land_1km_fn();


--
-- Name: parcels_density update_parcels_density_public_land_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_public_land_25km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_public_land_25km_fn();


--
-- Name: parcels_density update_parcels_density_public_land_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_public_land_5km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_public_land_5km_fn();


--
-- Name: parcels_density update_parcels_density_public_land_count_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_public_land_count_10km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_public_land_count_10km_fn();


--
-- Name: parcels_density update_parcels_density_public_land_count_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_public_land_count_1km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_public_land_count_1km_fn();


--
-- Name: parcels_density update_parcels_density_public_land_count_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_public_land_count_25km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_public_land_count_25km_fn();


--
-- Name: parcels_density update_parcels_density_public_land_count_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_public_land_count_5km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_public_land_count_5km_fn();


--
-- Name: parcels_density update_parcels_density_public_land_density_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_public_land_density_10km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_public_land_density_10km_fn();


--
-- Name: parcels_density update_parcels_density_public_land_density_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_public_land_density_1km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_public_land_density_1km_fn();


--
-- Name: parcels_density update_parcels_density_public_land_density_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_public_land_density_25km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_public_land_density_25km_fn();


--
-- Name: parcels_density update_parcels_density_public_land_density_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_public_land_density_5km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_public_land_density_5km_fn();


--
-- Name: parcels_density update_parcels_density_public_land_updated; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_public_land_updated AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_public_land_updated_fn();


--
-- Name: parcels_density update_parcels_density_religion_100km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_religion_100km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_religion_100km_fn();


--
-- Name: parcels_density update_parcels_density_religion_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_religion_10km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_religion_10km_fn();


--
-- Name: parcels_density update_parcels_density_religion_150km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_religion_150km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_religion_150km_fn();


--
-- Name: parcels_density update_parcels_density_religion_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_religion_1km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_religion_1km_fn();


--
-- Name: parcels_density update_parcels_density_religion_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_religion_25km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_religion_25km_fn();


--
-- Name: parcels_density update_parcels_density_religion_50km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_religion_50km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_religion_50km_fn();


--
-- Name: parcels_density update_parcels_density_religion_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_religion_5km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_religion_5km_fn();


--
-- Name: parcels_density update_parcels_density_religion_count_100km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_religion_count_100km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_religion_count_100km_fn();


--
-- Name: parcels_density update_parcels_density_religion_count_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_religion_count_10km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_religion_count_10km_fn();


--
-- Name: parcels_density update_parcels_density_religion_count_150km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_religion_count_150km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_religion_count_150km_fn();


--
-- Name: parcels_density update_parcels_density_religion_count_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_religion_count_1km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_religion_count_1km_fn();


--
-- Name: parcels_density update_parcels_density_religion_count_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_religion_count_25km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_religion_count_25km_fn();


--
-- Name: parcels_density update_parcels_density_religion_count_50km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_religion_count_50km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_religion_count_50km_fn();


--
-- Name: parcels_density update_parcels_density_religion_count_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_religion_count_5km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_religion_count_5km_fn();


--
-- Name: parcels_density update_parcels_density_religion_density_100km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_religion_density_100km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_religion_density_100km_fn();


--
-- Name: parcels_density update_parcels_density_religion_density_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_religion_density_10km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_religion_density_10km_fn();


--
-- Name: parcels_density update_parcels_density_religion_density_150km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_religion_density_150km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_religion_density_150km_fn();


--
-- Name: parcels_density update_parcels_density_religion_density_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_religion_density_1km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_religion_density_1km_fn();


--
-- Name: parcels_density update_parcels_density_religion_density_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_religion_density_25km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_religion_density_25km_fn();


--
-- Name: parcels_density update_parcels_density_religion_density_50km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_religion_density_50km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_religion_density_50km_fn();


--
-- Name: parcels_density update_parcels_density_religion_density_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_religion_density_5km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_religion_density_5km_fn();


--
-- Name: parcels_density update_parcels_density_religious_updated; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_religious_updated AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_religious_updated_fn();


--
-- Name: parcels_density update_parcels_density_spring_100km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_spring_100km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_spring_100km_fn();


--
-- Name: parcels_density update_parcels_density_spring_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_spring_10km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_spring_10km_fn();


--
-- Name: parcels_density update_parcels_density_spring_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_spring_1km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_spring_1km_fn();


--
-- Name: parcels_density update_parcels_density_spring_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_spring_25km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_spring_25km_fn();


--
-- Name: parcels_density update_parcels_density_spring_50km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_spring_50km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_spring_50km_fn();


--
-- Name: parcels_density update_parcels_density_spring_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_spring_5km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_spring_5km_fn();


--
-- Name: parcels_density update_parcels_density_spring_count_100km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_spring_count_100km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_spring_count_100km_fn();


--
-- Name: parcels_density update_parcels_density_spring_count_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_spring_count_10km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_spring_count_10km_fn();


--
-- Name: parcels_density update_parcels_density_spring_count_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_spring_count_1km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_spring_count_1km_fn();


--
-- Name: parcels_density update_parcels_density_spring_count_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_spring_count_25km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_spring_count_25km_fn();


--
-- Name: parcels_density update_parcels_density_spring_count_50km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_spring_count_50km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_spring_count_50km_fn();


--
-- Name: parcels_density update_parcels_density_spring_count_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_spring_count_5km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_spring_count_5km_fn();


--
-- Name: parcels_density update_parcels_density_spring_updated; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_spring_updated AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_spring_updated_fn();


--
-- Name: parcels_density update_parcels_density_water_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_water_10km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_water_10km_fn();


--
-- Name: parcels_density update_parcels_density_water_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_water_1km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_water_1km_fn();


--
-- Name: parcels_density update_parcels_density_water_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_water_25km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_water_25km_fn();


--
-- Name: parcels_density update_parcels_density_water_50km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_water_50km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_water_50km_fn();


--
-- Name: parcels_density update_parcels_density_water_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_water_5km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_water_5km_fn();


--
-- Name: parcels_density update_parcels_density_water_count_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_water_count_10km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_water_count_10km_fn();


--
-- Name: parcels_density update_parcels_density_water_count_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_water_count_1km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_water_count_1km_fn();


--
-- Name: parcels_density update_parcels_density_water_count_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_water_count_25km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_water_count_25km_fn();


--
-- Name: parcels_density update_parcels_density_water_count_50km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_water_count_50km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_water_count_50km_fn();


--
-- Name: parcels_density update_parcels_density_water_count_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_water_count_5km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_water_count_5km_fn();


--
-- Name: parcels_density update_parcels_density_water_density_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_water_density_10km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_water_density_10km_fn();


--
-- Name: parcels_density update_parcels_density_water_density_1km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_water_density_1km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_water_density_1km_fn();


--
-- Name: parcels_density update_parcels_density_water_density_25km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_water_density_25km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_water_density_25km_fn();


--
-- Name: parcels_density update_parcels_density_water_density_50km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_water_density_50km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_water_density_50km_fn();


--
-- Name: parcels_density update_parcels_density_water_density_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_water_density_5km AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_water_density_5km_fn();


--
-- Name: parcels_density update_parcels_density_water_updated; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_density_water_updated AFTER UPDATE ON parcels_production.parcels_density FOR EACH ROW EXECUTE FUNCTION public.update_parcels_density_water_updated_fn();


--
-- Name: parcels update_parcels_depth; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_depth AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_depth_fn();


--
-- Name: parcels update_parcels_descbldg; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_descbldg AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_descbldg_fn();


--
-- Name: parcels update_parcels_descciuse; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_descciuse AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_descciuse_fn();


--
-- Name: parcels update_parcels_desccnst; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_desccnst AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_desccnst_fn();


--
-- Name: parcels update_parcels_descexcl; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_descexcl AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_descexcl_fn();


--
-- Name: parcels update_parcels_descgrad; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_descgrad AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_descgrad_fn();


--
-- Name: parcels update_parcels_desctown; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_desctown AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_desctown_fn();


--
-- Name: parcels update_parcels_detailed_subdivision_code; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_detailed_subdivision_code AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_detailed_subdivision_code_fn();


--
-- Name: parcels update_parcels_dpv_codes; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_dpv_codes AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_dpv_codes_fn();


--
-- Name: parcels update_parcels_dpv_notes; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_dpv_notes AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_dpv_notes_fn();


--
-- Name: parcels update_parcels_dpv_status; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_dpv_status AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_dpv_status_fn();


--
-- Name: parcels update_parcels_dpv_type; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_dpv_type AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_dpv_type_fn();


--
-- Name: parcels update_parcels_dr1clerk; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_dr1clerk AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_dr1clerk_fn();


--
-- Name: parcels update_parcels_dr1folio; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_dr1folio AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_dr1folio_fn();


--
-- Name: parcels update_parcels_dr1liber; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_dr1liber AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_dr1liber_fn();


--
-- Name: parcels_elevation update_parcels_elevation_ll_uuid; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_elevation_ll_uuid AFTER UPDATE ON parcels_production.parcels_elevation FOR EACH ROW EXECUTE FUNCTION public.update_parcels_elevation_ll_uuid_fn();


--
-- Name: parcels_elevation update_parcels_elevation_max; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_elevation_max AFTER UPDATE ON parcels_production.parcels_elevation FOR EACH ROW EXECUTE FUNCTION public.update_parcels_elevation_max_fn();


--
-- Name: parcels_elevation update_parcels_elevation_median; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_elevation_median AFTER UPDATE ON parcels_production.parcels_elevation FOR EACH ROW EXECUTE FUNCTION public.update_parcels_elevation_median_fn();


--
-- Name: parcels_elevation update_parcels_elevation_min; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_elevation_min AFTER UPDATE ON parcels_production.parcels_elevation FOR EACH ROW EXECUTE FUNCTION public.update_parcels_elevation_min_fn();


--
-- Name: parcels_elevation update_parcels_elevation_p10; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_elevation_p10 AFTER UPDATE ON parcels_production.parcels_elevation FOR EACH ROW EXECUTE FUNCTION public.update_parcels_elevation_p10_fn();


--
-- Name: parcels_elevation update_parcels_elevation_p25; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_elevation_p25 AFTER UPDATE ON parcels_production.parcels_elevation FOR EACH ROW EXECUTE FUNCTION public.update_parcels_elevation_p25_fn();


--
-- Name: parcels_elevation update_parcels_elevation_p50; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_elevation_p50 AFTER UPDATE ON parcels_production.parcels_elevation FOR EACH ROW EXECUTE FUNCTION public.update_parcels_elevation_p50_fn();


--
-- Name: parcels_elevation update_parcels_elevation_p75; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_elevation_p75 AFTER UPDATE ON parcels_production.parcels_elevation FOR EACH ROW EXECUTE FUNCTION public.update_parcels_elevation_p75_fn();


--
-- Name: parcels_elevation update_parcels_elevation_p90; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_elevation_p90 AFTER UPDATE ON parcels_production.parcels_elevation FOR EACH ROW EXECUTE FUNCTION public.update_parcels_elevation_p90_fn();


--
-- Name: parcels update_parcels_entznassm; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_entznassm AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_entznassm_fn();


--
-- Name: parcels update_parcels_entzndat; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_entzndat AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_entzndat_fn();


--
-- Name: parcels update_parcels_exclass; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_exclass AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_exclass_fn();


--
-- Name: parcels update_parcels_fcmacode; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_fcmacode AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_fcmacode_fn();


--
-- Name: parcels update_parcels_geogcode; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_geogcode AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_geogcode_fn();


--
-- Name: parcels update_parcels_geoid; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_geoid AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_geoid_fn();


--
-- Name: parcels_geometry update_parcels_geometry_coordinates; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_geometry_coordinates AFTER UPDATE ON parcels_production.parcels_geometry FOR EACH ROW EXECUTE FUNCTION public.update_parcels_geometry_coordinates_fn();


--
-- Name: parcels_geometry update_parcels_geometry_ll_uuid; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_geometry_ll_uuid AFTER UPDATE ON parcels_production.parcels_geometry FOR EACH ROW EXECUTE FUNCTION public.update_parcels_geometry_ll_uuid_fn();


--
-- Name: parcels update_parcels_gisacre; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_gisacre AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_gisacre_fn();


--
-- Name: parcels update_parcels_goz; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_goz AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_goz_fn();


--
-- Name: parcels update_parcels_goz_tract; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_goz_tract AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_goz_tract_fn();


--
-- Name: parcels update_parcels_gr1clrk1v; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_gr1clrk1v AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_gr1clrk1v_fn();


--
-- Name: parcels update_parcels_gr1folo1; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_gr1folo1 AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_gr1folo1_fn();


--
-- Name: parcels update_parcels_gr1libr1; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_gr1libr1 AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_gr1libr1_fn();


--
-- Name: parcels update_parcels_grid; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_grid AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_grid_fn();


--
-- Name: parcels update_parcels_grntnam1; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_grntnam1 AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_grntnam1_fn();


--
-- Name: parcels update_parcels_homestead_exemption; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_homestead_exemption AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_homestead_exemption_fn();


--
-- Name: parcels update_parcels_homqlcod; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_homqlcod AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_homqlcod_fn();


--
-- Name: parcels update_parcels_homqldat; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_homqldat AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_homqldat_fn();


--
-- Name: parcels update_parcels_improvval; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_improvval AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_improvval_fn();


--
-- Name: parcels_internet update_parcels_internet_broadband_updated; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_internet_broadband_updated AFTER UPDATE ON parcels_production.parcels_internet FOR EACH ROW EXECUTE FUNCTION public.update_parcels_internet_broadband_updated_fn();


--
-- Name: parcels_internet update_parcels_internet_closest_provider_distance; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_internet_closest_provider_distance AFTER UPDATE ON parcels_production.parcels_internet FOR EACH ROW EXECUTE FUNCTION public.update_parcels_internet_closest_provider_distance_fn();


--
-- Name: parcels_internet update_parcels_internet_closest_provider_h3_res8_id; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_internet_closest_provider_h3_res8_id AFTER UPDATE ON parcels_production.parcels_internet FOR EACH ROW EXECUTE FUNCTION public.update_parcels_internet_closest_provider_h3_res8_id_fn();


--
-- Name: parcels_internet update_parcels_internet_ll_uuid; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_internet_ll_uuid AFTER UPDATE ON parcels_production.parcels_internet FOR EACH ROW EXECUTE FUNCTION public.update_parcels_internet_ll_uuid_fn();


--
-- Name: parcels_internet update_parcels_internet_low_latency; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_internet_low_latency AFTER UPDATE ON parcels_production.parcels_internet FOR EACH ROW EXECUTE FUNCTION public.update_parcels_internet_low_latency_fn();


--
-- Name: parcels_internet update_parcels_internet_max_download_speed; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_internet_max_download_speed AFTER UPDATE ON parcels_production.parcels_internet FOR EACH ROW EXECUTE FUNCTION public.update_parcels_internet_max_download_speed_fn();


--
-- Name: parcels_internet update_parcels_internet_max_upload_speed; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_internet_max_upload_speed AFTER UPDATE ON parcels_production.parcels_internet FOR EACH ROW EXECUTE FUNCTION public.update_parcels_internet_max_upload_speed_fn();


--
-- Name: parcels_internet update_parcels_internet_nearby_max_download_speed; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_internet_nearby_max_download_speed AFTER UPDATE ON parcels_production.parcels_internet FOR EACH ROW EXECUTE FUNCTION public.update_parcels_internet_nearby_max_download_speed_fn();


--
-- Name: parcels_internet update_parcels_internet_nearby_max_upload_speed; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_internet_nearby_max_upload_speed AFTER UPDATE ON parcels_production.parcels_internet FOR EACH ROW EXECUTE FUNCTION public.update_parcels_internet_nearby_max_upload_speed_fn();


--
-- Name: parcels_internet update_parcels_internet_surrounding_coverage_density; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_internet_surrounding_coverage_density AFTER UPDATE ON parcels_production.parcels_internet FOR EACH ROW EXECUTE FUNCTION public.update_parcels_internet_surrounding_coverage_density_fn();


--
-- Name: parcels_internet update_parcels_internet_surrounding_providers; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_internet_surrounding_providers AFTER UPDATE ON parcels_production.parcels_internet FOR EACH ROW EXECUTE FUNCTION public.update_parcels_internet_surrounding_providers_fn();


--
-- Name: parcels update_parcels_jurscode; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_jurscode AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_jurscode_fn();


--
-- Name: parcels update_parcels_landval; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_landval AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_landval_fn();


--
-- Name: parcels update_parcels_lastassd; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_lastassd AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_lastassd_fn();


--
-- Name: parcels update_parcels_lastinsp; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_lastinsp AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_lastinsp_fn();


--
-- Name: parcels update_parcels_lat; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_lat AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_lat_fn();


--
-- Name: parcels update_parcels_lbcs_activity; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_lbcs_activity AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_lbcs_activity_fn();


--
-- Name: parcels update_parcels_lbcs_activity_desc; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_lbcs_activity_desc AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_lbcs_activity_desc_fn();


--
-- Name: parcels update_parcels_lbcs_function; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_lbcs_function AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_lbcs_function_fn();


--
-- Name: parcels update_parcels_lbcs_function_desc; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_lbcs_function_desc AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_lbcs_function_desc_fn();


--
-- Name: parcels update_parcels_lbcs_ownership; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_lbcs_ownership AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_lbcs_ownership_fn();


--
-- Name: parcels update_parcels_lbcs_ownership_desc; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_lbcs_ownership_desc AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_lbcs_ownership_desc_fn();


--
-- Name: parcels update_parcels_lbcs_site; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_lbcs_site AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_lbcs_site_fn();


--
-- Name: parcels update_parcels_lbcs_site_desc; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_lbcs_site_desc AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_lbcs_site_desc_fn();


--
-- Name: parcels update_parcels_lbcs_structure; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_lbcs_structure AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_lbcs_structure_fn();


--
-- Name: parcels update_parcels_lbcs_structure_desc; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_lbcs_structure_desc AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_lbcs_structure_desc_fn();


--
-- Name: parcels update_parcels_legaldesc; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_legaldesc AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_legaldesc_fn();


--
-- Name: parcels update_parcels_ll_bldg_count; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_ll_bldg_count AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_ll_bldg_count_fn();


--
-- Name: parcels update_parcels_ll_bldg_footprint_sqft; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_ll_bldg_footprint_sqft AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_ll_bldg_footprint_sqft_fn();


--
-- Name: parcels update_parcels_ll_gisacre; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_ll_gisacre AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_ll_gisacre_fn();


--
-- Name: parcels update_parcels_ll_gissqft; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_ll_gissqft AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_ll_gissqft_fn();


--
-- Name: parcels update_parcels_ll_stable_id; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_ll_stable_id AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_ll_stable_id_fn();


--
-- Name: parcels update_parcels_ll_updated_at; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_ll_updated_at AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_ll_updated_at_fn();


--
-- Name: parcels update_parcels_ll_uuid; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_ll_uuid AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_ll_uuid_fn();


--
-- Name: parcels update_parcels_location_name; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_location_name AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_location_name_fn();


--
-- Name: parcels update_parcels_lon; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_lon AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_lon_fn();


--
-- Name: parcels update_parcels_lot; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_lot AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_lot_fn();


--
-- Name: parcels update_parcels_luom; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_luom AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_luom_fn();


--
-- Name: parcels update_parcels_mail_addno; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_mail_addno AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_mail_addno_fn();


--
-- Name: parcels update_parcels_mail_addpref; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_mail_addpref AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_mail_addpref_fn();


--
-- Name: parcels update_parcels_mail_address2; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_mail_address2 AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_mail_address2_fn();


--
-- Name: parcels update_parcels_mail_addstr; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_mail_addstr AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_mail_addstr_fn();


--
-- Name: parcels update_parcels_mail_addstsuf; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_mail_addstsuf AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_mail_addstsuf_fn();


--
-- Name: parcels update_parcels_mail_addsttyp; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_mail_addsttyp AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_mail_addsttyp_fn();


--
-- Name: parcels update_parcels_mail_city; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_mail_city AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_mail_city_fn();


--
-- Name: parcels update_parcels_mail_country; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_mail_country AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_mail_country_fn();


--
-- Name: parcels update_parcels_mail_state2; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_mail_state2 AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_mail_state2_fn();


--
-- Name: parcels update_parcels_mail_unit; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_mail_unit AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_mail_unit_fn();


--
-- Name: parcels update_parcels_mail_urbanization; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_mail_urbanization AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_mail_urbanization_fn();


--
-- Name: parcels update_parcels_mail_zip; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_mail_zip AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_mail_zip_fn();


--
-- Name: parcels update_parcels_mailadd; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_mailadd AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_mailadd_fn();


--
-- Name: parcels update_parcels_map; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_map AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_map_fn();


--
-- Name: parcels_meta update_parcels_meta_ll_uuid; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_meta_ll_uuid AFTER UPDATE ON parcels_production.parcels_meta FOR EACH ROW EXECUTE FUNCTION public.update_parcels_meta_ll_uuid_fn();


--
-- Name: parcels_meta update_parcels_meta_public; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_meta_public AFTER UPDATE ON parcels_production.parcels_meta FOR EACH ROW EXECUTE FUNCTION public.update_parcels_meta_public_fn();


--
-- Name: parcels_meta update_parcels_meta_tribal; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_meta_tribal AFTER UPDATE ON parcels_production.parcels_meta FOR EACH ROW EXECUTE FUNCTION public.update_parcels_meta_tribal_fn();


--
-- Name: parcels update_parcels_mortgag1; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_mortgag1 AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_mortgag1_fn();


--
-- Name: parcels update_parcels_multistruct; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_multistruct AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_multistruct_fn();


--
-- Name: parcels update_parcels_namekey; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_namekey AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_namekey_fn();


--
-- Name: parcels_nature update_parcels_nature_leaf_rating; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_nature_leaf_rating AFTER UPDATE ON parcels_production.parcels_nature FOR EACH ROW EXECUTE FUNCTION public.update_parcels_nature_leaf_rating_fn();


--
-- Name: parcels_nature update_parcels_nature_ll_uuid; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_nature_ll_uuid AFTER UPDATE ON parcels_production.parcels_nature FOR EACH ROW EXECUTE FUNCTION public.update_parcels_nature_ll_uuid_fn();


--
-- Name: parcels_nature update_parcels_nature_nature_score; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_nature_nature_score AFTER UPDATE ON parcels_production.parcels_nature FOR EACH ROW EXECUTE FUNCTION public.update_parcels_nature_nature_score_fn();


--
-- Name: parcels_nature update_parcels_nature_nature_updated; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_nature_nature_updated AFTER UPDATE ON parcels_production.parcels_nature FOR EACH ROW EXECUTE FUNCTION public.update_parcels_nature_nature_updated_fn();


--
-- Name: parcels update_parcels_neighborhood; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_neighborhood AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_neighborhood_fn();


--
-- Name: parcels update_parcels_nprcarea; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_nprcarea AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_nprcarea_fn();


--
-- Name: parcels update_parcels_nprcluom; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_nprcluom AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_nprcluom_fn();


--
-- Name: parcels update_parcels_nprctstdat; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_nprctstdat AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_nprctstdat_fn();


--
-- Name: parcels update_parcels_numstories; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_numstories AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_numstories_fn();


--
-- Name: parcels update_parcels_numunits; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_numunits AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_numunits_fn();


--
-- Name: parcels update_parcels_ogc_fid; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_ogc_fid AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_ogc_fid_fn();


--
-- Name: parcels update_parcels_ooi; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_ooi AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_ooi_fn();


--
-- Name: parcels update_parcels_original_address; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_original_address AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_original_address_fn();


--
-- Name: parcels update_parcels_other; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_other AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_other_fn();


--
-- Name: parcels update_parcels_owner; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_owner AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_owner_fn();


--
-- Name: parcels update_parcels_owner2; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_owner2 AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_owner2_fn();


--
-- Name: parcels update_parcels_owner3; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_owner3 AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_owner3_fn();


--
-- Name: parcels update_parcels_owner4; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_owner4 AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_owner4_fn();


--
-- Name: parcels update_parcels_owner_index; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_owner_index AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_owner_index_fn();


--
-- Name: parcels update_parcels_ownfrst; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_ownfrst AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_ownfrst_fn();


--
-- Name: parcels update_parcels_ownlast; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_ownlast AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_ownlast_fn();


--
-- Name: parcels update_parcels_owntype; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_owntype AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_owntype_fn();


--
-- Name: parcels update_parcels_padus_public_access; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_padus_public_access AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_padus_public_access_fn();


--
-- Name: parcels update_parcels_page; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_page AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_page_fn();


--
-- Name: parcels update_parcels_parcelnumb; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_parcelnumb AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_parcelnumb_fn();


--
-- Name: parcels update_parcels_parval; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_parval AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_parval_fn();


--
-- Name: parcels update_parcels_parvaltype; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_parvaltype AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_parvaltype_fn();


--
-- Name: parcels update_parcels_path; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_path AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_path_fn();


--
-- Name: parcels update_parcels_permittyp; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_permittyp AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_permittyp_fn();


--
-- Name: parcels update_parcels_pfic; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_pfic AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_pfic_fn();


--
-- Name: parcels update_parcels_pfih; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_pfih AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_pfih_fn();


--
-- Name: parcels update_parcels_pflw; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_pflw AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_pflw_fn();


--
-- Name: parcels update_parcels_pfsp; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_pfsp AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_pfsp_fn();


--
-- Name: parcels update_parcels_pfsu; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_pfsu AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_pfsu_fn();


--
-- Name: parcels update_parcels_pfus; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_pfus AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_pfus_fn();


--
-- Name: parcels update_parcels_pfuw; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_pfuw AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_pfuw_fn();


--
-- Name: parcels update_parcels_plat; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_plat AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_plat_fn();


--
-- Name: parcels update_parcels_plndevdat; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_plndevdat AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_plndevdat_fn();


--
-- Name: parcels update_parcels_polyid; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_polyid AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_polyid_fn();


--
-- Name: parcels update_parcels_ptype; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_ptype AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_ptype_fn();


--
-- Name: parcels update_parcels_qoz; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_qoz AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_qoz_fn();


--
-- Name: parcels update_parcels_qoz_tract; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_qoz_tract AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_qoz_tract_fn();


--
-- Name: parcels_rank update_parcels_rank_active_days_in_2015_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_active_days_in_2015_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_active_days_in_2015_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_active_days_in_2016_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_active_days_in_2016_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_active_days_in_2016_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_active_days_in_2017_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_active_days_in_2017_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_active_days_in_2017_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_active_days_in_2018_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_active_days_in_2018_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_active_days_in_2018_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_active_days_in_2019_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_active_days_in_2019_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_active_days_in_2019_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_active_days_in_2020_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_active_days_in_2020_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_active_days_in_2020_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_active_days_in_2021_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_active_days_in_2021_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_active_days_in_2021_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_active_days_in_2022_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_active_days_in_2022_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_active_days_in_2022_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_avg_active_days_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_avg_active_days_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_avg_active_days_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_avg_cloudy_hours_10pct_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_avg_cloudy_hours_10pct_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_avg_cloudy_hours_10pct_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_avg_cloudy_hours_50pct_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_avg_cloudy_hours_50pct_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_avg_cloudy_hours_50pct_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_avg_cloudy_hours_90pct_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_avg_cloudy_hours_90pct_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_avg_cloudy_hours_90pct_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_avg_daytime_hrs_below_0c_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_avg_daytime_hrs_below_0c_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_avg_daytime_hrs_below_0c_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_avg_daytime_hrs_below_10c_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_avg_daytime_hrs_below_10c_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_avg_daytime_hrs_below_10c_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_avg_daytime_hrs_below_5c_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_avg_daytime_hrs_below_5c_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_avg_daytime_hrs_below_5c_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_avg_dinner_outside_days_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_avg_dinner_outside_days_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_avg_dinner_outside_days_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_avg_fair_days_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_avg_fair_days_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_avg_fair_days_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_avg_hrs_below_0c_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_avg_hrs_below_0c_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_avg_hrs_below_0c_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_avg_hrs_below_10c_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_avg_hrs_below_10c_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_avg_hrs_below_10c_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_avg_hrs_below_5c_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_avg_hrs_below_5c_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_avg_hrs_below_5c_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_avg_indoor_days_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_avg_indoor_days_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_avg_indoor_days_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_avg_perfect_days_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_avg_perfect_days_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_avg_perfect_days_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_closest_military_distance_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_closest_military_distance_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_closest_military_distance_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_closest_provider_distance_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_closest_provider_distance_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_closest_provider_distance_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_closest_spring_distance_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_closest_spring_distance_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_closest_spring_distance_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_daytime_hours_above_10_pct_cloud_cover_in_2; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_daytime_hours_above_10_pct_cloud_cover_in_2 AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_daytime_hours_above_10_pct_cloud_cover_in_2();


--
-- Name: parcels_rank update_parcels_rank_daytime_hours_above_20_pct_cloud_cover_in_2; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_daytime_hours_above_20_pct_cloud_cover_in_2 AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_daytime_hours_above_20_pct_cloud_cover_in_2();


--
-- Name: parcels_rank update_parcels_rank_daytime_hours_above_30_pct_cloud_cover_in_2; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_daytime_hours_above_30_pct_cloud_cover_in_2 AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_daytime_hours_above_30_pct_cloud_cover_in_2();


--
-- Name: parcels_rank update_parcels_rank_daytime_hours_above_40_pct_cloud_cover_in_2; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_daytime_hours_above_40_pct_cloud_cover_in_2 AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_daytime_hours_above_40_pct_cloud_cover_in_2();


--
-- Name: parcels_rank update_parcels_rank_daytime_hours_above_50_pct_cloud_cover_in_2; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_daytime_hours_above_50_pct_cloud_cover_in_2 AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_daytime_hours_above_50_pct_cloud_cover_in_2();


--
-- Name: parcels_rank update_parcels_rank_daytime_hours_above_60_pct_cloud_cover_in_2; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_daytime_hours_above_60_pct_cloud_cover_in_2 AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_daytime_hours_above_60_pct_cloud_cover_in_2();


--
-- Name: parcels_rank update_parcels_rank_daytime_hours_above_70_pct_cloud_cover_in_2; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_daytime_hours_above_70_pct_cloud_cover_in_2 AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_daytime_hours_above_70_pct_cloud_cover_in_2();


--
-- Name: parcels_rank update_parcels_rank_daytime_hours_above_80_pct_cloud_cover_in_2; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_daytime_hours_above_80_pct_cloud_cover_in_2 AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_daytime_hours_above_80_pct_cloud_cover_in_2();


--
-- Name: parcels_rank update_parcels_rank_daytime_hours_above_90_pct_cloud_cover_in_2; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_daytime_hours_above_90_pct_cloud_cover_in_2 AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_daytime_hours_above_90_pct_cloud_cover_in_2();


--
-- Name: parcels_rank update_parcels_rank_daytime_hours_in_2015_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_daytime_hours_in_2015_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_daytime_hours_in_2015_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_daytime_hours_in_2016_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_daytime_hours_in_2016_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_daytime_hours_in_2016_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_daytime_hours_in_2017_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_daytime_hours_in_2017_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_daytime_hours_in_2017_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_daytime_hours_in_2018_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_daytime_hours_in_2018_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_daytime_hours_in_2018_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_daytime_hours_in_2019_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_daytime_hours_in_2019_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_daytime_hours_in_2019_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_daytime_hours_in_2020_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_daytime_hours_in_2020_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_daytime_hours_in_2020_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_daytime_hours_in_2021_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_daytime_hours_in_2021_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_daytime_hours_in_2021_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_daytime_hours_in_2022_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_daytime_hours_in_2022_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_daytime_hours_in_2022_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_daytime_hrs_below_0_c_apparent_temperature_; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_daytime_hrs_below_0_c_apparent_temperature_ AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_daytime_hrs_below_0_c_apparent_temperature_();


--
-- Name: parcels_rank update_parcels_rank_daytime_hrs_below_10_c_apparent_temperature; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_daytime_hrs_below_10_c_apparent_temperature AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_daytime_hrs_below_10_c_apparent_temperature();


--
-- Name: parcels_rank update_parcels_rank_daytime_hrs_below_5_c_apparent_temperature_; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_daytime_hrs_below_5_c_apparent_temperature_ AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_daytime_hrs_below_5_c_apparent_temperature_();


--
-- Name: parcels_rank update_parcels_rank_dinner_outside_days_in_2015_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_dinner_outside_days_in_2015_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_dinner_outside_days_in_2015_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_dinner_outside_days_in_2016_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_dinner_outside_days_in_2016_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_dinner_outside_days_in_2016_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_dinner_outside_days_in_2017_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_dinner_outside_days_in_2017_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_dinner_outside_days_in_2017_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_dinner_outside_days_in_2018_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_dinner_outside_days_in_2018_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_dinner_outside_days_in_2018_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_dinner_outside_days_in_2019_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_dinner_outside_days_in_2019_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_dinner_outside_days_in_2019_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_dinner_outside_days_in_2020_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_dinner_outside_days_in_2020_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_dinner_outside_days_in_2020_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_dinner_outside_days_in_2021_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_dinner_outside_days_in_2021_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_dinner_outside_days_in_2021_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_dinner_outside_days_in_2022_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_dinner_outside_days_in_2022_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_dinner_outside_days_in_2022_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_fair_days_in_2015_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_fair_days_in_2015_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_fair_days_in_2015_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_fair_days_in_2016_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_fair_days_in_2016_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_fair_days_in_2016_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_fair_days_in_2017_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_fair_days_in_2017_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_fair_days_in_2017_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_fair_days_in_2018_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_fair_days_in_2018_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_fair_days_in_2018_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_fair_days_in_2019_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_fair_days_in_2019_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_fair_days_in_2019_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_fair_days_in_2020_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_fair_days_in_2020_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_fair_days_in_2020_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_fair_days_in_2021_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_fair_days_in_2021_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_fair_days_in_2021_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_fair_days_in_2022_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_fair_days_in_2022_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_fair_days_in_2022_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_hardiness_temp_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_hardiness_temp_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_hardiness_temp_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2015_; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2015_ AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2015_();


--
-- Name: parcels_rank update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2016_; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2016_ AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2016_();


--
-- Name: parcels_rank update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2017_; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2017_ AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2017_();


--
-- Name: parcels_rank update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2018_; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2018_ AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2018_();


--
-- Name: parcels_rank update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2019_; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2019_ AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2019_();


--
-- Name: parcels_rank update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2020_; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2020_ AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2020_();


--
-- Name: parcels_rank update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2021_; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2021_ AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2021_();


--
-- Name: parcels_rank update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2022_; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2022_ AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_hrs_below_0_c_apparent_temperature_in_2022_();


--
-- Name: parcels_rank update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2015; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2015 AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2015();


--
-- Name: parcels_rank update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2016; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2016 AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2016();


--
-- Name: parcels_rank update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2017; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2017 AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2017();


--
-- Name: parcels_rank update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2018; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2018 AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2018();


--
-- Name: parcels_rank update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2019; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2019 AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2019();


--
-- Name: parcels_rank update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2020; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2020 AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2020();


--
-- Name: parcels_rank update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2021; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2021 AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2021();


--
-- Name: parcels_rank update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2022; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2022 AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_hrs_below_10_c_apparent_temperature_in_2022();


--
-- Name: parcels_rank update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2015_; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2015_ AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2015_();


--
-- Name: parcels_rank update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2016_; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2016_ AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2016_();


--
-- Name: parcels_rank update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2017_; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2017_ AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2017_();


--
-- Name: parcels_rank update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2018_; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2018_ AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2018_();


--
-- Name: parcels_rank update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2019_; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2019_ AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2019_();


--
-- Name: parcels_rank update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2020_; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2020_ AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2020_();


--
-- Name: parcels_rank update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2021_; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2021_ AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2021_();


--
-- Name: parcels_rank update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2022_; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2022_ AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_hrs_below_5_c_apparent_temperature_in_2022_();


--
-- Name: parcels_rank update_parcels_rank_indoor_days_in_2015_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_indoor_days_in_2015_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_indoor_days_in_2015_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_indoor_days_in_2016_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_indoor_days_in_2016_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_indoor_days_in_2016_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_indoor_days_in_2017_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_indoor_days_in_2017_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_indoor_days_in_2017_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_indoor_days_in_2018_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_indoor_days_in_2018_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_indoor_days_in_2018_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_indoor_days_in_2019_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_indoor_days_in_2019_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_indoor_days_in_2019_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_indoor_days_in_2020_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_indoor_days_in_2020_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_indoor_days_in_2020_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_indoor_days_in_2021_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_indoor_days_in_2021_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_indoor_days_in_2021_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_indoor_days_in_2022_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_indoor_days_in_2022_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_indoor_days_in_2022_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_ll_uuid; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_ll_uuid AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_ll_uuid_fn();


--
-- Name: parcels_rank update_parcels_rank_max_download_speed_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_max_download_speed_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_max_download_speed_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_max_upload_speed_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_max_upload_speed_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_max_upload_speed_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_military_count_200km_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_military_count_200km_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_military_count_200km_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_military_count_25km_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_military_count_25km_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_military_count_25km_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_military_count_50km_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_military_count_50km_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_military_count_50km_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_nearby_max_download_speed_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_nearby_max_download_speed_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_nearby_max_download_speed_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_nearby_max_upload_speed_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_nearby_max_upload_speed_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_nearby_max_upload_speed_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_perfect_days_in_2015_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_perfect_days_in_2015_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_perfect_days_in_2015_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_perfect_days_in_2016_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_perfect_days_in_2016_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_perfect_days_in_2016_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_perfect_days_in_2017_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_perfect_days_in_2017_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_perfect_days_in_2017_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_perfect_days_in_2018_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_perfect_days_in_2018_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_perfect_days_in_2018_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_perfect_days_in_2019_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_perfect_days_in_2019_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_perfect_days_in_2019_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_perfect_days_in_2020_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_perfect_days_in_2020_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_perfect_days_in_2020_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_perfect_days_in_2021_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_perfect_days_in_2021_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_perfect_days_in_2021_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_perfect_days_in_2022_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_perfect_days_in_2022_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_perfect_days_in_2022_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_spring_count_100km_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_spring_count_100km_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_spring_count_100km_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_spring_count_10km_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_spring_count_10km_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_spring_count_10km_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_spring_count_1km_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_spring_count_1km_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_spring_count_1km_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_spring_count_50km_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_spring_count_50km_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_spring_count_50km_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_spring_count_5km_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_spring_count_5km_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_spring_count_5km_rank_fn();


--
-- Name: parcels_rank update_parcels_rank_surrounding_coverage_density_rank; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rank_surrounding_coverage_density_rank AFTER UPDATE ON parcels_production.parcels_rank FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rank_surrounding_coverage_density_rank_fn();


--
-- Name: parcels update_parcels_rdi; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rdi AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rdi_fn();


--
-- Name: parcels update_parcels_recind; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_recind AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_recind_fn();


--
-- Name: parcels update_parcels_recrdareano; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_recrdareano AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_recrdareano_fn();


--
-- Name: parcels update_parcels_recrdareatx; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_recrdareatx AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_recrdareatx_fn();


--
-- Name: parcels update_parcels_resi1990; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_resi1990 AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_resi1990_fn();


--
-- Name: parcels update_parcels_resi2000; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_resi2000 AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_resi2000_fn();


--
-- Name: parcels update_parcels_resi2010; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_resi2010 AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_resi2010_fn();


--
-- Name: parcels update_parcels_resident; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_resident AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_resident_fn();


--
-- Name: parcels update_parcels_resityp; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_resityp AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_resityp_fn();


--
-- Name: parcels update_parcels_resiuths; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_resiuths AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_resiuths_fn();


--
-- Name: parcels update_parcels_revisedate; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_revisedate AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_revisedate_fn();


--
-- Name: parcels update_parcels_reviseddate; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_reviseddate AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_reviseddate_fn();


--
-- Name: parcels_road update_parcels_road_high_traffic_km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_road_high_traffic_km AFTER UPDATE ON parcels_production.parcels_road FOR EACH ROW EXECUTE FUNCTION public.update_parcels_road_high_traffic_km_fn();


--
-- Name: parcels_road update_parcels_road_highway_km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_road_highway_km AFTER UPDATE ON parcels_production.parcels_road FOR EACH ROW EXECUTE FUNCTION public.update_parcels_road_highway_km_fn();


--
-- Name: parcels_road update_parcels_road_ll_uuid; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_road_ll_uuid AFTER UPDATE ON parcels_production.parcels_road FOR EACH ROW EXECUTE FUNCTION public.update_parcels_road_ll_uuid_fn();


--
-- Name: parcels_road update_parcels_road_paved_km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_road_paved_km AFTER UPDATE ON parcels_production.parcels_road FOR EACH ROW EXECUTE FUNCTION public.update_parcels_road_paved_km_fn();


--
-- Name: parcels_road update_parcels_road_road_km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_road_road_km AFTER UPDATE ON parcels_production.parcels_road FOR EACH ROW EXECUTE FUNCTION public.update_parcels_road_road_km_fn();


--
-- Name: parcels update_parcels_rzrealdat; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_rzrealdat AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_rzrealdat_fn();


--
-- Name: parcels update_parcels_saddno; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_saddno AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_saddno_fn();


--
-- Name: parcels update_parcels_saddpref; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_saddpref AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_saddpref_fn();


--
-- Name: parcels update_parcels_saddstr; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_saddstr AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_saddstr_fn();


--
-- Name: parcels update_parcels_saddstsuf; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_saddstsuf AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_saddstsuf_fn();


--
-- Name: parcels update_parcels_saddsttyp; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_saddsttyp AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_saddsttyp_fn();


--
-- Name: parcels update_parcels_saledate; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_saledate AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_saledate_fn();


--
-- Name: parcels update_parcels_saleprice; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_saleprice AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_saleprice_fn();


--
-- Name: parcels update_parcels_scity; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_scity AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_scity_fn();


--
-- Name: parcels update_parcels_sdatwebadr; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_sdatwebadr AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_sdatwebadr_fn();


--
-- Name: parcels update_parcels_section; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_section AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_section_fn();


--
-- Name: parcels update_parcels_sourceagent; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_sourceagent AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_sourceagent_fn();


--
-- Name: parcels update_parcels_sourcedate; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_sourcedate AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_sourcedate_fn();


--
-- Name: parcels update_parcels_sourceref; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_sourceref AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_sourceref_fn();


--
-- Name: parcels update_parcels_sourceurl; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_sourceurl AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_sourceurl_fn();


--
-- Name: parcels update_parcels_special; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_special AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_special_fn();


--
-- Name: parcels update_parcels_sqft; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_sqft AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_sqft_fn();


--
-- Name: parcels update_parcels_state2; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_state2 AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_state2_fn();


--
-- Name: parcels update_parcels_strubldg; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_strubldg AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_strubldg_fn();


--
-- Name: parcels update_parcels_strucnst; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_strucnst AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_strucnst_fn();


--
-- Name: parcels update_parcels_struct; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_struct AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_struct_fn();


--
-- Name: parcels update_parcels_structno; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_structno AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_structno_fn();


--
-- Name: parcels update_parcels_structstyle; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_structstyle AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_structstyle_fn();


--
-- Name: parcels update_parcels_strugrad; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_strugrad AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_strugrad_fn();


--
-- Name: parcels update_parcels_strustyl; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_strustyl AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_strustyl_fn();


--
-- Name: parcels update_parcels_subdivision; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_subdivision AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_subdivision_fn();


--
-- Name: parcels update_parcels_subdivision_code; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_subdivision_code AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_subdivision_code_fn();


--
-- Name: parcels update_parcels_subowntype; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_subowntype AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_subowntype_fn();


--
-- Name: parcels update_parcels_subsurfown; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_subsurfown AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_subsurfown_fn();


--
-- Name: parcels update_parcels_sunit; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_sunit AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_sunit_fn();


--
-- Name: parcels update_parcels_szip; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_szip AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_szip_fn();


--
-- Name: parcels update_parcels_taxamt; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_taxamt AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_taxamt_fn();


--
-- Name: parcels update_parcels_taxyear; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_taxyear AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_taxyear_fn();


--
-- Name: parcels update_parcels_towncode; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_towncode AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_towncode_fn();


--
-- Name: parcels update_parcels_trailer; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_trailer AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_trailer_fn();


--
-- Name: parcels update_parcels_transno1; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_transno1 AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_transno1_fn();


--
-- Name: parcels update_parcels_urbanization; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_urbanization AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_urbanization_fn();


--
-- Name: parcels update_parcels_usecode; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_usecode AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_usecode_fn();


--
-- Name: parcels update_parcels_usedesc; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_usedesc AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_usedesc_fn();


--
-- Name: parcels update_parcels_usps_vacancy; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_usps_vacancy AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_usps_vacancy_fn();


--
-- Name: parcels update_parcels_usps_vacancy_date; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_usps_vacancy_date AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_usps_vacancy_date_fn();


--
-- Name: parcels_viewshed update_parcels_viewshed_latitude; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_viewshed_latitude AFTER UPDATE ON parcels_production.parcels_viewshed FOR EACH ROW EXECUTE FUNCTION public.update_parcels_viewshed_latitude_fn();


--
-- Name: parcels_viewshed update_parcels_viewshed_ll_uuid; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_viewshed_ll_uuid AFTER UPDATE ON parcels_production.parcels_viewshed FOR EACH ROW EXECUTE FUNCTION public.update_parcels_viewshed_ll_uuid_fn();


--
-- Name: parcels_viewshed update_parcels_viewshed_longitude; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_viewshed_longitude AFTER UPDATE ON parcels_production.parcels_viewshed FOR EACH ROW EXECUTE FUNCTION public.update_parcels_viewshed_longitude_fn();


--
-- Name: parcels_viewshed update_parcels_viewshed_viewshed_e; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_viewshed_viewshed_e AFTER UPDATE ON parcels_production.parcels_viewshed FOR EACH ROW EXECUTE FUNCTION public.update_parcels_viewshed_viewshed_e_fn();


--
-- Name: parcels_viewshed update_parcels_viewshed_viewshed_index; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_viewshed_viewshed_index AFTER UPDATE ON parcels_production.parcels_viewshed FOR EACH ROW EXECUTE FUNCTION public.update_parcels_viewshed_viewshed_index_fn();


--
-- Name: parcels_viewshed update_parcels_viewshed_viewshed_index_10km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_viewshed_viewshed_index_10km AFTER UPDATE ON parcels_production.parcels_viewshed FOR EACH ROW EXECUTE FUNCTION public.update_parcels_viewshed_viewshed_index_10km_fn();


--
-- Name: parcels_viewshed update_parcels_viewshed_viewshed_index_20km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_viewshed_viewshed_index_20km AFTER UPDATE ON parcels_production.parcels_viewshed FOR EACH ROW EXECUTE FUNCTION public.update_parcels_viewshed_viewshed_index_20km_fn();


--
-- Name: parcels_viewshed update_parcels_viewshed_viewshed_index_2km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_viewshed_viewshed_index_2km AFTER UPDATE ON parcels_production.parcels_viewshed FOR EACH ROW EXECUTE FUNCTION public.update_parcels_viewshed_viewshed_index_2km_fn();


--
-- Name: parcels_viewshed update_parcels_viewshed_viewshed_index_50km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_viewshed_viewshed_index_50km AFTER UPDATE ON parcels_production.parcels_viewshed FOR EACH ROW EXECUTE FUNCTION public.update_parcels_viewshed_viewshed_index_50km_fn();


--
-- Name: parcels_viewshed update_parcels_viewshed_viewshed_index_5km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_viewshed_viewshed_index_5km AFTER UPDATE ON parcels_production.parcels_viewshed FOR EACH ROW EXECUTE FUNCTION public.update_parcels_viewshed_viewshed_index_5km_fn();


--
-- Name: parcels_viewshed update_parcels_viewshed_viewshed_index_75km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_viewshed_viewshed_index_75km AFTER UPDATE ON parcels_production.parcels_viewshed FOR EACH ROW EXECUTE FUNCTION public.update_parcels_viewshed_viewshed_index_75km_fn();


--
-- Name: parcels_viewshed update_parcels_viewshed_viewshed_index_under_2km; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_viewshed_viewshed_index_under_2km AFTER UPDATE ON parcels_production.parcels_viewshed FOR EACH ROW EXECUTE FUNCTION public.update_parcels_viewshed_viewshed_index_under_2km_fn();


--
-- Name: parcels_viewshed update_parcels_viewshed_viewshed_n; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_viewshed_viewshed_n AFTER UPDATE ON parcels_production.parcels_viewshed FOR EACH ROW EXECUTE FUNCTION public.update_parcels_viewshed_viewshed_n_fn();


--
-- Name: parcels_viewshed update_parcels_viewshed_viewshed_ne; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_viewshed_viewshed_ne AFTER UPDATE ON parcels_production.parcels_viewshed FOR EACH ROW EXECUTE FUNCTION public.update_parcels_viewshed_viewshed_ne_fn();


--
-- Name: parcels_viewshed update_parcels_viewshed_viewshed_nw; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_viewshed_viewshed_nw AFTER UPDATE ON parcels_production.parcels_viewshed FOR EACH ROW EXECUTE FUNCTION public.update_parcels_viewshed_viewshed_nw_fn();


--
-- Name: parcels_viewshed update_parcels_viewshed_viewshed_percentage; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_viewshed_viewshed_percentage AFTER UPDATE ON parcels_production.parcels_viewshed FOR EACH ROW EXECUTE FUNCTION public.update_parcels_viewshed_viewshed_percentage_fn();


--
-- Name: parcels_viewshed update_parcels_viewshed_viewshed_s; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_viewshed_viewshed_s AFTER UPDATE ON parcels_production.parcels_viewshed FOR EACH ROW EXECUTE FUNCTION public.update_parcels_viewshed_viewshed_s_fn();


--
-- Name: parcels_viewshed update_parcels_viewshed_viewshed_se; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_viewshed_viewshed_se AFTER UPDATE ON parcels_production.parcels_viewshed FOR EACH ROW EXECUTE FUNCTION public.update_parcels_viewshed_viewshed_se_fn();


--
-- Name: parcels_viewshed update_parcels_viewshed_viewshed_sw; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_viewshed_viewshed_sw AFTER UPDATE ON parcels_production.parcels_viewshed FOR EACH ROW EXECUTE FUNCTION public.update_parcels_viewshed_viewshed_sw_fn();


--
-- Name: parcels_viewshed update_parcels_viewshed_viewshed_w; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_viewshed_viewshed_w AFTER UPDATE ON parcels_production.parcels_viewshed FOR EACH ROW EXECUTE FUNCTION public.update_parcels_viewshed_viewshed_w_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_avg_active_days; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_avg_active_days AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_avg_active_days_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_avg_cloudy_hours_10pct; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_avg_cloudy_hours_10pct AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_avg_cloudy_hours_10pct_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_avg_cloudy_hours_50pct; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_avg_cloudy_hours_50pct AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_avg_cloudy_hours_50pct_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_avg_cloudy_hours_90pct; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_avg_cloudy_hours_90pct AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_avg_cloudy_hours_90pct_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_avg_daytime_hours; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_avg_daytime_hours AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_avg_daytime_hours_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_avg_daytime_hrs_below_0c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_avg_daytime_hrs_below_0c AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_avg_daytime_hrs_below_0c_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_avg_daytime_hrs_below_10c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_avg_daytime_hrs_below_10c AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_avg_daytime_hrs_below_10c_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_avg_daytime_hrs_below_5c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_avg_daytime_hrs_below_5c AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_avg_daytime_hrs_below_5c_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_avg_dinner_outside_days; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_avg_dinner_outside_days AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_avg_dinner_outside_days_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_avg_fair_days; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_avg_fair_days AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_avg_fair_days_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_avg_hrs_below_0c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_avg_hrs_below_0c AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_avg_hrs_below_0c_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_avg_hrs_below_10c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_avg_hrs_below_10c AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_avg_hrs_below_10c_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_avg_hrs_below_5c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_avg_hrs_below_5c AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_avg_hrs_below_5c_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_avg_indoor_days; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_avg_indoor_days AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_avg_indoor_days_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_avg_perfect_days; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_avg_perfect_days AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_avg_perfect_days_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_ll_uuid; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_ll_uuid AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_ll_uuid_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_max_active_days; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_max_active_days AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_max_active_days_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_max_cloudy_hours_10pct; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_max_cloudy_hours_10pct AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_max_cloudy_hours_10pct_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_max_cloudy_hours_50pct; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_max_cloudy_hours_50pct AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_max_cloudy_hours_50pct_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_max_cloudy_hours_90pct; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_max_cloudy_hours_90pct AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_max_cloudy_hours_90pct_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_max_daytime_hours; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_max_daytime_hours AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_max_daytime_hours_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_max_daytime_hrs_below_0c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_max_daytime_hrs_below_0c AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_max_daytime_hrs_below_0c_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_max_daytime_hrs_below_10c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_max_daytime_hrs_below_10c AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_max_daytime_hrs_below_10c_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_max_daytime_hrs_below_5c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_max_daytime_hrs_below_5c AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_max_daytime_hrs_below_5c_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_max_dinner_outside_days; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_max_dinner_outside_days AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_max_dinner_outside_days_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_max_fair_days; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_max_fair_days AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_max_fair_days_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_max_hrs_below_0c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_max_hrs_below_0c AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_max_hrs_below_0c_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_max_hrs_below_10c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_max_hrs_below_10c AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_max_hrs_below_10c_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_max_hrs_below_5c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_max_hrs_below_5c AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_max_hrs_below_5c_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_max_indoor_days; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_max_indoor_days AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_max_indoor_days_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_max_perfect_days; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_max_perfect_days AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_max_perfect_days_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_median_active_days; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_median_active_days AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_median_active_days_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_median_cloudy_hours_10pct; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_median_cloudy_hours_10pct AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_median_cloudy_hours_10pct_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_median_cloudy_hours_50pct; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_median_cloudy_hours_50pct AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_median_cloudy_hours_50pct_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_median_cloudy_hours_90pct; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_median_cloudy_hours_90pct AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_median_cloudy_hours_90pct_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_median_daytime_hours; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_median_daytime_hours AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_median_daytime_hours_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_median_daytime_hrs_below_0c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_median_daytime_hrs_below_0c AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_median_daytime_hrs_below_0c_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_median_daytime_hrs_below_10c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_median_daytime_hrs_below_10c AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_median_daytime_hrs_below_10c_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_median_daytime_hrs_below_5c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_median_daytime_hrs_below_5c AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_median_daytime_hrs_below_5c_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_median_dinner_outside_days; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_median_dinner_outside_days AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_median_dinner_outside_days_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_median_fair_days; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_median_fair_days AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_median_fair_days_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_median_hrs_below_0c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_median_hrs_below_0c AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_median_hrs_below_0c_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_median_hrs_below_10c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_median_hrs_below_10c AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_median_hrs_below_10c_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_median_hrs_below_5c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_median_hrs_below_5c AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_median_hrs_below_5c_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_median_indoor_days; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_median_indoor_days AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_median_indoor_days_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_median_perfect_days; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_median_perfect_days AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_median_perfect_days_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_min_active_days; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_min_active_days AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_min_active_days_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_min_cloudy_hours_10pct; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_min_cloudy_hours_10pct AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_min_cloudy_hours_10pct_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_min_cloudy_hours_50pct; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_min_cloudy_hours_50pct AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_min_cloudy_hours_50pct_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_min_cloudy_hours_90pct; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_min_cloudy_hours_90pct AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_min_cloudy_hours_90pct_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_min_daytime_hours; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_min_daytime_hours AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_min_daytime_hours_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_min_daytime_hrs_below_0c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_min_daytime_hrs_below_0c AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_min_daytime_hrs_below_0c_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_min_daytime_hrs_below_10c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_min_daytime_hrs_below_10c AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_min_daytime_hrs_below_10c_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_min_daytime_hrs_below_5c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_min_daytime_hrs_below_5c AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_min_daytime_hrs_below_5c_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_min_dinner_outside_days; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_min_dinner_outside_days AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_min_dinner_outside_days_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_min_fair_days; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_min_fair_days AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_min_fair_days_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_min_hrs_below_0c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_min_hrs_below_0c AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_min_hrs_below_0c_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_min_hrs_below_10c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_min_hrs_below_10c AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_min_hrs_below_10c_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_min_hrs_below_5c; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_min_hrs_below_5c AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_min_hrs_below_5c_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_min_indoor_days; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_min_indoor_days AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_min_indoor_days_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_min_perfect_days; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_min_perfect_days AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_min_perfect_days_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_updated; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_updated AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_updated_fn();


--
-- Name: parcels_weather_summary update_parcels_weather_summary_years; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_weather_summary_years AFTER UPDATE ON parcels_production.parcels_weather_summary FOR EACH ROW EXECUTE FUNCTION public.update_parcels_weather_summary_years_fn();


--
-- Name: parcels update_parcels_width; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_width AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_width_fn();


--
-- Name: parcels update_parcels_yearbuilt; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_yearbuilt AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_yearbuilt_fn();


--
-- Name: parcels update_parcels_zoning; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_zoning AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_zoning_fn();


--
-- Name: parcels update_parcels_zoning_change_date; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_zoning_change_date AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_zoning_change_date_fn();


--
-- Name: parcels update_parcels_zoning_description; Type: TRIGGER; Schema: parcels_production; Owner: -
--

CREATE TRIGGER update_parcels_zoning_description AFTER UPDATE ON parcels_production.parcels FOR EACH ROW EXECUTE FUNCTION public.update_parcels_zoning_description_fn();


--
-- Name: parcels_seismic_hazards_model parcels_seismic_hazards_model_ll_uuid_fkey; Type: FK CONSTRAINT; Schema: parcels_production; Owner: -
--

ALTER TABLE ONLY parcels_production.parcels_seismic_hazards_model
    ADD CONSTRAINT parcels_seismic_hazards_model_ll_uuid_fkey FOREIGN KEY (ll_uuid) REFERENCES parcels_production.parcels(ll_uuid);


--
-- Name: parcels_production_publication; Type: PUBLICATION; Schema: -; Owner: -
--

CREATE PUBLICATION parcels_production_publication FOR ALL TABLES WITH (publish = 'insert, update, delete, truncate');


--
-- Name: SCHEMA parcels_production; Type: ACL; Schema: -; Owner: -
--

GRANT ALL ON SCHEMA parcels_production TO parcelsuser;
GRANT USAGE ON SCHEMA parcels_production TO replication_user;


--
-- Name: TABLE airports; Type: ACL; Schema: parcels_production; Owner: -
--

GRANT ALL ON TABLE parcels_production.airports TO parcelsuser;
GRANT SELECT ON TABLE parcels_production.airports TO replication_user;


--
-- Name: TABLE broadband_availability; Type: ACL; Schema: parcels_production; Owner: -
--

GRANT ALL ON TABLE parcels_production.broadband_availability TO parcelsuser;
GRANT SELECT ON TABLE parcels_production.broadband_availability TO replication_user;


--
-- Name: TABLE coordinates; Type: ACL; Schema: parcels_production; Owner: -
--

GRANT ALL ON TABLE parcels_production.coordinates TO parcelsuser;
GRANT SELECT ON TABLE parcels_production.coordinates TO replication_user;


--
-- Name: TABLE coverage; Type: ACL; Schema: parcels_production; Owner: -
--

GRANT ALL ON TABLE parcels_production.coverage TO parcelsuser;
GRANT SELECT ON TABLE parcels_production.coverage TO replication_user;


--
-- Name: TABLE database_table_views; Type: ACL; Schema: parcels_production; Owner: -
--

GRANT ALL ON TABLE parcels_production.database_table_views TO parcelsuser;
GRANT SELECT ON TABLE parcels_production.database_table_views TO replication_user;


--
-- Name: TABLE geography_columns; Type: ACL; Schema: parcels_production; Owner: -
--

GRANT SELECT ON TABLE parcels_production.geography_columns TO replication_user;


--
-- Name: TABLE geometry_columns; Type: ACL; Schema: parcels_production; Owner: -
--

GRANT SELECT ON TABLE parcels_production.geometry_columns TO replication_user;


--
-- Name: TABLE heatmaps; Type: ACL; Schema: parcels_production; Owner: -
--

GRANT SELECT ON TABLE parcels_production.heatmaps TO replication_user;


--
-- Name: TABLE importers; Type: ACL; Schema: parcels_production; Owner: -
--

GRANT ALL ON TABLE parcels_production.importers TO parcelsuser;
GRANT SELECT ON TABLE parcels_production.importers TO replication_user;


--
-- Name: TABLE parcels; Type: ACL; Schema: parcels_production; Owner: -
--

GRANT SELECT ON TABLE parcels_production.parcels TO replication_user;


--
-- Name: TABLE parcels_agriculture; Type: ACL; Schema: parcels_production; Owner: -
--

GRANT SELECT ON TABLE parcels_production.parcels_agriculture TO replication_user;


--
-- Name: TABLE parcels_airport; Type: ACL; Schema: parcels_production; Owner: -
--

GRANT SELECT ON TABLE parcels_production.parcels_airport TO replication_user;


--
-- Name: TABLE parcels_coastline; Type: ACL; Schema: parcels_production; Owner: -
--

GRANT SELECT ON TABLE parcels_production.parcels_coastline TO replication_user;


--
-- Name: TABLE parcels_density; Type: ACL; Schema: parcels_production; Owner: -
--

GRANT SELECT ON TABLE parcels_production.parcels_density TO replication_user;


--
-- Name: TABLE parcels_elevation; Type: ACL; Schema: parcels_production; Owner: -
--

GRANT SELECT ON TABLE parcels_production.parcels_elevation TO replication_user;


--
-- Name: TABLE parcels_geometry; Type: ACL; Schema: parcels_production; Owner: -
--

GRANT SELECT ON TABLE parcels_production.parcels_geometry TO replication_user;


--
-- Name: TABLE parcels_geometry_extra; Type: ACL; Schema: parcels_production; Owner: -
--

GRANT ALL ON TABLE parcels_production.parcels_geometry_extra TO parcelsuser;
GRANT SELECT ON TABLE parcels_production.parcels_geometry_extra TO replication_user;


--
-- Name: SEQUENCE parcels_geometry_extra_ogc_fid_seq; Type: ACL; Schema: parcels_production; Owner: -
--

GRANT ALL ON SEQUENCE parcels_production.parcels_geometry_extra_ogc_fid_seq TO parcelsuser;


--
-- Name: TABLE parcels_internet; Type: ACL; Schema: parcels_production; Owner: -
--

GRANT SELECT ON TABLE parcels_production.parcels_internet TO replication_user;


--
-- Name: TABLE parcels_meta; Type: ACL; Schema: parcels_production; Owner: -
--

GRANT SELECT ON TABLE parcels_production.parcels_meta TO replication_user;


--
-- Name: TABLE parcels_nature; Type: ACL; Schema: parcels_production; Owner: -
--

GRANT SELECT ON TABLE parcels_production.parcels_nature TO replication_user;


--
-- Name: TABLE parcels_rank; Type: ACL; Schema: parcels_production; Owner: -
--

GRANT SELECT ON TABLE parcels_production.parcels_rank TO replication_user;


--
-- Name: TABLE parcels_road; Type: ACL; Schema: parcels_production; Owner: -
--

GRANT SELECT ON TABLE parcels_production.parcels_road TO replication_user;


--
-- Name: TABLE parcels_viewshed; Type: ACL; Schema: parcels_production; Owner: -
--

GRANT SELECT ON TABLE parcels_production.parcels_viewshed TO replication_user;


--
-- Name: TABLE parcels_weather; Type: ACL; Schema: parcels_production; Owner: -
--

GRANT ALL ON TABLE parcels_production.parcels_weather TO parcelsuser;
GRANT SELECT ON TABLE parcels_production.parcels_weather TO replication_user;


--
-- Name: TABLE parcels_weather_summary; Type: ACL; Schema: parcels_production; Owner: -
--

GRANT SELECT ON TABLE parcels_production.parcels_weather_summary TO replication_user;


--
-- Name: TABLE plant_hardiness_zones; Type: ACL; Schema: parcels_production; Owner: -
--

GRANT ALL ON TABLE parcels_production.plant_hardiness_zones TO parcelsuser;
GRANT SELECT ON TABLE parcels_production.plant_hardiness_zones TO replication_user;


--
-- Name: TABLE properties; Type: ACL; Schema: parcels_production; Owner: -
--

GRANT ALL ON TABLE parcels_production.properties TO parcelsuser;
GRANT SELECT ON TABLE parcels_production.properties TO replication_user;


--
-- Name: TABLE raster_columns; Type: ACL; Schema: parcels_production; Owner: -
--

GRANT SELECT ON TABLE parcels_production.raster_columns TO replication_user;


--
-- Name: TABLE raster_overviews; Type: ACL; Schema: parcels_production; Owner: -
--

GRANT SELECT ON TABLE parcels_production.raster_overviews TO replication_user;


--
-- Name: TABLE roads; Type: ACL; Schema: parcels_production; Owner: -
--

GRANT ALL ON TABLE parcels_production.roads TO parcelsuser;
GRANT SELECT ON TABLE parcels_production.roads TO replication_user;


--
-- Name: TABLE spatial_ref_sys; Type: ACL; Schema: parcels_production; Owner: -
--

GRANT SELECT ON TABLE parcels_production.spatial_ref_sys TO replication_user;


--
-- Name: TABLE tiles; Type: ACL; Schema: parcels_production; Owner: -
--

GRANT ALL ON TABLE parcels_production.tiles TO parcelsuser;
GRANT SELECT ON TABLE parcels_production.tiles TO replication_user;


--
-- PostgreSQL database dump complete
--

